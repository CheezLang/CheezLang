{
    "name": "cheezlang",
    "scopeName": "source.cheezlang",
    "patterns": [
        { "include": "#block_comment" },
        { "include": "#line_comment" },
        { "include": "#type_decl" },
        { "include": "#var_decl" },
        { "include": "#fn_decl" },
        { "include": "#expression" }
    ],
    "repository": {
        "block_comment": {
            "comment": "Block comment",
            "name": "comment.block.cheezlang",
            "begin": "/\\*",
            "end": "\\*/",
            "patterns": [
                {
                    "include": "#block_comment"
                }
            ]
        },
        "line_comment": {
            "comment": "Single-line comment",
            "name": "comment.line.double-slash.cheezlang",
            "begin": "//",
            "end": "$"
        },
        "core_types": {
            "name": "storage.type.cheezlang",
            "match": "\\b(bool|char|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|string|c_string|int|uint|float|double|void|Self|any|type)\\b"
        },
        "type_modifiers": {
            "name": "storage.type.cheezlang",
            "match": "\\b(ref|const)\\b"
        },
        "modifiers": {
            "name": "keyword.modifier.cheezlang",
            "match": "\\b(pub|const)\\b"
        },
        "special_values": {
            "name": "variable.language.cheezlang",
            "match": "\\b(self|default|it|it_index)\\b"
        },
        "identifier": {
            "patterns": [
                {
                    "comment": "#tuiae #Tuiae",
                    "name": "support.constant.cheezlang",
                    "match": "#([_a-zA-Z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": "$Tuiae   @Tuie",
                    "name": "entity.name.type.cheezlang",
                    "match": "[$@]([A-Z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": "$tuiae   @tuiae",
                    "name": "entity.name.function.cheezlang",
                    "match": "[$@]([_A-Za-z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": "Tuiae() $Tuiae()   @Tuiae()",
                    "name": "entity.name.type.cheezlang",
                    "match": "(\\b|\\$|@|#)?([A-Z][_A-Za-z0-9]*)(?=\\s*\\()"
                },
                {
                    "comment": "$tuiae()   @tuiae()  #tuiae()",
                    "name": "entity.name.function.cheezlang",
                    "match": "(\\b|\\$|@|#)?([_A-Za-z][_A-Za-z0-9]*)(?=\\s*\\()"
                },
                {
                    "comment": "t.uiae   T.uiae",
                    "name": "variable.parameter.cheezlang",
                    "match": "(?<=\\.)([_A-Za-z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": "Tuiae",
                    "name": "entity.name.type.cheezlang",
                    "match": "\\b([A-Z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": ": tuiae  : Tuiae  -> tuiae -> Tuiae",
                    "name": "entity.name.type.cheezlang",
                    "match": "((?<=:)|(?<=:\\s)|(?<=->\\s)|(?<=->))([_A-Za-z][_A-Za-z0-9]*)\\b"
                },
                {
                    "comment": "tuiae",
                    "name": "variable.other.cheezlang",
                    "match": "\\b([_A-Za-z][_A-Za-z0-9]*)\\b"
                }
            ]
        },
        "parens": {
            "match": ",|\\(|\\)|\\[|\\]|\\{|\\}"
        },
        "delimiters": {
            "name": "keyword.operator.cheezlang",
            "match": "->|:|\\.|="
        },
        "operators": {
            "name": "keyword.operator.cheezlang",
            "match": "(\\+=?|-=?|\\*=?|\\/=?|%=?|\\band\\b|\\bor\\b|\\bis\\b|<<|>=|>|<=|<|==|!=|!|&)"
        },
        "control_keywords": {
            "name": "keyword.control.cheezlang",
            "match": "\\b(if|then|match|while|loop|return|continue|break|defer|else)\\b"
        },
        "type_keywords": {
            "name": "storage.type.cheezlang",
            "match": "\\b(use|enum|struct|trait|impl|for|pub|do|import)\\b"
        },
        "escaped_character": {
            "name": "constant.character.escape.cheezlang",
            "match": "`."
        },
        "literals": {
            "patterns": [
                {
                    "name": "string.quoted.double.cheezlang",
                    "begin": "\"",
                    "end": "\"([a-zA-Z_][a-zA-Z0-9_]*)?",
                    "patterns": [
                        {
                            "include": "#escaped_character"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.cheezlang",
                    "begin": "'",
                    "end": "'([a-zA-Z_][a-zA-Z0-9_]*)?",
                    "patterns": [
                        {
                            "include": "#escaped_character"
                        }
                    ]
                },
                {
                    "name": "constant.numeric.cheezlang",
                    "match": "\\b[0-9][0-9_]*\\.[0-9_]+([eE][+-]?[0-9_]+)?([a-zA-Z_][a-zA-Z0-9_]*)?\\b"
                },
                {
                    "name": "constant.numeric.cheezlang",
                    "match": "\\b((0x[0-9a-fA-F_]+)|(0b[01_]+)|([0-9_]+))([a-zA-Z_][a-zA-Z0-9_]*)?\\b"
                },
                {
                    "name": "constant.numeric.cheezlang",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.cheezlang",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.cheezlang",
                    "match": "\\b(null)\\b"
                }
            ]
        },
        "expression": {
            "patterns": [
                { "include": "#block_comment" },
                { "include": "#line_comment" },
                {
                    "name": "storage.type.cheezlang",
                    "match": "\\b(fn|Fn)\\b"
                },
                {
                    "name": "keyword.other.cheezlang",
                    "match": "\\b(cast)\\b"
                },
                { "include": "#core_types" },
                { "include": "#control_keywords" },
                { "include": "#type_keywords" },
                { "include": "#special_values" },
                { "include": "#literals" },
                { "include": "#type_modifiers" },
                { "include": "#operators" },
                { "include": "#parens" },
                { "include": "#delimiters" },
                { "include": "#identifier" }
            ]
        }
    }
}