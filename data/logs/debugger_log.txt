[3380] -> (C)  {"command":"initialize","arguments":{"clientID":"vscode","clientName":"Visual Studio Code","adapterID":"cheez","pathFormat":"path","linesStartAt1":true,"columnsStartAt1":true,"supportsVariableType":true,"supportsVariablePaging":true,"supportsRunInTerminalRequest":true,"locale":"en-us"},"type":"request","seq":1}
[3380] -> (C)  {
    "type": "request",
    "seq": 1,
    "arguments": {
        "supportsRunInTerminalRequest": true,
        "pathFormat": "path",
        "clientID": "vscode",
        "clientName": "Visual Studio Code",
        "supportsVariableType": true,
        "adapterID": "cheez",
        "linesStartAt1": true,
        "supportsVariablePaging": true,
        "columnsStartAt1": true,
        "locale": "en-us"
    },
    "command": "initialize"

}
[3380] <- (E)  {
    "type": "event",
    "seq": 0,
    "event": "initialized",
    "body": {
    }

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "supportsConfigurationDoneRequest": true,
        "supportsDisassembleRequest": true
    },
    "seq": 1,
    "request_seq": 1,
    "command": "initialize"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"basic_cheez.che","path":"p:\\dev\\CheezLang\\data\\basic_cheez.che"},"lines":[10],"breakpoints":[{"line":10}],"sourceModified":false},"type":"request","seq":2}
[3380] -> (C)  {
    "type": "request",
    "seq": 2,
    "arguments": {
        "lines": [
            10
        ],
        "source": {
            "name": "basic_cheez.che",
            "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
        },
        "breakpoints": [
            {
                "line": 10
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 2,
    "request_seq": 2,
    "command": "setBreakpoints"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"CodeGeneratorHelpers.cs","path":"p:\\dev\\CheezLang\\Backends\\LLVM\\LLVMSharpBackend\\LLVM\\CodeGeneratorHelpers.cs"},"lines":[1509],"breakpoints":[{"line":1509}],"sourceModified":false},"type":"request","seq":3}
[3380] -> (C)  {
    "type": "request",
    "seq": 3,
    "arguments": {
        "lines": [
            1509
        ],
        "source": {
            "name": "CodeGeneratorHelpers.cs",
            "path": "p:\\dev\\CheezLang\\Backends\\LLVM\\LLVMSharpBackend\\LLVM\\CodeGeneratorHelpers.cs"
        },
        "breakpoints": [
            {
                "line": 1509
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 3,
    "request_seq": 3,
    "command": "setBreakpoints"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"ExpressionGenerator.cs","path":"p:\\dev\\CheezLang\\Backends\\LLVM\\LLVMSharpBackend\\LLVM\\ExpressionGenerator.cs"},"lines":[252],"breakpoints":[{"line":252}],"sourceModified":false},"type":"request","seq":4}
[3380] -> (C)  {
    "type": "request",
    "seq": 4,
    "arguments": {
        "lines": [
            252
        ],
        "source": {
            "name": "ExpressionGenerator.cs",
            "path": "p:\\dev\\CheezLang\\Backends\\LLVM\\LLVMSharpBackend\\LLVM\\ExpressionGenerator.cs"
        },
        "breakpoints": [
            {
                "line": 252
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 4,
    "request_seq": 4,
    "command": "setBreakpoints"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"Scope.cs","path":"p:\\dev\\CheezLang\\CompilerLibrary\\Scope.cs"},"lines":[69,788],"breakpoints":[{"line":69},{"line":788}],"sourceModified":false},"type":"request","seq":5}
[3380] -> (C)  {
    "type": "request",
    "seq": 5,
    "arguments": {
        "lines": [
            69,
            788
        ],
        "source": {
            "name": "Scope.cs",
            "path": "p:\\dev\\CheezLang\\CompilerLibrary\\Scope.cs"
        },
        "breakpoints": [
            {
                "line": 69
            },
            {
                "line": 788
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 5,
    "request_seq": 5,
    "command": "setBreakpoints"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"TypeInference.cs","path":"p:\\dev\\CheezLang\\CompilerLibrary\\SemanticAnalysis\\TypeInference.cs"},"lines":[5881],"breakpoints":[{"line":5881}],"sourceModified":false},"type":"request","seq":6}
[3380] -> (C)  {
    "type": "request",
    "seq": 6,
    "arguments": {
        "lines": [
            5881
        ],
        "source": {
            "name": "TypeInference.cs",
            "path": "p:\\dev\\CheezLang\\CompilerLibrary\\SemanticAnalysis\\TypeInference.cs"
        },
        "breakpoints": [
            {
                "line": 5881
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 6,
    "request_seq": 6,
    "command": "setBreakpoints"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"launch","arguments":{"name":"Cheez Debugger","type":"cheez","request":"launch","program":"p:\\dev\\CheezLang\\data\\basic_cheez.che","args":[],"internalConsoleOptions":"openOnSessionStart","__sessionId":"455ecfaa-3c24-4e90-9f6b-476c01b96f67"},"type":"request","seq":7}
[3380] -> (C)  {
    "type": "request",
    "seq": 7,
    "arguments": {
        "type": "cheez",
        "internalConsoleOptions": "openOnSessionStart",
        "program": "p:\\dev\\CheezLang\\data\\basic_cheez.che",
        "name": "Cheez Debugger",
        "request": "launch",
        "args": [
        ],
        "__sessionId": "455ecfaa-3c24-4e90-9f6b-476c01b96f67"
    },
    "command": "launch"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 7,
    "request_seq": 7,
    "command": "launch"

}
[3380]  ===================================================
[16324]  [16324] [LoadFileJob 'p:\dev\CheezLang\data\basic_cheez.che'] Begin loading
[16324]  [16324] [LoadFileJob 'p:\dev\CheezLang\data\basic_cheez.che'] Done
[16324]  [16324] [CompileGlobalNode #1] Begin compilation
[16324]  [16324] [CompileGlobalNode #1] compile_function 'Main': Begin
[16324]  [16324] [CompileGlobalNode #1] compile_function 'Main': Compile Body
[16324]  [16324] [CompileGlobalNodeJob #1] suspending on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #18] Begin compilation
[16324]  [16324] [CompileGlobalNode #18] compile_function 'f1': Begin
[16324]  [16324] [CompileGlobalNode #18] compile_function 'f1': Compile Body
[16324]  [16324] [CompileGlobalNodeJob #18] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #18] compile_function 'f1': Generate Bytecode
[16324]  [16324] [CompileGlobalNode #18] compile_function 'f1': End
[16324]  [16324] [CompileGlobalNode #18] Done
[16324]  [16324] [CompileGlobalNodeJob #1] resuming on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on (<<<<decl.value_expr.value != Value.None)
[16324]  [16324] [CompileGlobalNodeJob #1] suspending on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #26] Begin compilation
[16324]  [16324] [CompileGlobalNode #26] compile_function 'f2': Begin
[16324]  [16324] [CompileGlobalNode #26] compile_function 'f2': Compile Body
[16324]  [16324] [CompileGlobalNodeJob #26] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #26] compile_function 'f2': Generate Bytecode
[16324]  [16324] [CompileGlobalNode #26] compile_function 'f2': End
[16324]  [16324] [CompileGlobalNode #26] Done
[16324]  [16324] [CompileGlobalNodeJob #1] resuming on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on (<<<<decl.value_expr.value != Value.None)
[16324]  [16324] [CompileGlobalNodeJob #1] suspending on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #34] Begin compilation
[16324]  [16324] [CompileGlobalNode #34] compile_function 'f3': Begin
[16324]  [16324] [CompileGlobalNode #34] compile_function 'f3': Compile Body
[16324]  [16324] [CompileGlobalNodeJob #34] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNode #34] compile_function 'f3': Generate Bytecode
[16324]  [16324] [CompileGlobalNode #34] compile_function 'f3': End
[16324]  [16324] [CompileGlobalNode #34] Done
[16324]  [16324] [CompileGlobalNodeJob #1] resuming on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on symbols.contains(name)
[16324]  [16324] [CompileGlobalNodeJob #1] done on (<<<<decl.value_expr.value != Value.None)
[16324]  [16324] [CompileGlobalNode #1] compile_function 'Main': Generate Bytecode
[16324]  [16324] [CompileGlobalNode #1] compile_function 'Main': Call Main
[16324]  push_frame 0 (fp = -1 -> 0, sp = 0 -> 0)
[16324] <- (E)  {
    "type": "event",
    "seq": 10,
    "event": "stopped",
    "body": {
        "threadId": 0,
        "reason": "breakpoint"
    }

}
[3380] -> (C)  {"command":"stackTrace","arguments":{"threadId":0,"levels":1,"startFrame":0},"type":"request","seq":8}
[3380] -> (C)  {
    "type": "request",
    "seq": 8,
    "arguments": {
        "startFrame": 0,
        "threadId": 0,
        "levels": 1
    },
    "command": "stackTrace"

}
[3380]  stackframe: line: 10, func: 'Main', path: 'p:\dev\CheezLang\data\basic_cheez.che'
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "stackFrames": [
            {
                "column": 5,
                "id": 0,
                "name": "Main",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 10
            }
        ]
    },
    "seq": 8,
    "request_seq": 8,
    "command": "stackTrace"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"threads","type":"request","seq":9}
[3380] -> (C)  {
    "type": "request",
    "seq": 9,
    "command": "threads"

}
[3380]  request threads
[3380]  [DapThread(id = 0, name = Main Thread)]
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "threads": [
            {
                "id": 0,
                "name": "Main Thread"
            }
        ]
    },
    "seq": 9,
    "request_seq": 9,
    "command": "threads"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"stackTrace","arguments":{"threadId":0,"startFrame":0,"levels":20},"type":"request","seq":10}
[3380] -> (C)  {
    "type": "request",
    "seq": 10,
    "arguments": {
        "startFrame": 0,
        "threadId": 0,
        "levels": 20
    },
    "command": "stackTrace"

}
[3380]  stackframe: line: 10, func: 'Main', path: 'p:\dev\CheezLang\data\basic_cheez.che'
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "stackFrames": [
            {
                "column": 5,
                "id": 0,
                "name": "Main",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 10
            }
        ]
    },
    "seq": 10,
    "request_seq": 10,
    "command": "stackTrace"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"scopes","arguments":{"frameId":0},"type":"request","seq":11}
[3380] -> (C)  {
    "type": "request",
    "seq": 11,
    "arguments": {
        "frameId": 0
    },
    "command": "scopes"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "scopes": [
            {
                "name": "Locals",
                "variablesReference": 1,
                "presentationHint": "locals"
            },
            {
                "name": "Arguments",
                "variablesReference": 2,
                "presentationHint": "arguments"
            },
            {
                "name": "Registers",
                "variablesReference": 3,
                "presentationHint": "registers"
            }
        ]
    },
    "seq": 11,
    "request_seq": 11,
    "command": "scopes"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"variables","arguments":{"variablesReference":1},"type":"request","seq":12}
[3380] -> (C)  {
    "type": "request",
    "seq": 12,
    "arguments": {
        "variablesReference": 1
    },
    "command": "variables"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "variables": [
        ]
    },
    "seq": 12,
    "request_seq": 12,
    "command": "variables"

}
[3380]  ===================================================
[3380] -> (C)  {"command":"disconnect","arguments":{"restart":false},"type":"request","seq":13}
[3380] -> (C)  {
    "type": "request",
    "seq": 13,
    "arguments": {
        "restart": false
    },
    "command": "disconnect"

}
[3380] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 13,
    "request_seq": 13,
    "command": "disconnect"

}
[3380]  ===================================================
