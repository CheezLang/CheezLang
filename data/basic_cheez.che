// _ :: Main()
// Main :: () {
// }

sub :: (a: int, b: int) -> int {
    return a - b
}

Bar :: Array[int, Add[5, 6]]

Add :: (A: int, B: int) const A + B
Array :: (T: type, Size: int) struct {
    arr : [sub(Size, 2)]T
}


// Foo :: struct {
//     {
//         str := new_string()
//         append_string(str, "a")
//         append_string(str, " : ")
//         append_string(str, "int")
//         append_string(str, "
// ")
//         append_string(str, "b : string")
//         print(str)
//         slice(str)
//     }
// }
