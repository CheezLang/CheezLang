
// _ :: 1 + 2 * 3
// _ :: 1 * 2 + 3
// _ := b <- c
// _ :: a <- {a : lol = b}
// _ :: a or b and c or d
// _ := 0 .. length - 1
// _ := 0 ..= length * 2
// _ :: 1, 2, 3
// _ :: 1, 2 + 3, 1 * 9, a <- 5, b <- 3, (){print(lol)}
// _ :: a <- b <- c
// _ :: a <- b <- c <- d
// _ :: a | b | c
// _ :: a | b | c | d
// _ :: a | (b <- c)
// _ :: (a | b) <- c
// _ :: a <- (b | c)
// _ :: (a <- b) | c

// (lol : 0 = false) {}
// (lol := false) {}
// (() {})
// ()
// (1)
// (1,)
// (1,2)
// (1,2,)


// a, b : int, int = 1, 2
// (a, b) : (int, int) = (1, 2)

// (a, b : int, int = 1, 2) {}
// ((a, b) : (int, int) = (1, 2)) {}

// foo(a, b = 0, c = 5, d)
// a.b.foo(
//     x.y
//     ).z

// (a, b) := (c, d)

// foo :: (a : int, b := 3, d := true) {

// }
// ((a), (b := c), (d))

Main :: () {
    x := true
    y := 5

    print(x, y)
}
