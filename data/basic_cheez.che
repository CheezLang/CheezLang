
// _ :: 1 + 2 * 3
// _ :: 1 * 2 + 3
// _ := b <- c
// _ :: a <- {a : lol = b}
// _ :: a or b and c or d
// _ := 0 .. length - 1
// _ := 0 ..= length * 2
// _ :: 1, 2, 3
// _ :: 1, 2 + 3, 1 * 9, a <- 5, b <- 3, (){print(lol)}
// _ :: a <- b <- c
// _ :: a <- b <- c <- d
// _ :: a | b | c
// _ :: a | b | c | d
// _ :: a | (b <- c)
// _ :: (a | b) <- c
// _ :: a <- (b | c)
// _ :: (a <- b) | c

// (lol : 0 = false) {}
// (lol := false) {}
// (() {})
// ()
// (1)
// (1,)
// (1,2)
// (1,2,)


// a, b : int, int = 1, 2
// (a, b) : (int, int) = (1, 2)

// (a, b : int, int = 1, 2) {}
// ((a, b) : (int, int) = (1, 2)) {}

// foo(a, b = 0, c = 5, d)
// a.b.foo(
//     x.y
//     ).z

// (a, b) := (c, d)

// foo :: (a : int, b := 3, d := true) {

// 
// ((a), (b := c), (d))

countdown :: (n: int) {
    // print(fac(n))
    if n > 0 {
        countdown(n - 1)
    }
}

fac :: (n: int) -> int {
    return if n <= 1 then 1 else n * fac(n - 1)
    // if n <= 1 {
    //     return 1
    // } else {
    //     return n * fac(n - 1)
    // }
}

fib :: (n: int) -> int {
    return if n <= 1 then 1 else fib(n - 1) + fib(n - 2)
    // if n <= 1 {
    //     return 1
    // } else {
    //     return fib(n - 1) + fib(n - 2)
    // }
}

max :: (a: int, b: int) -> int {
    return if a > b then a else b
}

Main :: () {
    print_string("lol")
    print_int(5)
    print_float(1.123)
    // print(max(8, 7))
    // countdown(10)
    // print(fac(10))
    // print(fib(5))

//     a := 3
//     b := 2

//     // foo(n)
//     // foo(3, 3)
//     // foo(4, 5)
    
//     if a == b {
//         print(1)
//     } else {
//         print(0)
//     }
}
