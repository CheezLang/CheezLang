[5056] -> (C)  {"command":"initialize","arguments":{"clientID":"vscode","clientName":"Visual Studio Code","adapterID":"cheez","pathFormat":"path","linesStartAt1":true,"columnsStartAt1":true,"supportsVariableType":true,"supportsVariablePaging":true,"supportsRunInTerminalRequest":true,"locale":"en-us"},"type":"request","seq":1}
[5056] -> (C)  {
    "type": "request",
    "seq": 1,
    "arguments": {
        "supportsRunInTerminalRequest": true,
        "pathFormat": "path",
        "clientID": "vscode",
        "clientName": "Visual Studio Code",
        "supportsVariableType": true,
        "adapterID": "cheez",
        "linesStartAt1": true,
        "supportsVariablePaging": true,
        "columnsStartAt1": true,
        "locale": "en-us"
    },
    "command": "initialize"

}
[5056] <- (E)  {
    "type": "event",
    "seq": 0,
    "event": "initialized",
    "body": {
    }

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "supportsConfigurationDoneRequest": true,
        "supportsDisassembleRequest": true
    },
    "seq": 1,
    "request_seq": 1,
    "command": "initialize"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"basic_cheez.che","path":"p:\\dev\\CheezLang\\data\\basic_cheez.che"},"lines":[17],"breakpoints":[{"line":17}],"sourceModified":false},"type":"request","seq":2}
[5056] -> (C)  {
    "type": "request",
    "seq": 2,
    "arguments": {
        "lines": [
            17
        ],
        "source": {
            "name": "basic_cheez.che",
            "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
        },
        "breakpoints": [
            {
                "line": 17
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 2,
    "request_seq": 2,
    "command": "setBreakpoints"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"fac.cbc","path":"p:\\dev\\CheezLang\\data\\fac.cbc"},"lines":[23],"breakpoints":[{"line":23}],"sourceModified":false},"type":"request","seq":3}
[5056] -> (C)  {
    "type": "request",
    "seq": 3,
    "arguments": {
        "lines": [
            23
        ],
        "source": {
            "name": "fac.cbc",
            "path": "p:\\dev\\CheezLang\\data\\fac.cbc"
        },
        "breakpoints": [
            {
                "line": 23
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 3,
    "request_seq": 3,
    "command": "setBreakpoints"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"Scope.cs","path":"p:\\dev\\CheezLang\\CompilerLibrary\\Scope.cs"},"lines":[69,788],"breakpoints":[{"line":69},{"line":788}],"sourceModified":false},"type":"request","seq":4}
[5056] -> (C)  {
    "type": "request",
    "seq": 4,
    "arguments": {
        "lines": [
            69,
            788
        ],
        "source": {
            "name": "Scope.cs",
            "path": "p:\\dev\\CheezLang\\CompilerLibrary\\Scope.cs"
        },
        "breakpoints": [
            {
                "line": 69
            },
            {
                "line": 788
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 4,
    "request_seq": 4,
    "command": "setBreakpoints"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"setBreakpoints","arguments":{"source":{"name":"TypeInference.cs","path":"p:\\dev\\CheezLang\\CompilerLibrary\\SemanticAnalysis\\TypeInference.cs"},"lines":[5873],"breakpoints":[{"line":5873}],"sourceModified":false},"type":"request","seq":5}
[5056] -> (C)  {
    "type": "request",
    "seq": 5,
    "arguments": {
        "lines": [
            5873
        ],
        "source": {
            "name": "TypeInference.cs",
            "path": "p:\\dev\\CheezLang\\CompilerLibrary\\SemanticAnalysis\\TypeInference.cs"
        },
        "breakpoints": [
            {
                "line": 5873
            }
        ],
        "sourceModified": false
    },
    "command": "setBreakpoints"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 5,
    "request_seq": 5,
    "command": "setBreakpoints"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"launch","arguments":{"name":"Cheez Debugger","type":"cheez","request":"launch","program":"p:\\dev\\CheezLang\\data\\basic_cheez.che","args":[],"internalConsoleOptions":"openOnSessionStart","__sessionId":"b3164c9f-1040-46a7-be61-0bbfd77433e6"},"type":"request","seq":6}
[5056] -> (C)  {
    "type": "request",
    "seq": 6,
    "arguments": {
        "type": "cheez",
        "internalConsoleOptions": "openOnSessionStart",
        "program": "p:\\dev\\CheezLang\\data\\basic_cheez.che",
        "name": "Cheez Debugger",
        "request": "launch",
        "args": [
        ],
        "__sessionId": "b3164c9f-1040-46a7-be61-0bbfd77433e6"
    },
    "command": "launch"

}
[5056]  ast:
AstConstDecl #1 (1:1->9)
  AstIdentifier #2 'Main' (1:1->1)
  AstFunction #3 (1:9->9)
    params:
    body:
      AstBlock #4 (1:12->9)
        AstCall #6 (3:5->3)
          AstIdentifier #5 'print' (3:5->3)
          AstNumberLiteral #7 123 (3:11->3)
        AstCall #9 (5:5->5)
          AstIdentifier #8 'foo' (5:5->5)
        AstCall #11 (7:5->7)
          AstIdentifier #10 'bar' (7:5->7)

[5056]  ast:
AstConstDecl #12 (11:1->14)
  AstIdentifier #13 'foo' (11:1->11)
  AstFunction #14 (11:8->14)
    params:
      AstParameter #15 (11:9->11)
        AstIdentifier #16 'a' (11:9->11)
        AstIdentifier #17 'int' (11:12->11)
    body:
      AstBlock #18 (11:17->14)
        AstCall #20 (12:5->12)
          AstIdentifier #19 'print' (12:5->12)
          AstNumberLiteral #21 456 (12:11->12)
        AstCall #23 (13:5->13)
          AstIdentifier #22 'print' (13:5->13)
          AstIdentifier #24 'a' (13:11->13)

[5056]  ast:
AstConstDecl #25 (16:1->18)
  AstIdentifier #26 'bar' (16:1->16)
  AstFunction #27 (16:8->18)
    params:
    body:
      AstBlock #28 (16:11->18)
        AstCall #30 (17:5->17)
          AstIdentifier #29 'print' (17:5->17)
          AstNumberLiteral #31 789 (17:11->17)
          AstNumberLiteral #32 654 (17:16->17)

[5056]  compile and run 3 functions
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 6,
    "request_seq": 6,
    "command": "launch"

}
[9420] <- (E)  {
    "type": "event",
    "seq": 7,
    "event": "output",
    "body": {
        "output": "3     0    0     0       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[5056]  ===================================================
[9420] <- (E)  {
    "type": "event",
    "seq": 8,
    "event": "output",
    "body": {
        "output": "3     0    0     1       Const 123           [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 9,
    "event": "output",
    "body": {
        "output": "3     0    1     3       Print               [  | 123 ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 10,
    "event": "output",
    "body": {
        "output": "123\n",
        "category": "console"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 11,
    "event": "output",
    "body": {
        "output": "5     0    0     4       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 12,
    "event": "output",
    "body": {
        "output": "5     0    0     5       Call foo 0          [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 13,
    "event": "output",
    "body": {
        "output": "12    1    0     0       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 14,
    "event": "output",
    "body": {
        "output": "12    1    0     1       Const 456           [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 15,
    "event": "output",
    "body": {
        "output": "12    1    1     3       Print               [  | 456 ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 16,
    "event": "output",
    "body": {
        "output": "456\n",
        "category": "console"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 17,
    "event": "output",
    "body": {
        "output": "13    1    0     4       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 18,
    "event": "output",
    "body": {
        "output": "13    1    0     5       LoadLocal -1        [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 19,
    "event": "output",
    "body": {
        "output": "13    1    1     7       Print               [  | 0 ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 20,
    "event": "output",
    "body": {
        "output": "0\n",
        "category": "console"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 21,
    "event": "output",
    "body": {
        "output": "14    1    0     8       ReturnVoid          [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 22,
    "event": "output",
    "body": {
        "output": "7     0    0     9       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 23,
    "event": "output",
    "body": {
        "output": "7     0    0     10      Call bar 0          [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 24,
    "event": "stopped",
    "body": {
        "threadId": 0,
        "reason": "breakpoint"
    }

}
[5056] -> (C)  {"command":"stackTrace","arguments":{"threadId":0,"levels":1,"startFrame":0},"type":"request","seq":7}
[5056] -> (C)  {
    "type": "request",
    "seq": 7,
    "arguments": {
        "startFrame": 0,
        "threadId": 0,
        "levels": 1
    },
    "command": "stackTrace"

}
[5056]  stackframe: line: 17, func: 'bar', path: 'p:\\dev\\CheezLang\\data\\basic_cheez.che'
[5056]  stackframe: line: 7, func: 'Main', path: 'p:\\dev\\CheezLang\\data\\basic_cheez.che'
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "stackFrames": [
            {
                "column": 5,
                "id": 1,
                "name": "bar",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 17
            },
            {
                "column": 5,
                "id": 0,
                "name": "Main",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 7
            }
        ]
    },
    "seq": 25,
    "request_seq": 7,
    "command": "stackTrace"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"threads","type":"request","seq":8}
[5056] -> (C)  {
    "type": "request",
    "seq": 8,
    "command": "threads"

}
[5056]  request threads
[5056]  [DapThread(id = 0, name = Main Thread)]
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "threads": [
            {
                "id": 0,
                "name": "Main Thread"
            }
        ]
    },
    "seq": 26,
    "request_seq": 8,
    "command": "threads"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"stackTrace","arguments":{"threadId":0,"startFrame":0,"levels":20},"type":"request","seq":9}
[5056] -> (C)  {
    "type": "request",
    "seq": 9,
    "arguments": {
        "startFrame": 0,
        "threadId": 0,
        "levels": 20
    },
    "command": "stackTrace"

}
[5056]  stackframe: line: 17, func: 'bar', path: 'p:\\dev\\CheezLang\\data\\basic_cheez.che'
[5056]  stackframe: line: 7, func: 'Main', path: 'p:\\dev\\CheezLang\\data\\basic_cheez.che'
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "stackFrames": [
            {
                "column": 5,
                "id": 1,
                "name": "bar",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 17
            },
            {
                "column": 5,
                "id": 0,
                "name": "Main",
                "source": {
                    "name": "fac.cbc",
                    "path": "p:\\dev\\CheezLang\\data\\basic_cheez.che"
                },
                "line": 7
            }
        ]
    },
    "seq": 27,
    "request_seq": 9,
    "command": "stackTrace"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"scopes","arguments":{"frameId":1},"type":"request","seq":10}
[5056] -> (C)  {
    "type": "request",
    "seq": 10,
    "arguments": {
        "frameId": 1
    },
    "command": "scopes"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "scopes": [
            {
                "name": "Locals",
                "variablesReference": 1,
                "presentationHint": "locals"
            },
            {
                "name": "Arguments",
                "variablesReference": 2,
                "presentationHint": "arguments"
            },
            {
                "name": "Registers",
                "variablesReference": 3,
                "presentationHint": "registers"
            }
        ]
    },
    "seq": 28,
    "request_seq": 10,
    "command": "scopes"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"variables","arguments":{"variablesReference":1},"type":"request","seq":11}
[5056] -> (C)  {
    "type": "request",
    "seq": 11,
    "arguments": {
        "variablesReference": 1
    },
    "command": "variables"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
        "variables": [
        ]
    },
    "seq": 29,
    "request_seq": 11,
    "command": "variables"

}
[5056]  ===================================================
[5056] -> (C)  {"command":"continue","arguments":{"threadId":0},"type":"request","seq":12}
[5056] -> (C)  {
    "type": "request",
    "seq": 12,
    "arguments": {
        "threadId": 0
    },
    "command": "continue"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 30,
    "request_seq": 12,
    "command": "continue"

}
[9420] <- (E)  {
    "type": "event",
    "seq": 31,
    "event": "output",
    "body": {
        "output": "17    1    0     0       Noop                [  |  ]\n",
        "category": "stdout"
    }

}
[5056]  ===================================================
[9420] <- (E)  {
    "type": "event",
    "seq": 32,
    "event": "output",
    "body": {
        "output": "17    1    0     1       Const 789           [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 33,
    "event": "output",
    "body": {
        "output": "17    1    1     3       Print               [  | 789 ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 34,
    "event": "output",
    "body": {
        "output": "789\n",
        "category": "console"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 35,
    "event": "output",
    "body": {
        "output": "17    1    0     4       Const 654           [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 36,
    "event": "output",
    "body": {
        "output": "17    1    1     6       Print               [  | 654 ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 37,
    "event": "output",
    "body": {
        "output": "654\n",
        "category": "console"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 38,
    "event": "output",
    "body": {
        "output": "18    1    0     7       ReturnVoid          [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 39,
    "event": "output",
    "body": {
        "output": "9     0    0     14      ReturnVoid          [  |  ]\n",
        "category": "stdout"
    }

}
[9420] <- (E)  {
    "type": "event",
    "seq": 40,
    "event": "terminated",
    "body": {
    }

}
[5056] -> (C)  {"command":"disconnect","arguments":{"restart":false},"type":"request","seq":13}
[5056] -> (C)  {
    "type": "request",
    "seq": 13,
    "arguments": {
        "restart": false
    },
    "command": "disconnect"

}
[5056] <- (R)  {
    "type": "response",
    "success": true,
    "body": {
    },
    "seq": 41,
    "request_seq": 13,
    "command": "disconnect"

}
[5056]  ===================================================
