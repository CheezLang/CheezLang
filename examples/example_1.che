#load("io.che")

fn Main()
{
    TestIntArray()
    Println("")

    TestStringArray()
}

fn TestIntArray() {
    let a: Array(int) = ArrayNew()

    ArrayPrint(a)

    ArrayAdd(&a, 123)
    ArrayPrint(a)

    ArrayAdd(&a, 456)
    ArrayPrint(a)

    ArrayAdd(&a, 798)
    ArrayPrint(a)
}

fn TestStringArray() {
    let a: Array(string) = ArrayNew()

    ArrayPrint(a)

    ArrayAdd(&a, "hi")
    ArrayPrint(a)

    ArrayAdd(&a, "du")
    ArrayPrint(a)
    
    ArrayAdd(&a, "lappen")
    ArrayPrint(a)
}

fn PrintlnValue(v: $T) {
    PrintValue(v)
    Println("")
}

fn PrintValue(v: $T) {
    if @typeseq(bool, T) {
        if v {
            PrintString("true")
        } else {
            PrintString("false")
        }
    } else if @typeseq(T, i8) or @typeseq(T, i16) or @typeseq(T, i32) or @typeseq(T, i64) {
        PrintInt(v)
    } else if @typeseq(string, T) {
        PrintString(v)
    } else {
        @error("Can't print value of unknown type")
    }
}

struct Array(ElementType: type) {
    data: ElementType[]
    length: int
    capacity: int
}

fn ArrayNew() -> Array($T) {
    let array: Array(T)
    using array
    length = 0
    capacity = 10
    data = AllocateArray(capacity)
    return array
}

fn ArrayDelete(array: Array($T)) {
    using array
    FreeArray(data)
}

fn ArrayAdd(array: Array($T)^, val: T) {
    using *array
    if capacity <= length {
        capacity = capacity * 2
        data = ReallocArray(data, capacity)
    }

    data[length] = val
    length = length + 1
}

fn ArrayPrint(arr: Array($T)) {
    using arr

    PrintString("(")
    PrintInt(length)
    PrintString("/")
    PrintInt(capacity)
    PrintString(") [")

    let first = true
    let i = 0
    while i < capacity {
        if i > 0 {
            PrintString(", ")
        }

        if i < length {
            PrintValue(data[i])
        } else {
            PrintString("_")
        }

        i = i + 1
    }
    
    Println("]")
}
