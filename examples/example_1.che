// #load("io.che")

fn Main()
{
    let a: Array(int)
    a.Init()

    a.Print()

    let i = 0
    while i < 0 {
        a.Add(i)
        a.Print()
        i = i + 2
    }

    a.Delete()
}

struct Array(ElementType: type) {
    data: ElementType[]
    length: int
    capacity: int
}

// impl(T: type) Array(T) {
// }

impl Array($T) {

    ref fn Init() {
        length = 0
        capacity = 10
        // data = AllocateArray(capacity)
    }

    ref fn Delete() {
        // FreeArray(data)
    }

    ref fn Add(val: T) {
        if capacity <= length {
            capacity = capacity * 2
            // data = ReallocArray(data, capacity)
        }

        data[length] = val
        length = length + 1
    }

    ref fn Print() {
    //     PrintString("(")
    //     PrintInt(length)
    //     PrintString("/")
    //     PrintInt(capacity)
    //     PrintString(") [")

    //     let first = true
    //     let i = 0
    //     while i < capacity {
    //         if i > 0 {
    //             PrintString(", ")
    //         }

    //         if i < length {
    //             PrintValue(data[i])
    //         } else {
    //             PrintString("_")
    //         }

    //         i = i + 1
    //     }
        
    //     Println("]")
    }
}
