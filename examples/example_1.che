// #load("compiler/main.che")

#load("io.che")
#load("glfw3.che")
#load("opengl.che")

struct Color {
    r: float
    g: float
    b: float
}

struct Vec2 {
    x: float
    y: float
}

struct Quad {
    pos: Vec2
    size: Vec2
    col: Color
}

impl Quad {
    ref fn Draw() {
        glBegin(GL_TRIANGLES)

        {
            // v1
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y)

            // v2
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y)

            // v3
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y + size.y)
        }

        {
            // v1
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y)

            // v3
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y + size.y)

            // v4
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y + size.y)
        }

        glEnd()
    }
}

fn Main()
{
    // let filename = "D:\Programming\CheezLang\examples\example_1.che"
    // RunCompiler(filename)

    Println("Glfw test")

    if !glfwInit() {
        Println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    let window = glfwCreateWindow(640, 480, "Hello World", null, null)
    if window == null {
        Println("Failed to create window")
        return
    }

    glfwMakeContextCurrent(window)

    glClearColor(0, 0, 0, 1)

    let q = new Quad {
        pos = new Vec2 { -0.5, -0.5 }
        size = new Vec2 { 1, 1 }
        col = new Color { 1, 0, 1 }
    }

    while !glfwWindowShouldClose(window) {
        glClear(GL_COLOR_BUFFER_BIT)

        //
        q.Draw()

        // present image
        glfwSwapBuffers(window)
        //
        glfwPollEvents()
    }

}
