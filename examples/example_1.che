#load("io.che")
#load("array.che")

let g_a = 5

fn uiae() -> @typeof(g_a + 3) {
    return g_a + 3
}

fn Main()
{
    let s = "Hi".ToString()
    defer s.Dispose()

    Printlnf("str: {S}", &s)

    s.AppendString(" du")
    Printlnf("str: {S}", &s)

    s.AppendString(" lappen")
    Printlnf("str: {S}", &s)

    s.AppendString("!")
    Printlnf("str: {S}", &s)

    s.AppendString(" Du").AppendString(" ").AppendString("stinkts").AppendString(", lol")
    Printlnf("str: {S}", &s)

    Println("")

    Printlnf("Size of int:           {i32}", 5.SizeInBytes())
    Printlnf("Size of string:        {i32}", "".SizeInBytes())
    Printlnf("Size of boolean:       {i32}", true.SizeInBytes())
    Printlnf("Size of struct String: {i32}", s.SizeInBytes())
}

fn PrintArray(arr: Array($T)^) {
    use *arr

    PrintString("(")
    PrintInt(length)
    PrintString("/")
    PrintInt(capacity)
    PrintString(") [")

    let first = true
    let i: uint = 0
    while i < capacity {
        if i > 0 {
            PrintString(", ")
        }

        if i < length {
            PrintValue(data[i])
        } else {
            PrintString("_")
        }

        i = i + 1
    }
    
    Println("]")
}
