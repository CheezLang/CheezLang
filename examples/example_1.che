fn malloc(x: i64): void*;
fn realloc(d: void*, x: i64): void*;
fn printf(str: string);

fn _flush_cout();

fn Main() {
    let arr: IntArray
    arr.Init()
    arr.Print()

    let i: int = 0
    while i <= 25 {
        arr.Add(i)
        arr.Print()
        i = i + 1
    }

    _flush_cout()
}

struct IntArray {
    data: int*
    capacity: uint
    count: uint
}

impl IntArray {
    ref fn Init() {
        count = 0
        capacity = 10
        data = <int*>malloc(<i64>capacity * 4)
    }

    ref fn Add(val: int) {
        if capacity <= count {
            self.Grow(2)
        }

        data[count] = val
        count = count + 1
    }

    ref fn Grow(fac: uint) {
        capacity = capacity * fac
        data = <int*>realloc(<void*>data, <i64>capacity * 4)
    }

    ref fn Get(id: uint): int {
        if id >= count {
            return 0
        }

        return data[id]
    }

    ref fn Print() {
        print "(", count, "/", capacity, ")["
        let i: uint = 0
        while i < capacity {
            if i > 0 {
                print ", "
            }
            
            if i < count {
                print self.Get(i)
            }

            i = i + 1
        }

        println "]"
    }
}
