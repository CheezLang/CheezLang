#load("opengl_types")

//
fn glAccum(op: GLenum, value: GLfloat) -> void #stdcall;
fn glAlphaFunc(func: GLenum, reff: GLclampf) -> void #stdcall;
fn glAreTexturesResident(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean #stdcall;
fn glArrayElement(i: GLint) -> void #stdcall;
fn glBegin(mode: GLenum) -> void #stdcall;
fn glBindTexture(target: GLenum, texture: GLuint) -> void #stdcall;
fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> void #stdcall;
fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) -> void #stdcall;
fn glCallList(list: GLuint) -> void #stdcall;
fn glCallLists(n: GLsizei, type: GLenum, lists: *GLvoid) -> void #stdcall;
fn glClear(mask: GLbitfield) -> void #stdcall;
fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #stdcall;
fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void #stdcall;
fn glClearDepth(depth: GLclampd) -> void #stdcall;
fn glClearIndex(c: GLfloat) -> void #stdcall;
fn glClearStencil(s: GLint) -> void #stdcall;
fn glClipPlane(plane: GLenum, equation: *GLdouble) -> void #stdcall;
fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> void #stdcall;
fn glColor3bv(v: *GLbyte) -> void #stdcall;
fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> void #stdcall;
fn glColor3dv(v: *GLdouble) -> void #stdcall;
fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> void #stdcall;
fn glColor3fv(v: *GLfloat) -> void #stdcall;
fn glColor3i(red: GLint, green: GLint, blue: GLint) -> void #stdcall;
fn glColor3iv(v: *GLint) -> void #stdcall;
fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) -> void #stdcall;
fn glColor3sv(v: *GLshort) -> void #stdcall;
fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> void #stdcall;
fn glColor3ubv(v: *GLubyte) -> void #stdcall;
fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> void #stdcall;
fn glColor3uiv(v: *GLuint) -> void #stdcall;
fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) -> void #stdcall;
fn glColor3usv(v: *GLushort) -> void #stdcall;
fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void #stdcall;
fn glColor4bv(v: *GLbyte) -> void #stdcall;
fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void #stdcall;
fn glColor4dv(v: *GLdouble) -> void #stdcall;
fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #stdcall;
fn glColor4fv(v: *GLfloat) -> void #stdcall;
fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void #stdcall;
fn glColor4iv(v: *GLint) -> void #stdcall;
fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void #stdcall;
fn glColor4sv(v: *GLshort) -> void #stdcall;
fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void #stdcall;
fn glColor4ubv(v: *GLubyte) -> void #stdcall;
fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void #stdcall;
fn glColor4uiv(v: *GLuint) -> void #stdcall;
fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void #stdcall;
fn glColor4usv(v: *GLushort) -> void #stdcall;
fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void #stdcall;
fn glColorMaterial(face: GLenum, mode: GLenum) -> void #stdcall;
fn glColorPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type: GLenum) -> void #stdcall;
fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void #stdcall;
fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #stdcall;
fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #stdcall;
fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
fn glCullFace(mode: GLenum) -> void #stdcall;
fn glDeleteLists(list: GLuint, range: GLsizei) -> void #stdcall;
fn glDeleteTextures(n: GLsizei, textures: *GLuint) -> void #stdcall;
fn glDepthFunc(func: GLenum) -> void #stdcall;
fn glDepthMask(flag: GLboolean) -> void #stdcall;
fn glDepthRange(zNear: GLclampd, zFar: GLclampd) -> void #stdcall;
fn glDisable(cap: GLenum) -> void #stdcall;
fn glDisableClientState(array: GLenum) -> void #stdcall;
fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> void #stdcall;
fn glDrawBuffer(mode: GLenum) -> void #stdcall;
fn glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: *GLvoid) -> void #stdcall;
fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glEdgeFlag(flag: GLboolean) -> void #stdcall;
fn glEdgeFlagPointer(stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glEdgeFlagv(flag: *GLboolean) -> void #stdcall;
fn glEnable(cap: GLenum) -> void #stdcall;
fn glEnableClientState(array: GLenum) -> void #stdcall;
fn glEnd() -> void #stdcall;
fn glEndList() -> void #stdcall;
fn glEvalCoord1d(u: GLdouble) -> void #stdcall;
fn glEvalCoord1dv(u: *GLdouble) -> void #stdcall;
fn glEvalCoord1f(u: GLfloat) -> void #stdcall;
fn glEvalCoord1fv(u: *GLfloat) -> void #stdcall;
fn glEvalCoord2d(u: GLdouble, v: GLdouble) -> void #stdcall;
fn glEvalCoord2dv(u: *GLdouble) -> void #stdcall;
fn glEvalCoord2f(u: GLfloat, v: GLfloat) -> void #stdcall;
fn glEvalCoord2fv(u: *GLfloat) -> void #stdcall;
fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> void #stdcall;
fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void #stdcall;
fn glEvalPoint1(i: GLint) -> void #stdcall;
fn glEvalPoint2(i: GLint, j: GLint) -> void #stdcall;
fn glFeedbackBuffer(size: GLsizei, type: GLenum, buffer: *GLfloat) -> void #stdcall;
fn glFinish() -> void #stdcall;
fn glFlush() -> void #stdcall;
fn glFogf(pname: GLenum, param: GLfloat) -> void #stdcall;
fn glFogfv(pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glFogi(pname: GLenum, param: GLint) -> void #stdcall;
fn glFogiv(pname: GLenum, params: *GLint) -> void #stdcall;
fn glFrontFace(mode: GLenum) -> void #stdcall;
fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #stdcall;
fn glGenLists(range: GLsizei) -> GLuint #stdcall;
fn glGenTextures(n: GLsizei, textures: *GLuint) -> void #stdcall;
fn glGetBooleanv(pname: GLenum, params: *GLboolean) -> void #stdcall;
fn glGetClipPlane(plane: GLenum, equation: *GLdouble) -> void #stdcall;
fn glGetDoublev(pname: GLenum, params: *GLdouble) -> void #stdcall;
fn glGetError() -> GLenum #stdcall;
fn glGetFloatv(pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetIntegerv(pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetLightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetLightiv(light: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetMapdv(target: GLenum, query: GLenum, v: *GLdouble) -> void #stdcall;
fn glGetMapfv(target: GLenum, query: GLenum, v: *GLfloat) -> void #stdcall;
fn glGetMapiv(target: GLenum, query: GLenum, v: *GLint) -> void #stdcall;
fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetPixelMapfv(map: GLenum, values: *GLfloat) -> void #stdcall;
fn glGetPixelMapuiv(map: GLenum, values: *GLuint) -> void #stdcall;
fn glGetPixelMapusv(map: GLenum, values: *GLushort) -> void #stdcall;
fn glGetPointerv(pname: GLenum, params: **GLvoid) -> void #stdcall;
fn glGetPolygonStipple(mask: *GLubyte) -> void #stdcall;
fn glGetString(name: GLenum) -> *GLubyte #stdcall;
fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> void #stdcall;
fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> void #stdcall;
fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glHint(target: GLenum, mode: GLenum) -> void #stdcall;
fn glIndexMask(mask: GLuint) -> void #stdcall;
fn glIndexPointer(type: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glIndexd(c: GLdouble) -> void #stdcall;
fn glIndexdv(c: *GLdouble) -> void #stdcall;
fn glIndexf(c: GLfloat) -> void #stdcall;
fn glIndexfv(c: *GLfloat) -> void #stdcall;
fn glIndexi(c: GLint) -> void #stdcall;
fn glIndexiv(c: *GLint) -> void #stdcall;
fn glIndexs(c: GLshort) -> void #stdcall;
fn glIndexsv(c: *GLshort) -> void #stdcall;
fn glIndexub(c: GLubyte) -> void #stdcall;
fn glIndexubv(c: *GLubyte) -> void #stdcall;
fn glInitNames() -> void #stdcall;
fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glIsEnabled(cap: GLenum) -> GLboolean #stdcall;
fn glIsList(list: GLuint) -> GLboolean #stdcall;
fn glIsTexture(texture: GLuint) -> GLboolean #stdcall;
fn glLightModelf(pname: GLenum, param: GLfloat) -> void #stdcall;
fn glLightModelfv(pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glLightModeli(pname: GLenum, param: GLint) -> void #stdcall;
fn glLightModeliv(pname: GLenum, params: *GLint) -> void #stdcall;
fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
fn glLightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glLighti(light: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
fn glLightiv(light: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glLineStipple(factor: GLint, pattern: GLushort) -> void #stdcall;
fn glLineWidth(width: GLfloat) -> void #stdcall;
fn glListBase(base: GLuint) -> void #stdcall;
fn glLoadIdentity() -> void #stdcall;
fn glLoadMatrixd(m: *GLdouble) -> void #stdcall;
fn glLoadMatrixf(m: *GLfloat) -> void #stdcall;
fn glLoadName(name: GLuint) -> void #stdcall;
fn glLogicOp(opcode: GLenum) -> void #stdcall;
fn glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> void #stdcall;
fn glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> void #stdcall;
fn glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> void #stdcall;
fn glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> void #stdcall;
fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> void #stdcall;
fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> void #stdcall;
fn glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> void #stdcall;
fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> void #stdcall;
fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
fn glMaterialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glMateriali(face: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
fn glMaterialiv(face: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glMatrixMode(mode: GLenum) -> void #stdcall;
fn glMultMatrixd(m: *GLdouble) -> void #stdcall;
fn glMultMatrixf(m: *GLfloat) -> void #stdcall;
fn glNewList(list: GLuint, mode: GLenum) -> void #stdcall;
fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void #stdcall;
fn glNormal3bv(v: *GLbyte) -> void #stdcall;
fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void #stdcall;
fn glNormal3dv(v: *GLdouble) -> void #stdcall;
fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void #stdcall;
fn glNormal3fv(v: *GLfloat) -> void #stdcall;
fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) -> void #stdcall;
fn glNormal3iv(v: *GLint) -> void #stdcall;
fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> void #stdcall;
fn glNormal3sv(v: *GLshort) -> void #stdcall;
fn glNormalPointer(type: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #stdcall;
fn glPassThrough(token: GLfloat) -> void #stdcall;
fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> void #stdcall;
fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: *GLuint) -> void #stdcall;
fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: *GLushort) -> void #stdcall;
fn glPixelStoref(pname: GLenum, param: GLfloat) -> void #stdcall;
fn glPixelStorei(pname: GLenum, param: GLint) -> void #stdcall;
fn glPixelTransferf(pname: GLenum, param: GLfloat) -> void #stdcall;
fn glPixelTransferi(pname: GLenum, param: GLint) -> void #stdcall;
fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> void #stdcall;
fn glPointSize(size: GLfloat) -> void #stdcall;
fn glPolygonMode(face: GLenum, mode: GLenum) -> void #stdcall;
fn glPolygonOffset(factor: GLfloat, units: GLfloat) -> void #stdcall;
fn glPolygonStipple(mask: *GLubyte) -> void #stdcall;
fn glPopAttrib() -> void #stdcall;
fn glPopClientAttrib() -> void #stdcall;
fn glPopMatrix() -> void #stdcall;
fn glPopName() -> void #stdcall;
fn glPrioritizeTextures(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> void #stdcall;
fn glPushAttrib(mask: GLbitfield) -> void #stdcall;
fn glPushClientAttrib(mask: GLbitfield) -> void #stdcall;
fn glPushMatrix() -> void #stdcall;
fn glPushName(name: GLuint) -> void #stdcall;
fn glRasterPos2d(x: GLdouble, y: GLdouble) -> void #stdcall;
fn glRasterPos2dv(v: *GLdouble) -> void #stdcall;
fn glRasterPos2f(x: GLfloat, y: GLfloat) -> void #stdcall;
fn glRasterPos2fv(v: *GLfloat) -> void #stdcall;
fn glRasterPos2i(x: GLint, y: GLint) -> void #stdcall;
fn glRasterPos2iv(v: *GLint) -> void #stdcall;
fn glRasterPos2s(x: GLshort, y: GLshort) -> void #stdcall;
fn glRasterPos2sv(v: *GLshort) -> void #stdcall;
fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
fn glRasterPos3dv(v: *GLdouble) -> void #stdcall;
fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
fn glRasterPos3fv(v: *GLfloat) -> void #stdcall;
fn glRasterPos3i(x: GLint, y: GLint, z: GLint) -> void #stdcall;
fn glRasterPos3iv(v: *GLint) -> void #stdcall;
fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> void #stdcall;
fn glRasterPos3sv(v: *GLshort) -> void #stdcall;
fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #stdcall;
fn glRasterPos4dv(v: *GLdouble) -> void #stdcall;
fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #stdcall;
fn glRasterPos4fv(v: *GLfloat) -> void #stdcall;
fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void #stdcall;
fn glRasterPos4iv(v: *GLint) -> void #stdcall;
fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void #stdcall;
fn glRasterPos4sv(v: *GLshort) -> void #stdcall;
fn glReadBuffer(mode: GLenum) -> void #stdcall;
fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void #stdcall;
fn glRectdv(v1: *GLdouble, v2: *GLdouble) -> void #stdcall;
fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void #stdcall;
fn glRectfv(v1: *GLfloat, v2: *GLfloat) -> void #stdcall;
fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void #stdcall;
fn glRectiv(v1: *GLint, v2: *GLint) -> void #stdcall;
fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void #stdcall;
fn glRectsv(v1: *GLshort, v2: *GLshort) -> void #stdcall;
fn glRenderMode(mode: GLenum) -> GLint #stdcall;
fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
fn glSelectBuffer(size: GLsizei, buffer: *GLuint) -> void #stdcall;
fn glShadeModel(mode: GLenum) -> void #stdcall;
fn glStencilFunc(func: GLenum, reff: GLint, mask: GLuint) -> void #stdcall;
fn glStencilMask(mask: GLuint) -> void #stdcall;
fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> void #stdcall;
fn glTexCoord1d(s: GLdouble) -> void #stdcall;
fn glTexCoord1dv(v: *GLdouble) -> void #stdcall;
fn glTexCoord1f(s: GLfloat) -> void #stdcall;
fn glTexCoord1fv(v: *GLfloat) -> void #stdcall;
fn glTexCoord1i(s: GLint) -> void #stdcall;
fn glTexCoord1iv(v: *GLint) -> void #stdcall;
fn glTexCoord1s(s: GLshort) -> void #stdcall;
fn glTexCoord1sv(v: *GLshort) -> void #stdcall;
fn glTexCoord2d(s: GLdouble, t: GLdouble) -> void #stdcall;
fn glTexCoord2dv(v: *GLdouble) -> void #stdcall;
fn glTexCoord2f(s: GLfloat, t: GLfloat) -> void #stdcall;
fn glTexCoord2fv(v: *GLfloat) -> void #stdcall;
fn glTexCoord2i(s: GLint, t: GLint) -> void #stdcall;
fn glTexCoord2iv(v: *GLint) -> void #stdcall;
fn glTexCoord2s(s: GLshort, t: GLshort) -> void #stdcall;
fn glTexCoord2sv(v: *GLshort) -> void #stdcall;
fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> void #stdcall;
fn glTexCoord3dv(v: *GLdouble) -> void #stdcall;
fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> void #stdcall;
fn glTexCoord3fv(v: *GLfloat) -> void #stdcall;
fn glTexCoord3i(s: GLint, t: GLint, r: GLint) -> void #stdcall;
fn glTexCoord3iv(v: *GLint) -> void #stdcall;
fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> void #stdcall;
fn glTexCoord3sv(v: *GLshort) -> void #stdcall;
fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void #stdcall;
fn glTexCoord4dv(v: *GLdouble) -> void #stdcall;
fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void #stdcall;
fn glTexCoord4fv(v: *GLfloat) -> void #stdcall;
fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> void #stdcall;
fn glTexCoord4iv(v: *GLint) -> void #stdcall;
fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void #stdcall;
fn glTexCoord4sv(v: *GLshort) -> void #stdcall;
fn glTexCoordPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
fn glTexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
fn glTexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> void #stdcall;
fn glTexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> void #stdcall;
fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
fn glTexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
fn glTexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
fn glTexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> void #stdcall;
fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
fn glTexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> void #stdcall;
fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *GLvoid) -> void #stdcall;
fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
fn glVertex2d(x: GLdouble, y: GLdouble) -> void #stdcall;
fn glVertex2dv(v: *GLdouble) -> void #stdcall;
fn glVertex2f(x: GLfloat, y: GLfloat) -> void #stdcall;
fn glVertex2fv(v: *GLfloat) -> void #stdcall;
fn glVertex2i(x: GLint, y: GLint) -> void #stdcall;
fn glVertex2iv(v: *GLint) -> void #stdcall;
fn glVertex2s(x: GLshort, y: GLshort) -> void #stdcall;
fn glVertex2sv(v: *GLshort) -> void #stdcall;
fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
fn glVertex3dv(v: *GLdouble) -> void #stdcall;
fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
fn glVertex3fv(v: *GLfloat) -> void #stdcall;
fn glVertex3i(x: GLint, y: GLint, z: GLint) -> void #stdcall;
fn glVertex3iv(v: *GLint) -> void #stdcall;
fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) -> void #stdcall;
fn glVertex3sv(v: *GLshort) -> void #stdcall;
fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #stdcall;
fn glVertex4dv(v: *GLdouble) -> void #stdcall;
fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #stdcall;
fn glVertex4fv(v: *GLfloat) -> void #stdcall;
fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void #stdcall;
fn glVertex4iv(v: *GLint) -> void #stdcall;
fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void #stdcall;
fn glVertex4sv(v: *GLshort) -> void #stdcall;
fn glVertexPointer(size: GLint, type: GLenum, stride: GLsizei, pointer: *GLvoid) -> void #stdcall;
fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
