struct FILE #DisableCodeGen {
    _Placeholder: void*
}

fn fopen_s(file: FILE**, name: string, mode: string): i32;
fn fclose(file: FILE*): i32;
fn fseek(file: FILE*, offset: i32, origin: i32): i32;
fn ftell(file: FILE*): i32;
//fn fread(buff: u8*, eSize: u64, eCount: u64, file: FILE*): u64;
fn fread(buff: u8[], eSize: u64, eCount: u64, file: FILE*): u64;

// memory stuff
fn malloc(size: uint): i8*;
fn free(mem: u8*);
fn memset(ptr: void*, val: i32, count: u64): void*;

struct String {
    length: uint
    data: u8[]
}

impl String { 
    ref fn Print() {
        println data
    }
}

fn LoadFile(filename: string, content: String*): bool {
    using *content

    let SeekCur: i32 = 1
    let SeekEnd: i32 = 2
    let SeekSet: i32 = 0

    // open file
    let file: FILE*
    let err = fopen_s(&file, filename, "r")

    if err != 0 {
        return false
    }

    // find out file size
    fseek(file, 0, SeekEnd)
    length = <u32>ftell(file)
    fseek(file, 0, SeekSet)

    // allocate memory for file and load file
    data = cast<u8[]>(malloc(length + 1))
    fread(data, 1, cast<u64>(length), file)
    data[length] = 0

    return true
}
