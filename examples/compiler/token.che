#load("std:io/io")

struct TokenLocation {
    file            : string
    line            : int
    index           : int
    end             : int
    lineStartIndex  : int
}

struct Token {
    type: TokenType = TokenType.Unknown
    location: TokenLocation
    suffix: string
    data: TokenData = TokenData.None
}

enum TokenData {
    None
    String : string
}


impl Printable for Token {
    fn print(ref Self, str: ref String, format: string) {
        str.appendf("{} ({}:{}:{})", [type, location.file, location.line, location.index - location.lineStartIndex])
    }
}

impl Printable for TokenType {
    fn print(ref Self, str: ref String, format: string) {
        str += cast(string)match self {
            TokenType.Unknown -> "Unknown"
            TokenType.NewLine -> "NewLine"
            TokenType.EOF -> "EOF"
            TokenType.StringLiteral -> "StringLiteral"
            TokenType.CharLiteral -> "CharLiteral"
            TokenType.NumberLiteral -> "NumberLiteral"
            TokenType.Identifier -> "Identifier"
            TokenType.DollarIdentifier -> "DollarIdentifier"
            TokenType.HashIdentifier -> "HashIdentifier"
            TokenType.AtSignIdentifier -> "AtSignIdentifier"
            TokenType.Semicolon -> "Semicolon"
            TokenType.DoubleColon -> "DoubleColon"
            TokenType.Colon -> "Colon"
            TokenType.Comma -> "Comma"
            TokenType.Period -> "Period"
            TokenType.Equal -> "Equal"
            TokenType.Ampersand -> "Ampersand"
            TokenType.Bang -> "Bang"
            TokenType.Plus -> "Plus"
            TokenType.Minus -> "Minus"
            TokenType.Asterisk -> "Asterisk"
            TokenType.ForwardSlash -> "ForwardSlash"
            TokenType.Percent -> "Percent"
            TokenType.AddEq -> "AddEq"
            TokenType.SubEq -> "SubEq"
            TokenType.MulEq -> "MulEq"
            TokenType.DivEq -> "DivEq"
            TokenType.ModEq -> "ModEq"
            TokenType.Less -> "Less"
            TokenType.LessEqual -> "LessEqual"
            TokenType.Greater -> "Greater"
            TokenType.Greater -> "GreaterEqual"
            TokenType.DoubleEqual -> "DoubleEqual"
            TokenType.NotEqual -> "NotEqual"
            TokenType.Arrow -> "Arrow"
            TokenType.Less -> "LessLess"
            TokenType.OpenParen -> "OpenParen"
            TokenType.ClosingParen -> "ClosingParen"
            TokenType.OpenBrace -> "OpenBrace"
            TokenType.ClosingBrace -> "ClosingBrace"
            TokenType.OpenBracket -> "OpenBracket"
            TokenType.ClosingBracket -> "ClosingBracket"
            TokenType.KwReturn -> "KwReturn"
            TokenType.KwNew -> "KwNew"
            TokenType.KwRef -> "KwRef"
            TokenType.KwFn -> "KwFn"
            TokenType.KwStruct -> "KwStruct"
            TokenType.KwEnum -> "KwEnum"
            TokenType.KwImpl -> "KwImpl"
            TokenType.KwConstant -> "KwConstant"
            TokenType.KwLet -> "KwLet"
            TokenType.KwTypedef -> "KwTypedef"
            TokenType.KwIf -> "KwIf"
            TokenType.KwElse -> "KwElse"
            TokenType.KwFor -> "KwFor"
            TokenType.KwWhile -> "KwWhile"
            TokenType.KwAnd -> "KwAnd"
            TokenType.KwOr -> "KwOr"
            TokenType.KwTrue -> "KwTrue"
            TokenType.KwFalse -> "KwFalse"
            TokenType.KwNull -> "KwNull"
            TokenType.KwUsing -> "KwUsing"
            TokenType.KwDefer -> "KwDefer"
            TokenType.KwMatch -> "KwMatch"
            TokenType.KwBreak -> "KwBreak"
            TokenType.KwContinue -> "KwContinue"
            TokenType.KwTrait -> "KwTrait"
            TokenType.KwCast -> "KwCast"
        }
    }
}

enum TokenType {
    Unknown,

    NewLine,
    EOF,

    StringLiteral,
    CharLiteral,
    NumberLiteral,

    Identifier,
    DollarIdentifier,
    HashIdentifier,
    AtSignIdentifier,

    Semicolon,
    DoubleColon,
    Colon,
    Comma,
    Period,
    Equal,
    Ampersand,

    Bang,

    Plus,
    Minus,
    Asterisk,
    ForwardSlash,
    Percent,

    AddEq,
    SubEq,
    MulEq,
    DivEq,
    ModEq,

    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    DoubleEqual,
    NotEqual,

    Arrow,
    LessLess,

    OpenParen,
    ClosingParen,

    OpenBrace,
    ClosingBrace,

    OpenBracket,
    ClosingBracket,

    KwReturn,
    KwNew,
    KwRef,
    KwFn,
    KwStruct,
    KwEnum,
    KwImpl,
    KwConstant,
    KwLet,
    KwTypedef,
    KwIf,
    KwElse,
    KwFor,
    KwWhile,
    KwAnd,
    KwOr,
    KwTrue,
    KwFalse,
    KwNull,
    KwUsing,
    KwDefer,
    KwMatch,
    KwBreak,
    KwContinue,
    KwTrait,
    KwCast
}
