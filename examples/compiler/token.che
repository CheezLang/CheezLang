#load("../io.che")

struct TokenLocation {
    file: string
    line: int
    start: int
    end: int
}

impl TokenLocation {
    ref fn Clone() -> TokenLocation {
        return new TokenLocation {
            file,
            line,
            start,
            end
        }
    }
}

struct Token {
    type: TokenType
    location: TokenLocation

    data: TokenData
}

struct TokenData {
    identifier: char[]
    stringLiteral: String
}

impl Token {
    ref fn Print() {
        Printfn("{s}:{i32}: {s}", [ (any)location.file, location.line, type.ToString() ])
    }
}

enum TokenType {
    Unknown,

    NewLine,
    EOF,

    StringLiteral,
    CharLiteral,
    NumberLiteral,

    Identifier,
    DollarIdentifier,
    HashIdentifier,
    AtSignIdentifier,

    Semicolon,
    DoubleColon,
    Colon,
    Comma,
    Period,
    Equal,
    Ampersand,

    Bang,

    Plus,
    Minus,
    Asterisk,
    ForwardSlash,
    Percent,

    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    DoubleEqual,
    NotEqual,

    Arrow,

    OpenParen,
    ClosingParen,

    OpenBrace,
    ClosingBrace,

    OpenBracket,
    ClosingBracket,

    KwReturn,
    KwNew,
    KwRef,
    KwFn,
    KwStruct,
    KwEnum,
    KwImpl,
    KwConstant,
    KwLet,
    KwIf,
    KwElse,
    KwFor,
    KwWhile,
    KwAnd,
    KwOr,
    KwTrue,
    KwFalse,
    KwNull,
    KwUsing,
    KwDefer,
    KwMatch
}

impl TokenType {
    fn ToString() -> string {
        match self {
            TokenType.Unknown -> return "Unknown",
            TokenType.NewLine -> return "NewLine",
            TokenType.EOF -> return "EOF",
            TokenType.StringLiteral -> return "StringLiteral",
            TokenType.CharLiteral -> return "CharLiteral",
            TokenType.NumberLiteral -> return "NumberLiteral",
            TokenType.Identifier -> return "Identifier",
            TokenType.DollarIdentifier -> return "DollarIdentifier",
            TokenType.HashIdentifier -> return "HashIdentifier",
            TokenType.AtSignIdentifier -> return "AtSignIdentifier",
            TokenType.Semicolon -> return "Semicolon",
            TokenType.DoubleColon -> return "DoubleColon",
            TokenType.Colon -> return "Colon",
            TokenType.Comma -> return "Comma",
            TokenType.Period -> return "Period",
            TokenType.Equal -> return "Equal",
            TokenType.Ampersand -> return "Ampersand",
            TokenType.Bang -> return "Bang",
            TokenType.Plus -> return "Plus",
            TokenType.Minus -> return "Minus",
            TokenType.Asterisk -> return "Asterisk",
            TokenType.ForwardSlash -> return "ForwardSlash",
            TokenType.Percent -> return "Percent",
            TokenType.Less -> return "Less",
            TokenType.LessEqual -> return "LessEqual",
            TokenType.Greater -> return "Greater",
            TokenType.GreaterEqual -> return "GreaterEqual",
            TokenType.DoubleEqual -> return "DoubleEqual",
            TokenType.NotEqual -> return "NotEqual",
            TokenType.Arrow -> return "Arrow",
            TokenType.OpenParen -> return "OpenParen",
            TokenType.ClosingParen -> return "ClosingParen",
            TokenType.OpenBrace -> return "OpenBrace",
            TokenType.ClosingBrace -> return "ClosingBrace",
            TokenType.OpenBracket -> return "OpenBracket",
            TokenType.ClosingBracket -> return "ClosingBracket",
            TokenType.KwReturn -> return "KwReturn",
            TokenType.KwNew -> return "KwNew",
            TokenType.KwRef -> return "KwRef",
            TokenType.KwFn -> return "KwFn",
            TokenType.KwStruct -> return "KwStruct",
            TokenType.KwEnum -> return "KwEnum",
            TokenType.KwImpl -> return "KwImpl",
            TokenType.KwConstant -> return "KwConstant",
            TokenType.KwLet -> return "KwLet",
            TokenType.KwIf -> return "KwIf",
            TokenType.KwElse -> return "KwElse",
            TokenType.KwFor -> return "KwFor",
            TokenType.KwWhile -> return "KwWhile",
            TokenType.KwAnd -> return "KwAnd",
            TokenType.KwOr -> return "KwOr",
            TokenType.KwTrue -> return "KwTrue",
            TokenType.KwFalse -> return "KwFalse",
            TokenType.KwNull -> return "KwNull",
            TokenType.KwUsing -> return "KwUsing",
            TokenType.KwDefer -> return "KwDefer",
            TokenType.KwMatch -> return "KwMatch",
        }
        return "UNKNOWN"
    }
}
