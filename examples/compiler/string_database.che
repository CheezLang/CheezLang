#load("std:preload")
#load("std:hash_table")
#load("std:mem/arena_allocator")

impl string {
    equal :: (a: Self, b: Self) -> bool #operator("==") {
        return a.length == b.length and a.data == b.data
    }
}

StringDatabase :: struct {
    pool    : ArenaAllocator
    db      : Table[string, string]
}

sdb_compare_strings :: (a: string, b: string) -> bool {
    return streq(a, b)
}

impl Hashable for string {
    hash :: (ref Self) -> uint {
        h: u32 = 2166136261

        for i : 0..self.length {
            h += cast(u32)self[i]
            h *= 16777619
        }

        return h
    }
}

impl StringDatabase {
    create :: () -> Self {
        sdb := Self(
            pool    = ArenaAllocator.create(1024),
            db      = Table[string, string].create(sdb_compare_strings)
        )

        return sdb
    }

    intern :: (ref Self, str: string) -> string {
        return match db.get(str) {
            Some($s) -> {
                s
            }
            None -> {
                // create string in pool
                str_in_pool := alloc_n(char, cast str.length, pool)
                c_memcpy(str_in_pool.data, str.data, cast str.length)
                db[str_in_pool] = str_in_pool
                str_in_pool
            }
        }
    }
}