#test_expect_output("( [], Free: 1024 )
0
5
( [(0:8)], Free: 1016 )

0, 0, 0, 0, 0
0, 2, 4, 6, 8
( [(0:8), (8:40)], Free: 976 )

0, 0, 0, 0, 0
1, 2, 3, 4, 5
( [(0:8), (8:40), (48:40)], Free: 936 )

1, 2, 3
( [(0:8), (8:40), (48:40), (88:24)], Free: 912 )
1, 2, 3, 0, 0
( [(0:8), (8:40), (48:40), (88:40)], Free: 896 )

1, 2, 3
( [(0:8), (8:40), (48:40), (88:40), (128:24)], Free: 872 )
1, 2, 3, 0, 0
( [(0:8), (8:40), (48:40), (88:40), (128:40)], Free: 856 )
")

#load("std:mem/allocator")
#load("std:mem/stack_allocator")
#load("std:io/io")

fn Main() {
    let sa = StackAllocator::create(1024)

    sa.print_diagnostics()

    {
        let a = alloc(int, sa)
        <<a = 0
        printf("{}`n", [<<a])
        <<a = 5
        printf("{}`n", [<<a])
    }
    sa.print_diagnostics()
    printf("`n", [])

    {
        let a = alloc_raw(int, 5, sa)
        while let i = 0, i < 5, i += 1 { a[i] = 0 }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])

        while let i = 0, i < 5, i += 1 {
            a[i] = i * 2
        }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])
    }
    sa.print_diagnostics()
    printf("`n", [])

    {
        let a = alloc_n(int, 5, sa)
        while let i = 0, i < a.length, i += 1 { a[i] = 0 }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])

        while let i = 0, i < a.length, i += 1 {
            a[i] = i + 1
        }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])
    }
    sa.print_diagnostics()
    printf("`n", [])

    {
        let a = alloc_n(int, 3, sa)
        while let i = 0, i < a.length, i += 1 {
            a[i] = i + 1
        }
        printf("{}, {}, {}`n", [a[0], a[1], a[2]])
        sa.print_diagnostics()

        a = realloc_n(a, 5, sa)
        while let i = 3, i < a.length, i += 1 {
            a[i] = 0
        }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])
    }
    sa.print_diagnostics()
    printf("`n", [])

    {
        let a = alloc_raw(int, 3, sa)
        while let i = 0, i < 3, i += 1 {
            a[i] = i + 1
        }
        printf("{}, {}, {}`n", [a[0], a[1], a[2]])
        sa.print_diagnostics()

        a = realloc_raw(a, 5, sa)
        while let i = 3, i < 5, i += 1 {
            a[i] = 0
        }
        printf("{}, {}, {}, {}, {}`n", [a[0], a[1], a[2], a[3], a[4]])
    }
    sa.print_diagnostics()
    printf("`n", [])
}