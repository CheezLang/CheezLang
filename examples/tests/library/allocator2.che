#test_expect_output("( [], Free: 1024 )
0
5
( [(0:8)], Free: 1016 )

0, 0, 0, 0, 0
0, 2, 4, 6, 8
( [(0:8), (8:40)], Free: 976 )

0, 0, 0, 0, 0
1, 2, 3, 4, 5
( [(0:8), (8:40), (48:40)], Free: 936 )

1, 2, 3
( [(0:8), (8:40), (48:40), (88:24)], Free: 912 )
1, 2, 3, 0, 0
( [(0:8), (8:40), (48:40), (88:40)], Free: 896 )

1, 2, 3
( [(0:8), (8:40), (48:40), (88:40), (128:24)], Free: 872 )
1, 2, 3, 0, 0
( [(0:8), (8:40), (48:40), (88:40), (128:40)], Free: 856 )
")

#load("std:mem/allocator")
#load("std:mem/stack_allocator")
#load("std:io/io")

fn Main() {
    let sa = StackAllocator.create(1024)

    sa.print_diagnostics()

    {
        let a = alloc(int, sa)
        <<a = 0
        printf("{}`n", <<a)
        <<a = 5
        printf("{}`n", <<a)
    }
    sa.print_diagnostics()
    println("")

    {
        let a = alloc_raw(int, 5, sa)
        for i : 0..5 { a[i] = 0 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))

        for i : 0..5 { a[i] = i * 2 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))
    }
    sa.print_diagnostics()
    println("")

    {
        let a = alloc_n(int, 5, sa)
        for i : 0..a.length { a[i] = 0 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))

        for i : 0..a.length { a[i] = i + 1 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))
    }
    sa.print_diagnostics()
    println("")

    {
        let a = alloc_n(int, 3, sa)
        for i : 0..a.length { a[i] = i + 1 }
        printfln("{}, {}, {}", (a[0], a[1], a[2]))
        sa.print_diagnostics()

        a = realloc_n(a, 5, sa)
        for i : 3..a.length { a[i] = 0 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))
    }
    sa.print_diagnostics()
    println("")

    {
        let a = alloc_raw(int, 3, sa)
        for i : 0..3 { a[i] = i + 1 }
        printfln("{}, {}, {}", (a[0], a[1], a[2]))
        sa.print_diagnostics()

        a = realloc_raw(a, 5, sa)
        for i : 3..5 { a[i] = 0 }
        printfln("{}, {}, {}, {}, {}", (a[0], a[1], a[2], a[3], a[4]))
    }
    sa.print_diagnostics()
    println("")
}