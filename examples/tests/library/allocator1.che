#test_expect_output("0
5

0, 0, 0, 0, 0
0, 2, 4, 6, 8

0, 0, 0, 0, 0
1, 2, 3, 4, 5

1, 2, 3
1, 2, 3, 0, 0

1, 2, 3
1, 2, 3, 0, 0
")

use import std.mem.allocator
io :: import std.io

Main :: () {
    {
        a := alloc(int)
        *a = 0
        io.printf("{}`n", *a)
        *a = 5
        io.printf("{}`n`n", *a)
        free(a)
    }

    {
        a := alloc_raw(int, 5)
        for i in 0..5 { a[i] = 0 }
        io.printf("{}, {}, {}, {}, {}`n", (a[0], a[1], a[2], a[3], a[4]))

        
        for i in 0..5 { a[i] = i * 2 }
        io.printf("{}, {}, {}, {}, {}`n`n", (a[0], a[1], a[2], a[3], a[4]))
        free(a)
    }

    {
        a := alloc_n(int, 5)
        for i in 0..a.length { *a[i] = 0 }
        io.printf("{}, {}, {}, {}, {}`n", (a[0], a[1], a[2], a[3], a[4]))

        for i in 0..a.length {
            *a[i] = i + 1
        }
        io.printf("{}, {}, {}, {}, {}`n`n", (a[0], a[1], a[2], a[3], a[4]))
        free_n(a)
    }

    {
        a := alloc_n(int, 3)
        for i in 0..a.length { *a[i] = i + 1 }
        io.printf("{}, {}, {}`n", (a[0], a[1], a[2]))

        a = realloc_n(a, 5)
        for i in 3..a.length { *a[i] = 0 }
        io.printf("{}, {}, {}, {}, {}`n`n", (a[0], a[1], a[2], a[3], a[4]))
        free_n(a)
    }

    {
        a := alloc_raw(int, 3)
        for i in 0..3 { a[i] = i + 1 }
        io.printf("{}, {}, {}`n", (a[0], a[1], a[2]))

        a = realloc_raw(a, 5)
        for i in 3..5 { a[i] = 0 }
        io.printf("{}, {}, {}, {}, {}`n`n", (a[0], a[1], a[2], a[3], a[4]))
        free(a)
    }
}
