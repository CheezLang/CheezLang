#test_expect_output("
0: [ |0..1| ]
2: [1, 2 |2..2| ]
4: [1, 2, 3, 4 |4..4| ]
6: [1, 2, 5, 6 |4..6| 3, 4]
7: [1, 2, 5, 6, 3, 7 |6..7| 4]
8: [1, 8 |2..2| 2, 5, 6, 3, 7, 4]
9: [1, 8, 2, 5, 6, 3, 9 |7..14| 7, 4]
10: [10 |1..7| 1, 8, 2, 5, 6, 3, 9, 7, 4]
11: [10, 1, 8, 2, 5, 6, 3, 9, 7, 4, 11 |11..16| ]
---------------------
10: [10, 1, 8, 2, 5, 6, 3, 9, 7, 4 |10..16| ]
9: [ |0..7| 1, 8, 2, 5, 6, 3, 9, 7, 4]
8: [1, 8, 2, 5, 6, 3 |6..14| 7, 4]
7: [1 |1..10| 2, 5, 6, 3, 7, 4]
6: [1, 2, 5, 6, 3 |5..15| 4]
5: [1, 2, 5 |3..14| 3, 4]
4: [1, 2 |2..14| 3, 4]
3: [1, 2, 3 |3..16| ]
2: [1, 2 |2..16| ]
1: [1 |1..16| ]
0: [ |0..16| ]
---------------------
---------------------
0: [ |0..1| ]
13: [i, o, ., f, o, r, m, a, t, l, n, (, ) |13..16| ]
13: [i, o, ., f, o, r, m, a, t, l, n, ( |12..15| )]
15: [i, o, ., f, o, r, m, a, t, l, n, (, `", `" |14..15| )]
15: [i, o, ., f, o, r, m, a, t, l, n, (, `" |13..14| `", )]
26: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, } |24..30| `", )]
26: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, }, `" |25..31| )]
30: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, }, `", ,,  , [, ] |29..31| )]
30: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, }, `", ,,  , [ |28..30| ], )]
53: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, }, `", ,,  , [, i, t, _, i, n, d, e, x, ,,  , r, a, w, _, i, n, d, e, x, ,,  , i, t |51..62| ], )]
53: [i, o, ., f, o, r, m, a, t, l, n, (, `", [, {, }, ,,  , {, }, ],  , {, }, `", ,,  , [, i, t, _, i, n, d, e, x, ,,  , r, a, w, _, i, n, d, e, x, ,,  , i, t, ], ) |53..64| ]
io.formatln(`"[{}, {}] {}`", [it_index, raw_index, it]);
")

use import std.gap_buffer
io :: import std.io

Main :: () {
    io.println("")

    buff := GapBuffer[int].new(0)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.append(1)
    buff.append(2)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(2, 3)
    buff.insert(3, 4)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(2, 5)
    buff.insert(3, 6)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(5, 7)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(1, 8)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(6, 9)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(0, 10)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.insert(buff.count(), 11)
    io.formatln("{}: {}", [buff.count(), &buff])

    io.println("---------------------")

    buff.erase(buff.count() - 1)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(0)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(6)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(1)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(5)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(3)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(2)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(3)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(2)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(1)
    io.formatln("{}: {}", [buff.count(), &buff])

    buff.erase(0)
    io.formatln("{}: {}", [buff.count(), &buff])

    io.println("---------------------")

    for &buff {
        io.formatln("[{}, {}] {}", [it_index, raw_index, it])
    }

    io.println("---------------------")
    code := GapBuffer[char].new(0)
    io.formatln("{}: {}", [code.count(), &code])
    
    // io.formatln("[{}, {}] {}", [it_index, raw_index, it])
    code.append('i')
    code.append('o')
    code.append('.')
    code.append('f')
    code.append('o')
    code.append('r')
    code.append('m')
    code.append('a')
    code.append('t')
    code.append('l')
    code.append('n')
    code.append('(')
    code.append(')')

    io.formatln("{}: {}", [code.count(), &code])
    code.move_gap(code.count() - 1)
    io.formatln("{}: {}", [code.count(), &code])

    code.append('"')
    code.append('"')

    io.formatln("{}: {}", [code.count(), &code])
    code.move_gap(code.count() - 2)
    io.formatln("{}: {}", [code.count(), &code])

    code.append('[')
    code.append('{')
    code.append('}')
    code.append(',')
    code.append(' ')
    code.append('{')
    code.append('}')
    code.append(']')
    code.append(' ')
    code.append('{')
    code.append('}')

    io.formatln("{}: {}", [code.count(), &code])
    code.move_gap(code.count() - 1)
    io.formatln("{}: {}", [code.count(), &code])

    code.append(',')
    code.append(' ')
    code.append('[')
    code.append(']')

    io.formatln("{}: {}", [code.count(), &code])
    code.move_gap(code.count() - 2)
    io.formatln("{}: {}", [code.count(), &code])

    code.append('i')
    code.append('t')
    code.append('_')
    code.append('i')
    code.append('n')
    code.append('d')
    code.append('e')
    code.append('x')
    code.append(',')
    code.append(' ')
    code.append('r')
    code.append('a')
    code.append('w')
    code.append('_')
    code.append('i')
    code.append('n')
    code.append('d')
    code.append('e')
    code.append('x')
    code.append(',')
    code.append(' ')
    code.append('i')
    code.append('t')

    io.formatln("{}: {}", [code.count(), &code])
    code.move_gap(code.count())
    io.formatln("{}: {}", [code.count(), &code])

    code.append(';')

    for c in &code {
        io.print(c)
    }
    io.println("")
    io.println("")
}