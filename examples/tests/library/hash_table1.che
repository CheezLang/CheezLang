#test_expect_output("first name = nico
last name = ot
gender = m
test1 is empty
test2 is empty
0 = zero
1 = one
2 = two
3 = three
4 = four
5 = five
6 is empty
7 is empty

--------------------------

first name = nico
last name is empty
gender = m
test1 is empty
test2 is empty
0 = zero
1 = one
2 = two
3 is empty
4 = four
5 is empty
6 is empty
7 is empty

--------------------------

first name = Markenikon
last name = The One
gender = M
test1 is empty
test2 is empty
0 = zerrrro
1 = unos
2 = dos
3 = traes?
4 = quat...
5 = fuennef
6 is empty
7 is empty")

use import std.hash_table
use import std.hash
use import std.string
io :: import std.io

// won't be necessary as soon as we have polymorphic traits
    compare_ints :: (a: int, b: int) -> bool {
        return a == b
    }

    compare_c_strings :: (a: string, b: string) -> bool {
        return streq(a, b)
    }

get_and_print :: (table: ref Table[$K, $V], key: K) {
    match table.get(key) {
        Some($v) -> io.printf("{} = {}`n", (key, v))
        None -> io.printf("{} is empty`n", key)
    }
}

test :: (t1: ref $T1, t2: ref $T2) {
    get_and_print(t2, "first name")
    get_and_print(t2, "last name")
    get_and_print(t2, "gender")
    get_and_print(t2, "test1")
    get_and_print(t2, "test2")

    get_and_print(t1, 0)
    get_and_print(t1, 1)
    get_and_print(t1, 2)
    get_and_print(t1, 3)
    get_and_print(t1, 4)
    get_and_print(t1, 5)
    get_and_print(t1, 6)
    get_and_print(t1, 7)
}

Main :: () {
    t1 := Table[int, string].create(compare_ints)
    t2 := Table[string, string].create(compare_c_strings)

    t2["first name"] = "nico"
    t2["last name"] = "ot"
    t2["gender"] = "m"

    t1[0] = "zero"
    t1[1] = "one"
    t1[2] = "two"
    t1[3] = "three"
    t1[4] = "four"
    t1[5] = "five"

    test(t1, t2)

    io.println("`n--------------------------`n")

    t2.delete("last name")
    t1.delete(3)
    t1.delete(5)

    test(t1, t2)
    io.println("`n--------------------------`n")

    t2["first name"] = "Markenikon"
    t2["last name"] = "The One"
    t2["gender"] = "M"

    t1[0] = "zerrrro"
    t1[1] = "unos"
    t1[2] = "dos"
    t1[3] = "traes?"
    t1[4] = "quat..."
    t1[5] = "fuennef"

    test(t1, t2)
}
