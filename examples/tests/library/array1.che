#test_expect_output("1
5

len: 0
cap: 10
arr: []

len: 15
cap: 15
arr: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

len: 18
cap: 30
arr: [5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3]

len: 21
cap: 30
arr: [5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 6, 7, 8]

a[5] = 3
a[20] = 8")

use import std.array
use import std.string
C :: import std.c

print_array :: (a: &Array[int]) {
    C.printf("len: %lld`n", a.get_length())
    C.printf("cap: %lld`n", a.get_capacity())
    C.printf("arr: [")

    for i in 0..a.get_length() {
        if i > 0 {
            C.printf(", ")
        }
        C.printf("%lld", a[i])
    }

    C.printf("]`n`n")
}

Foo :: struct {
    x: int
}

test :: (a: &int) {
    *a = 5
}

Main :: () {
    x := 1
    C.printf("%lld`n", x)
    test(x)
    C.printf("%lld`n", x)
    C.printf("`n", x)

    a := Array[int].create()

    print_array(a)

    a.resize(15)
    print_array(a)

    a[0] = 5
    a[5] = 3

    a.add(1)
    a.add(2)
    a.add(3)
    print_array(a)

    a += 1 + 5
    a += 2 + 5
    a += 3 + 5
    print_array(a)

    match a.get(-1) { Some($value)  -> C.printf("a[%lld] = %lld`n", -1, value) }
    match a.get(5)  { Some($value)  -> C.printf("a[%lld] = %lld`n", 5, value) }
    match a.get(20) { Some($value)  -> C.printf("a[%lld] = %lld`n", 20, value) }
}