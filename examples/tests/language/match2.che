#test_expect_output("None
Some 123
five
None
None

None
Some 1
Some 2
five
Some 7
ten
Some 14
fifteen
Some 16

Test.A
Test.B
Test.C
Test.D
Test.E
Test.F
Test.G
Test.H")

io   :: import std.io
util :: import std.util

OptionInt :: enum #copy {
    Some : i64
    None
}

Test :: enum {
    A = 11
    B
    C = 3
    D = 5
    E = 7
    F
    G
    H
}

Main :: () {
    {
        mut a := OptionInt.None
        print_enum(a)
        
        a = OptionInt.Some(123)
        print_enum(a)
        a.Some = 5
        print_enum(a)
        
        a = OptionInt.None
        print_enum(a)
        a.Some = 3
        print_enum(a)

        io.println("")

        print_enum(OptionInt.None)
        print_enum(OptionInt.Some(1))
        print_enum(OptionInt.Some(2))
        print_enum(OptionInt.Some(5))
        print_enum(OptionInt.Some(7))
        print_enum(OptionInt.Some(10))
        print_enum(OptionInt.Some(14))
        print_enum(OptionInt.Some(15))
        print_enum(OptionInt.Some(16))
        io.println("")
    }

    {
        print_enum2(Test.A)
        print_enum2(Test.B)
        print_enum2(Test.C)
        print_enum2(Test.D)
        print_enum2(Test.E)
        print_enum2(Test.F)
        print_enum2(Test.G)
        print_enum2(Test.H)
    }
}

print_enum2 :: (e: Test) {
    match e {
        Test.A -> io.println("Test.A")
        Test.B -> io.println("Test.B")
        Test.C -> io.println("Test.C")
        Test.D -> io.println("Test.D")
        Test.E -> io.println("Test.E")
        Test.F -> io.println("Test.F")
        Test.G -> io.println("Test.G")
        Test.H -> io.println("Test.H")
    }
}

print_enum :: (e: OptionInt) {
    match e {
        OptionInt.Some(5) -> io.println("five")
        OptionInt.Some(10) -> io.println("ten")
        OptionInt.Some(15) -> io.println("fifteen")
        OptionInt.Some($x) -> io.printf("Some {}`n", x)
        OptionInt.None -> io.println("None")
    }
}

print_value :: (e: $T, $VT: type) {
    ptr_raw := cast(^i8)^e
    ptr_val_raw := util.pointer_add(ptr_raw, 8)
    ptr_val := cast(^VT)ptr_val_raw
    io.println(*ptr_val)
}
