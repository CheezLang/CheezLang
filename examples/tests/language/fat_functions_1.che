#test_expect_output("
foo()
test1()
foo(): ...

baz()
test2() -> 3
baz(): 3

bar(9)
test3(9) -> 14
bar(9): 14
")

io :: import std.io

foo :: (f: Fn()) {
    io.println("foo()")
    f()
    io.println("foo(): ...")
}

baz :: (f: Fn() -> int) {
    io.println("baz()")
    result := f()
    io.printfln("baz(): {}", result)
}

bar :: (f: Fn(int) -> int, x: int) {
    io.printfln("bar({})", x)
    result := f(x)
    io.printfln("bar({}): {}", (x, result))
}

test1 :: () {
    io.println("test1()")
}

test2 :: () -> int {
    io.println("test2() -> 3")
    return 3
}

test3 :: (a: int) -> int {
    result := a + 5
    io.printfln("test3({}) -> {}", (a, result))
    return result
}

Main :: () {
    io.println("")

    {
        f : Fn() = cast test1
        foo(f)
        io.println("")
    }

    {
        f : Fn() -> int = cast test2
        baz(f)
        io.println("")
    }

    {
        f : Fn(int) -> int = cast test3
        bar(f, 9)
        io.println("")
    }
}