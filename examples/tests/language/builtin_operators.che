#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14, 4, 45, 1, 4")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("14.000000, 4.000000, 45.000000, 1.800000, 4.000000")
#test_expect_output("0, 1, 1, 1, 0, 0")
#test_expect_output("1, 0, 0, 1, 0, 1")

#test_expect_output("1, 0")
#test_expect_output("0, 1")
#test_expect_output("0, 1")
#test_expect_output("1, 0")

#test_expect_output("1, 0")
#test_expect_output("1, 0")
#test_expect_output("0, 1")

#test_expect_output("0")
#test_expect_output("1")
#test_expect_output("2")
#test_expect_output("3")
#test_expect_output("4")
#test_expect_output("6")
#test_expect_output("8")
#test_expect_output("10")
#test_expect_output("12")
#test_expect_output("13")
#test_expect_output("14")
#test_expect_output("15")
#test_expect_output("1 0 0 0 1 1 1 0")

#test_expect_output("0, -1, -2.500000")
#test_expect_output("1, 3, 7.300000")

fn c_printf(format: c_string) #varargs #linkname("printf");

fn Main() {
    // signed ints
    test_numbers(i8,  9i8,  5i8,  3i8, arith_string = "%hhd, %hhd, %hhd, %hhd, %hhd`n"c)
    test_numbers(i16, 9i16, 5i16, 3i16, arith_string = "%hd, %hd, %hd, %hd, %hd`n"c)
    test_numbers(i32, 9i32, 5i32, 3i32, arith_string = "%d, %d, %d, %d, %d`n"c)
    test_numbers(i64, 9i64, 5i64, 3i64, arith_string = "%lld, %lld, %lld, %lld, %lld`n"c)

    // unsigned ints
    test_numbers(u8,  9u8,  5u8,  3u8, arith_string = "%hhu, %hhu, %hhu, %hhu, %hhu`n"c)
    test_numbers(u16, 9u16, 5u16, 3u16, arith_string = "%hu, %hu, %hu, %hu, %hu`n"c)
    test_numbers(u32, 9u32, 5u32, 3u32, arith_string = "%u, %u, %u, %u, %u`n"c)
    test_numbers(u64, 9u64, 5u64, 3u64, arith_string = "%llu, %llu, %llu, %llu, %llu`n"c)

    // floats
    test_numbers(float, 9.0f, 5.0f, 3.0f, false)
    test_numbers(double, 9.0d, 5.0d, 3.0d, arith_string = "%f, %f, %f, %f, %f`n"c)

    // bool
    test_bool(true, true)
    test_bool(true, false)
    test_bool(false, true)
    test_bool(false, false)

    // pointer
    let a = 5
    let b = 6
    test_pointers(null, null)
    test_pointers(&a, &a)
    test_pointers(&a, &b)

    test_and_or()

    test_unary(true, 1, 2.5)
    test_unary(false, -3, -7.3)
}

fn test_unary(a: bool, b: int, c: double) {
    c_printf("%lld, %lld, %f`n", cast(int) !a, -b, -c)
}

fn foo(b: bool, i: int) -> bool {
    c_printf("%lld`n", i)
    return b
}

fn test_and_or() {
    let a = foo(true, 0) and foo(true, 1)
    let b = foo(true, 2) and foo(false, 3)
    let c = foo(false, 4) and foo(true, 5)
    let d = foo(false, 6) and foo(false, 7)

    let e = foo(true, 8) or foo(true, 9)
    let f = foo(true, 10) or foo(false, 11)
    let g = foo(false, 12) or foo(true, 13)
    let h = foo(false, 14) or foo(false, 15)

    c_printf("%hhd %hhd %hhd %hhd %hhd %hhd %hhd %hhd`n", a, b, c, d, e, f, g, h)
}

fn test_numbers($T: type, a: T, b: T, c: T, $test_arith: bool = true, $arith_string: c_string = "%d, %d, %d, %d, %d`n"c) {
    if test_arith {
        c_printf(arith_string, (a + b), (a - b), (a * b), (a / b), (a % b))
    }
    c_printf("%hhd, %hhd, %hhd, %hhd, %hhd, %hhd`n", (a == b), (a != b), (a > b), (a >= b), (a < b), (a <= b))
    a = c
    b = c
    c_printf("%hhd, %hhd, %hhd, %hhd, %hhd, %hhd`n", (a == b), (a != b), (a > b), (a >= b), (a < b), (a <= b))
}

fn test_bool(a: bool, b: bool) {
    c_printf("%lld, %lld`n", cast(int) (a == b), cast(int) (a != b))
}

fn test_pointers(a: *int, b: *int) {
    c_printf("%lld, %lld`n", cast(int) (a == b), cast(int) (a != b))
}