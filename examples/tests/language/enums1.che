#test_expect_output("Some(123)
Some(789)
None
Some(1.414214)
Err(`"argument is negative`")")

C :: import std.c
use import std.math

PolyStruct :: struct(T: type) {
    x: T
}

try_sqrt :: (f: double) -> Result[double, string] {
    use Result
    if f < 0 {
        return Err("argument is negative")
    } else {
        return Ok(sqrt(f))
    }
}

Test :: enum {
    A
    B
    C
}

Main :: () {
    use Option

    test1(Some(123))
    test1(Some(789))
    test1(None)

    test2(try_sqrt(2.0))
    test2(try_sqrt(-1.0))
}

test1 :: (x: Option[int]) {
    use Option
    match x {
        Some($v)    -> C.printf("Some(%lld)`n", cast(int)v)
        None        -> C.puts("None")
    }
}

test2 :: (r: Result[double, string]) {
    use Result
    match r {
        Ok($v)      -> C.printf("Some(%f)`n", v)
        Err($msg)   -> C.printf("Err(`"%.*s`")`n", msg.bytes.length, msg.bytes.data)
    }
}
