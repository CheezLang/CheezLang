#test_expect_output("1")
#test_expect_output("2")
#test_expect_output("3")
#test_expect_output("3")
#test_expect_output("2")
#test_expect_output("8")
#test_expect_output("")

#test_expect_output("1.000000, 2.000000")
#test_expect_output("3.000000, 4.000000")
#test_expect_output("4.000000, 6.000000")
#test_expect_output("9.000000, 12.000000")
#test_expect_output("")

#test_expect_output("0.500000, 1.000000")
#test_expect_output("2.000000, 4.000000")
#test_expect_output("0.500000, 2.000000")
#test_expect_output("1.500000, 4.000000")
#test_expect_output("-1.500000, -4.000000")


use import std.math
C :: import std.c

Num :: struct #copy {
    x: int
}

num_add :: (a: Num, b: Num) -> Num #operator("+") {
    return Num(a.x + b.x)
}

num_inc :: (a: &Num, b: Num) #operator("+=") {
    a.x += b.x
}

Vec2 :: Vector2[double]

Main :: () {
    {
        a := Num(1)
        b := Num(2)
        c := a + b

        C.printf("%lld`n", a.x)
        C.printf("%lld`n", b.x)
        C.printf("%lld`n", c.x)

        (a, c) += (b, Num(5))
        
        C.printf("%lld`n", a.x)
        C.printf("%lld`n", b.x)
        C.printf("%lld`n", c.x)
        C.printf("`n")
    }

    {
        a := Vec2(1, 2)
        b := Vec2(3, 4)
        c := a + b

        d := Vec2(5, 6)
        d += c

        C.printf("%f, %f`n", a.x, a.y)
        C.printf("%f, %f`n", b.x, b.y)
        C.printf("%f, %f`n", c.x, c.y)
        C.printf("%f, %f`n", d.x, d.y)

        C.printf("`n")

        a -= Vec2(0.5, 1)
        C.printf("%f, %f`n", a.x, a.y)

        a *= 4.0
        C.printf("%f, %f`n", a.x, a.y)

        a /= Vec2(4, 2)
        C.printf("%f, %f`n", a.x, a.y)

        a *= Vec2(3, 2)
        C.printf("%f, %f`n", a.x, a.y)

        a = -a
        C.printf("%f, %f`n", a.x, a.y)
    }
}