#test_expect_output("Test.foo(S{10}, 23)

Test.foo(S{5}, 7)
Test.print(S{5})

Test2.bar(S{5})
Test2.print(S{5})

Test.foo(S2{hello}, 23)
Test.print(S2{hello})

Test.foo(S{1}, 123)
Test.print(S{1})

Test.foo(S2{zwei}, 123)
Test.print(S2{zwei})
")

C :: import std.c
use import std.string

Test :: trait {
    foo :: (ref Self, a: int);
    print :: (ref Self);
}

Test2 :: trait {
    bar :: (ref Self);
    print :: (ref Self);
}

S :: struct {
    a: int
}

S2 :: struct {
    x: c_string
}

impl Test for S {
    foo :: (ref Self, a: int) {
        C.printf("Test.foo(S{%lld}, %lld)`n", self.a, a)
    }

    print :: (ref Self) {
        C.printf("Test.print(S{%lld})`n", a)
    }
}

impl Test2 for S {
    bar :: (ref Self) {
        C.printf("Test2.bar(S{%lld})`n", a)
    }

    print :: (ref Self) {
        C.printf("Test2.print(S{%lld})`n", a)
    }
}

impl Test for S2 {
    foo :: (ref Self, a: int) {
        C.printf("Test.foo(S2{%s}, %lld)`n", x, a)
    }

    print :: (ref Self) {
        C.printf("Test.print(S2{%s})`n", x)
    }
}

test :: (t: &Test) {
    t.foo(123)
    t.print()
    C.puts("")
}

Main :: () {
    {
        t := S(10)
        t.foo(23)
        C.puts("")
    }

    {
        tmp := S(5)
        t : &Test = &tmp
        t.foo(7)
        t.print()
        C.puts("")
    }
    
    {
        tmp := S(5)
        t : &Test2 = &tmp
        t.bar()
        t.print()
        C.puts("")
    }
    
    {
        tmp := S2("hello")
        t : &Test = &tmp
        t.foo(23)
        t.print()
        C.puts("")
    }
    
    {
        {
            tmp := S(1)
            test(&tmp)
        }
        {
            tmp := S2("zwei")
            test(&tmp)
        }
    }
}
