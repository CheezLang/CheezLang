#test_expect_output("5
5
5

10
10
5

15
15
5

15
15
20
")

#load("std:c")
#load("std:string")

fn Main() {
    test1()
    test2()
    test3()
    test4()
}

fn test4() {
    a := 5
    ra : ref int = a
    b := ra
    
    c_printf("%lld`n", a)
    c_printf("%lld`n", ra)
    c_printf("%lld`n", b)
    c_printf("`n")

    a = 10
    c_printf("%lld`n", a)
    c_printf("%lld`n", ra)
    c_printf("%lld`n", b)
    c_printf("`n")

    ra = 15
    c_printf("%lld`n", a)
    c_printf("%lld`n", ra)
    c_printf("%lld`n", b)
    c_printf("`n")

    b = 20
    c_printf("%lld`n", a)
    c_printf("%lld`n", ra)
    c_printf("%lld`n", b)
    c_printf("`n")
}

Foo3 :: struct {
    a: int
    b: double
    c: string
}

fn test3() {
    c := "uiae"

    f := Foo3(
        1i8
        0.0f
        c
    )
    f2 := Foo3(
        a = 2i8
        b = 1.2
        c = c
    )
}

fn test2() {
    a := 5
    t := (1, 2, a, "lol")
}

fn help1(a: ref &int) {
    b := <<&<<a
}

fn test1() {
    a := 5
    pa := &a
    b := <<pa
    c := <<&<<&a

    help1(pa)
}