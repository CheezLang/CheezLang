#test_expect_output("2")
#test_expect_output("3.600000")
#test_expect_output("5")
#test_expect_output("3.600000")
#test_expect_output("5")

#load("std:preload")

c_printf :: (format: c_string) #varargs #linkname("printf");

Test :: struct(T: type) {
    x: T
}

impl(T: type) Test[T] {
    foo :: (ref Self, a: int) -> Test[T] {
        self.x = cast a
        return Test[T](cast a)
    }
}

Main :: () {
    t := Test[int](2)
    t2 := Test[double](3.6)

    c_printf("%lld`n", t.x)
    c_printf("%f`n", t2.x)

    uiae := t.foo(5)

    c_printf("%lld`n", t.x)
    c_printf("%f`n", t2.x)
    c_printf("%lld`n", uiae.x)
}