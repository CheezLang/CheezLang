#test_expect_output("get_ref
2
get_ref
2
2
2")

#load("std:c")

#load("std:preload")

fn get_ref(a: ref Option[int]) -> ref Option[int] {
    c_puts("get_ref")
    return a
}

fn inc1(a: ref Option[int]) {
    match get_ref(a) {
        Some(ref $v) -> {
            v += 1
        }
    }

}

fn inc2(a: ref Option[int]) {
    match get_ref(a) {
        Some($v) -> {
            v += 2
        }
    }
}

fn inc3(a: Option[int]) {
    match a {
        Some(ref $v) -> {
            v += 4
        }
    }
}

fn inc4(a: Option[int]) {
    match Option[int].Some(1) {
        Some(ref $v) -> {
            v += 8
        }
    }
}

fn inc5(a: Option[int]) {
    match Option[int].Some(1) {
        Some($v) -> {
            v += 16
        }
    }
}

fn print_a(a: ref Option[int]) {
    match a {
        Some($a) -> {
            c_printf("%lld`n", a)
        }
        None -> {
            c_puts("None")
        }
    }
}

fn Main() {
    a := Some(1)

    inc1(a)
    print_a(a)
    inc2(a)
    print_a(a)
    inc3(a)
    print_a(a)
    inc4(a)
    print_a(a)
}