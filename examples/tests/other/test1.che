#load("std:preload")

S1 :: struct {
    t: DWORD
}
S2 :: struct(T: TYPE) {
    t: T
    next: &S2[T]
}

E1 :: enum {
    t
}
E2 :: enum(T: TYPE) {
    t: T
    next: &E2[T]
}

trait T1 {
    fn t(ref Self) -> int;
}
trait T2(T: TYPE) {
    fn t(ref Self) -> T;
}

impl T1 for S1 {
    fn t(ref Self) -> int {
        return 0
    }
}

impl T2[string] for S1 {
    fn t(ref Self) -> string {
        return ""
    }
}

impl T1 for int {
    fn t(ref Self) -> int {
        return 0
    }
}

impl T2[string] for int {
    fn t(ref Self) -> string {
        return ""
    }
}

A, B : TUPLE : default
C, D : TD1, DWORD : default

TYPE :: type
TUPLE :: (int, string)
DWORD :: int
TD1 :: S1
TD2 :: &S1
TD3 :: []S1
TD4 :: ref S1
TD5 :: fn (S1) -> E1
TD6 :: S2[DWORD]
TD7 :: [10]S1
TD8 :: (S1, E1)
TD9 :: E2[DWORD]
TD10 :: T2[DWORD]

X1 :: int
Y1 :: X1
Z1 :: Y1

Z2 :: Y2
Y2 :: X2
X2 :: int

S : Z2 : 10

a : [S]DWORD = b
b : [S]DWORD = c
c : [S]DWORD = default
d : S2[X1] = test(S)

fn test(a: Z2 = get_val()) -> S2[X1] {
    return S2[X1]()
}

fn get_val() -> Z2 {
    return 0
}

uiae : int = xvlc()
nrtd : int = uiae
hgfq : int : 1
fn xvlc(x: int = hgfq) -> int {
    return x
}

fn Main() { }