fn malloc(size: int) -> void^;
fn realloc(mem: void^, size: int) -> void^;
fn free(mem: void^);


fn AllocateArray(count: int) -> $T[] {
    return (T[])malloc(count * @sizeof(T))
}

fn FreeArray(arr: $T[]) {
    free((void^)arr)
}

fn Malloc(count: int) -> $T^ {
    return (T^)malloc(count * @sizeof(T))
}

fn Realloc(mem: $T^, count: int) -> T^ {
    return (T^)realloc((void^)mem, count * @sizeof(T))
}

fn Free(mem: $T^) {
    free((void^)mem)
}
