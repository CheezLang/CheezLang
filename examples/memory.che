fn malloc(size: int) -> any&;
fn realloc(mem: any&, size: int) -> any&;
fn free(mem: any&);

fn memcpy(dest: any&, src: any&, size: int);

fn Malloc(count: uint) -> $T& {
    return (T&)malloc((int)count * @sizeof(T))
}

fn MallocSlice(count: uint) -> $T[] {
    let mem: T[] = (T&)malloc((int)count * @sizeof(T))
    mem.length = (int)count
    return mem
}

fn Realloc(mem: $T&, count: uint) -> T& {
    return (T&)realloc(mem, (int)count * @sizeof(T))
}

fn Free(mem: $T&) {
    free(mem)
}

fn FreeSlice(mem: $T[]) {
    free((any&)mem)
}

fn ClearMemory(mem: byte&, len: uint) {
    let i: @typeof(len) = 0
    while i < len {
        mem[i] = 0
        i = i + 1
    }
}

struct Slice(T: type) {
    data: T&
    length: int
}
