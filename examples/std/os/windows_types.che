#export_scope

DWORD                :: u32
HANDLE               :: ^void
HWND                 :: HANDLE
HINSTANCE            :: HANDLE
HMODULE              :: HANDLE
HICON                :: HANDLE
HMENU                :: HANDLE
HDC                  :: HANDLE
HGLRC                :: HANDLE
HCURSOR              :: HICON
HBRUSH               :: HANDLE
HFILE                :: i32
BOOL                 :: i32
UINT                 :: u32
LONG                 :: i32
ULONG                :: u32
LONGLONG             :: i64
LONG64               :: i64
LARGE_INTEGER        :: LONGLONG
UINT_PTR             :: u64
LONG_PTR             :: i64
ULONG_PTR            :: u64
WPARAM               :: UINT_PTR
LPARAM               :: LONG_PTR
LRESULT              :: LONG_PTR
ATOM                 :: u16
WNDCLASS             :: WNDCLASSA
UCHAR                :: u8
BYTE                 :: u8
WORD                 :: u16
SIZE_T               :: u64
THREAD_START_ROUTINE :: fn(^void) -> DWORD #stdcall
WAITORTIMERCALLBACK  :: fn(^void, bool) #stdcall

POINT :: struct {
    x   : i32   = 0
    y   : i32   = 0
}

MSG :: struct {
    hwnd        : HWND      = default
    message     : UINT      = default
    wParam      : WPARAM    = default
    lParam      : LPARAM    = default
    time        : DWORD     = default
    pt          : POINT     = default
    lPrivate    : DWORD     = default
}

RECT :: struct {
    left    : i32
    top     : i32
    right   : i32
    bottom  : i32
}

WNDCLASSA :: struct {
    style           : UINT      = default
    lpfnWndProc     : fn(HWND, UINT, WPARAM, LPARAM) -> LRESULT = default
    cbClsExtra      : i32       = default
    cbWndExtra      : i32       = default
    hInstance       : HINSTANCE = default
    hIcon           : HICON     = default
    hCursor         : HCURSOR   = default
    hbrBackground   : HBRUSH    = default
    lpszMenuName    : c_string  = default
    lpszClassName   : c_string  = default
}


MINMAXINFO :: struct {
    ptReserved      : POINT
    ptMaxSize       : POINT
    ptMaxPosition   : POINT
    ptMinTrackSize  : POINT
    ptMaxTrackSize  : POINT
}

// COPYDATASTRUCT :: struct {
//     ULONG_PTR dwData;
//     DWORD cbData;
//     _Field_size_bytes_(cbData) PVOID lpData;
// } 

MDINEXTMENU :: struct {
    hmenuIn     : HMENU
    hmenuNext   : HMENU
    hwndNext    : HWND
}

GUID :: struct {
    Data1   : DWORD
    Data2   : WORD
    Data3   : WORD
    Data4   : [8]BYTE
}


POWERBROADCAST_SETTING :: struct {
    PowerSetting    : GUID
    DataLength      : DWORD
    Data            : [1]UCHAR
}

CREATESTRUCTA :: struct {
    lpCreateParams  : ^void
    hInstance       : HINSTANCE
    hMenu           : HMENU
    hwndParent      : HWND
    cy              : i32
    cx              : i32
    y               : i32
    x               : i32
    style           : LONG
    lpszName        : c_string
    lpszClass       : c_string
    dwExStyle       : DWORD
}

PIXELFORMATDESCRIPTOR :: struct {
    nSize           : WORD
    nVersion        : WORD
    dwFlags         : DWORD
    iPixelType      : BYTE
    cColorBits      : BYTE
    cRedBits        : BYTE
    cRedShift       : BYTE
    cGreenBits      : BYTE
    cGreenShift     : BYTE
    cBlueBits       : BYTE
    cBlueShift      : BYTE
    cAlphaBits      : BYTE
    cAlphaShift     : BYTE
    cAccumBits      : BYTE
    cAccumRedBits   : BYTE
    cAccumGreenBits : BYTE
    cAccumBlueBits  : BYTE
    cAccumAlphaBits : BYTE
    cDepthBits      : BYTE
    cStencilBits    : BYTE
    cAuxBuffers     : BYTE
    iLayerType      : BYTE
    bReserved       : BYTE
    dwLayerMask     : DWORD
    dwVisibleMask   : DWORD
    dwDamageMask    : DWORD
}

SECURITY_ATTRIBUTES :: struct {
  nLength               : DWORD
  lpSecurityDescriptor  : ^void
  bInheritHandle        : BOOL
}

STARTUPINFOA :: struct {
  cb              : DWORD     = @sizeof(STARTUPINFOA)
  lpReserved      : c_string  = default
  lpDesktop       : c_string  = default
  lpTitle         : c_string  = default
  dwX             : DWORD     = default
  dwY             : DWORD     = default
  dwXSize         : DWORD     = default
  dwYSize         : DWORD     = default
  dwXCountChars   : DWORD     = default
  dwYCountChars   : DWORD     = default
  dwFillAttribute : DWORD     = default
  dwFlags         : DWORD     = default
  wShowWindow     : WORD      = default
  cbReserved2     : WORD      = default
  lpReserved2     : ^BYTE     = default
  hStdInput       : HANDLE    = default
  hStdOutput      : HANDLE    = default
  hStdError       : HANDLE    = default
}

PROCESS_INFORMATION :: struct {
  hProcess    : HANDLE = default
  hThread     : HANDLE = default
  dwProcessId : DWORD  = default
  dwThreadId  : DWORD  = default
}

CRITICAL_SECTION :: struct {
    DebugInfo      : ^void      = default
    LockCount      : LONG       = default
    RecursionCount : LONG       = default
    OwningThread   : HANDLE     = default // from the thread's ClientId->UniqueThread
    LockSemaphore  : HANDLE     = default
    SpinCount      : ULONG      = default // force size on 64-bit systems when packed
}

CONDITION_VARIABLE :: struct { 
    ptr : ^void = default
}

// #define UNICODE_NOCHAR                  0xFFFF

// #define NFR_ANSI                             1
// #define NFR_UNICODE                          2
// #define NF_QUERY                             3
// #define NF_REQUERY                           4

// #define PWR_OK              1
// #define PWR_FAIL            (-1)
// #define PWR_SUSPENDREQUEST  1
// #define PWR_SUSPENDRESUME   2
// #define PWR_CRITICALRESUME  3

// #define     WA_INACTIVE     0
// #define     WA_ACTIVE       1
// #define     WA_CLICKACTIVE  2

// #define DM_POINTERHITTEST               0x0250

// #define PBT_APMQUERYSUSPEND             0x0000
// #define PBT_APMQUERYSTANDBY             0x0001
// #define PBT_APMQUERYSUSPENDFAILED       0x0002
// #define PBT_APMQUERYSTANDBYFAILED       0x0003
// #define PBT_APMSUSPEND                  0x0004
// #define PBT_APMSTANDBY                  0x0005
// #define PBT_APMRESUMECRITICAL           0x0006
// #define PBT_APMRESUMESUSPEND            0x0007
// #define PBT_APMRESUMESTANDBY            0x0008
// #define PBTF_APMRESUMEFROMFAILURE       0x00000001
// #define PBT_APMBATTERYLOW               0x0009
// #define PBT_APMPOWERSTATUSCHANGE        0x000A
// #define PBT_APMOEMEVENT                 0x000B
// #define PBT_APMRESUMEAUTOMATIC          0x0012
// #define PBT_POWERSETTINGCHANGE          0x8013

// #define UIS_SET                         1
// #define UIS_CLEAR                       2
// #define UIS_INITIALIZE                  3
// #define UISF_HIDEFOCUS                  0x1
// #define UISF_HIDEACCEL                  0x2
// #define UISF_ACTIVE                     0x4

// #define WHEEL_DELTA                     120
// #define GET_WHEEL_DELTA_WPARAM(wParam)  ((short)HIWORD(wParam))
// #define WHEEL_PAGESCROLL                (UINT_MAX)
// #define GET_KEYSTATE_WPARAM(wParam)     (LOWORD(wParam))
// #define GET_NCHITTEST_WPARAM(wParam)    ((short)LOWORD(wParam))
// #define GET_XBUTTON_WPARAM(wParam)      (HIWORD(wParam))
// #define XBUTTON1      0x0001
// #define XBUTTON2      0x0002
