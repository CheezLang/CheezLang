mem :: import std.mem.allocator
io  :: import std.io

#export_scope

RcData :: struct {
    count           : int
    internal_count  : int
}

Rc :: struct(T: type) {
    data        : ^RcData
    value       : ^T
    drop_impl   : fn(^T)
    owns_memory : bool
}

Ref :: struct(T: type) {
    data        : ^RcData
    value       : ^T
    owns_memory : bool
}

impl(T: type) Rc[T] {
    empty :: () -> Rc[T] {
        return Rc[T](null, null, null, false)
    }

    from_pointer :: (ptr: ^$K, owned: bool) -> Rc[T] {
        data := mem.alloc(RcData)
        *data = RcData(1, 1)

        // drop :: (ptr: ^K) {
        //     Memory.drop(*ptr)
        // }
        drop_impl : fn(^T) = cast if const !@is_trait(K) and @type_has_trait(K, Drop) then ptr.drop else null
        return Rc[T](data, cast ptr, drop_impl, owned)
    }

    new :: (value: $K) -> Rc[T] {
        data    := mem.alloc(RcData)
        *data  = RcData(1, 1)
        ptr     := mem.alloc(K)
        *ptr   = value

        drop :: (ptr: ^K) {
            Memory.drop(*ptr)
        }
        drop_impl : fn(^T) = cast if const !@is_trait(K) and @type_has_trait(K, Drop) then drop else null
        return Rc[T](data, cast ptr, drop_impl, true)
    }

    borrow :: (&Self) -> Ref[T] {
        data.internal_count += 1
        return Ref[T](data, value, owns_memory)
    }

    count :: (&Self) -> int {
        @assert(data != null)
        return data.count
    }

    is_null :: (&Self) -> bool {
        return value == null
    }

    // try_get :: (&Self) -> Option[&T] {
    //     return if value == null
    //         then None
    //         else Some(*value)
    // }

    get :: (&Self) -> &T {
        @assert(value != null)
        return &*value
    }

    change_type :: (Self, $R: type) -> Rc[R] {
        result := Rc[R](data, null, cast drop_impl, owns_memory)
        if const @is_trait(T) and !@is_trait(R) {
            // cast from trait ptr to non trait ptr
            result.value = cast @ptr_of_trait(value)
        } else {
            result.value = cast value
        }

        data = null
        value = null
        return result
    }
}

impl(T: type) Clone for Rc[T] {
    clone :: (&Self) -> Self {
        data.count += 1
        data.internal_count += 1
        return Self(data, value, drop_impl, owns_memory)
    }
}

impl(T: type) Ref[T] {
    empty :: () -> Ref[T] {
        return Ref[T](null, null, false)
    }

    count :: (&Self) -> int {
        @assert(data != null)
        return data.count
    }

    is_null :: (&Self) -> bool {
        return value == null
    }

    try_get :: (&Self) -> Option[&T] {
        return if value == null
            then None
            else Some(&*value)
    }

    get :: (&Self) -> &T {
        @assert(value != null)
        return &*value
    }

    change_type :: (Self, $R: type) -> Ref[R] {
        result := Ref[R](data, null, owns_memory)
        if const @is_trait(T) and !@is_trait(R) {
            // cast from trait ptr to non trait ptr
            result.value = cast @ptr_of_trait(value)
        } else {
            result.value = cast value
        }

        data = null
        value = null
        return result
    }
}

impl(T: type) Clone for Ref[T] {
    clone :: (&Self) -> Self {
        data.internal_count += 1
        return Self(data, value, owns_memory)
    }
}

impl(T: type) Drop for Rc[T] {
    drop :: (&Self) {
        if data == null {
            return
        }

        @assert(data.count > 0)
        data.count -= 1
        data.internal_count -= 1
        if data.count == 0 and drop_impl != null {
            drop_impl(value)
        }
        if owns_memory and data.internal_count == 0 {
            mem.free(data)
        }
    }
}

impl(T: type) Drop for Ref[T] {
    drop :: (&Self) {
        if data == null {
            return
        }

        @assert(data.internal_count > 0)
        data.internal_count -= 1
        if data.internal_count == 0 and owns_memory {
            mem.free(data)
        }
    }
}
