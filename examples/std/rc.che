mem :: import std.mem.allocator
io  :: import std.io

#export_scope

RcData :: struct(T: type) {
    count : int
    value : T
}

Rc :: struct(T: type) {
    data : &RcData[T]
}

impl(T: type) Drop for Rc[T] {
    drop :: (ref Self) {
        if data == null {
            return
        }
        @assert(data.count > 0)
        data.count -= 1
        if data.count == 0 {
            Memory.drop(<<data)
            mem.free(data)
        }
    }
}

impl(T: type) Rc[T] {
    empty :: () -> Rc[T] {
        return Rc[T](null)
    }

    new :: (value: T) -> Rc[T] {
        data := mem.alloc(RcData[T])
        <<data = RcData[T](1, value)
        return Rc[T](data)
    }

    clone :: (ref Self) -> Rc[T] {
        data.count += 1
        return Rc[T](data)
    }

    count :: (ref Self) -> int {
        @assert(data != null)
        return data.count
    }

    is_null :: (ref Self) -> bool {
        return data == null
    }

    try_get :: (ref Self) -> Option[ref T] {
        return if data == null
            then None
            else Some(data.value)
    }

    get :: (ref Self) -> ref T {
        @assert(data != null)
        return data.value
    }
}