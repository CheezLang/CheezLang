struct Rc(T: type) {
    count   : &int
    data    : &T
}

impl(T: type) Drop for Rc[T] {
    fn drop(ref Self) {
        @assert(<<count > 0)
        <<count -= 1
        if <<count == 0 {
            Memory::drop(<<data)
            free(data)
        }
    }
}

impl(T: type) Rc[T] {
    fn create(value: T) -> Rc[T] {
        let count = alloc(int)
        let data  = alloc(T)
        <<count = 1
        <<data = value
        return Rc[T](count, data)
    }

    fn clone(ref Self) -> Rc[T] {
        <<count += 1
        return Rc[T](count, data)
    }

    fn get(ref Self) -> ref T {
        return <<data
    }
}