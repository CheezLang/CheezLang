Rc :: struct(T: type) {
    count   : &int
    data    : &T
}

impl(T: type) Drop for Rc[T] {
    drop :: (ref Self) {
        @assert(<<count > 0)
        <<count -= 1
        if <<count == 0 {
            Memory.drop(<<data)
            free(data)
        }
    }
}

impl(T: type) Rc[T] {
    create :: (value: T) -> Rc[T] {
        count := alloc(int)
        data  := alloc(T)
        <<count = 1
        <<data = value
        return Rc[T](count, data)
    }

    clone :: (ref Self) -> Rc[T] {
        <<count += 1
        return Rc[T](count, data)
    }

    get :: (ref Self) -> ref T {
        return <<data
    }
}