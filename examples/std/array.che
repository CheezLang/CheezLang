#load("std:mem/memory")
// #load("std:mem/allocator")
// #load("std:mem/std_heap_allocator")

struct Array(T: type) {
    data: []T
    length: int
    // allocator: Allocator
}

impl Array($T) {
    fn create(initial_capicity: int = 10) -> Self {
        let s = new Array(T) { null, 0 }
        s.reserve(initial_capicity)
        c_memset(cast s.get_raw(), 0, cast(uint) (s.get_capacity() * @sizeof(T)))
        return s
    }

    fn reserve(ref Self, size: int) {
        if data.length > size {
            return
        }

        data.length = size
        data.data = cast c_realloc(cast data.data, cast(i32) (size * @sizeof(T)))

        if size > length {
            c_memset(cast &data[length], 0, cast(uint) ((size - length) * @sizeof(T)))
        }

        if length > data.length {
            length = data.length
        }
    }

    fn free(ref Self) {
        c_free(cast data.data)
        data = null
        length = 0
    }

    fn get_length(ref Self) -> int {
        return length
    }

    fn get_capacity(ref Self) -> int {
        return data.length
    }

    fn get_raw(ref Self) -> &T {
        return data.data
    }

    fn resize(ref Self, size: int) {
        reserve(size)
        length = size
    }

    fn add(ref Self, val: T) #operator("+=") {
        if get_capacity() <= get_length() {
            reserve(get_capacity() * 2)
        }

        data[length] = val
        length += 1
    }

    fn get(ref Self, index: int) -> (ok: bool, value: T) {
        if index < 0 or index >= length {
            ok = false
            value = 0
        } else {
            ok = true
            value = data[index]
        }
    }

    fn access_unchecked(ref Self, index: int) -> ref T #operator("[]") {
        return data[index]
    }

    fn sliceFL(ref Self, from: int, len: int) -> []T {
        let slice: []T = &data[from]
        slice.length = len
        return slice
    }

    fn slice(ref Self) -> []T {
        return self.sliceFL(0, length)
    }

    fn sliceF(ref Self, from: int) -> []T {
        return self.sliceFL(from, length - from)
    }
    
    fn sliceL(ref Self, len: int) -> []T {
        return self.sliceFL(0, len)
    }
}
