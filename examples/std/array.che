use import std.mem.allocator
use import std.mem.std_heap_allocator
use import std.iterator
C :: import std.c

#export_scope

Array :: struct(T: type) {
    data            : &T
    capacity        : int
    length          : int
    allocator       : Allocator
}

impl(T: type) Drop for Array[T] {
    drop :: (ref Self) {
        // destruct values
        for 0..length {
            Memory.drop(data[it])
        }

        free(data, allocator)
        data = null
        length = 0
    }
}

impl(T: type) Array[T] {
    create :: (initial_capacity: int = 10, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Array[T](null, 0, 0, allocator)
        s.reserve(initial_capacity)
        C.memset(cast s.get_raw(), 0, cast(uint) (s.get_capacity() * @sizeof(T)))
        return s
    }

    reserve :: (ref Self, size: int) {
        if capacity > size {
            return
        }

        capacity = size
        data = realloc_raw(data, cast size, allocator)

        if size > length {
            C.memset(cast &data[length], 0, cast(uint) ((size - length) * @sizeof(T)))
        }

        if length > capacity {
            length = capacity
        }
    }

    get_length :: (ref Self) -> int {
        return length
    }

    get_capacity :: (ref Self) -> int {
        return capacity
    }

    get_raw :: (ref Self) -> &T {
        return data
    }

    clear :: (ref Self) {
        for 0..length do Memory.drop(data[it])
        length = 0
    }

    add :: (ref Self, val: T) #operator("+=") {
        if get_capacity() <= get_length() {
            reserve(get_capacity() * 2)
        }

        data[length] = val
        length += 1
    }

    push :: (ref Self, val: T) {
        if get_capacity() <= get_length() {
            reserve(get_capacity() * 2)
        }

        data[length] = val
        length += 1
    }

    pop :: (ref Self) -> T {
        @assert(length > 0)

        length -= 1
        return data[length]
    }

    peek_last :: (ref Self) -> ref T {
        @assert(length > 0, "Array is empty")
        return data[length - 1]
    }

    get :: (ref Self, index: int) -> Option[T] {
        if index < 0 or index >= length {
            return None
        } else {
            return Some(data[index])
        }
    }

    access_unchecked :: (ref Self, index: int) -> ref T {
        return data[index]
    }

    access :: (ref Self, index: int) -> ref T #operator("[]") {
        if !(index >= 0 and index < length) {
            C.printf("%lld`n", index)
        }
        @assert(index >= 0 and index < length, "Index was out of range")
        return data[index]
    }

    sliceFL :: (ref Self, from: int, len: int) -> []T {
        @assert(from >= 0 and len >= 0 and from + len <= length, "Invalid range")
        slice : []T = &data[from]
        slice.length = len
        return slice
    }

    slice :: (ref Self) -> []T {
        return self.sliceFL(0, length)
    }

    sliceF :: (ref Self, from: int) -> []T {
        return self.sliceFL(from, length - from)
    }
    
    sliceL :: (ref Self, len: int) -> []T {
        return self.sliceFL(0, len)
    }

    sort :: (ref Self, cmp: fn (ref T, ref T) -> int) -> ref Self {
        quick_sort(0, length - 1, cmp)

        return self
    }

    quick_sort :: (ref Self, from: int, to: int, cmp: fn (ref T, ref T) -> int) {
        if from >= to {
            return
        }

        idx := from
        pivot := data[to]

        for i : from..to {
            if cmp(data[i], pivot) > 0 {
                (data[idx], data[i]) = (data[i], data[idx])
                idx += 1
            }
        }
        (data[idx], data[to]) = (data[to], data[idx])

        quick_sort(from, idx - 1, cmp)
        quick_sort(idx + 1, to, cmp)
    }

    iterator :: (ref Self) -> ArrayIterator[T] {
        return ArrayIterator[T](self, 0)
    }
}

// @todo: only apply this impl if T is default constructable, e.g.:
// impl(T: type) Array(T) if @is_default_constructable(T) { ...
impl(T: type) Array[T] if @is_default_constructable(T) {
    resize :: (ref Self, size: int) {
        self.reserve(size)

        for size..length do Memory.drop(data[it])
        length = size
    }
}

ArrayIterator :: struct(T: type) {
    array: ref Array[T]
    index: int
}

impl(T: type) Iterator[T] for ArrayIterator[T] {
    next :: (ref Self) -> Option[T] {
        index += 1
        return if index > array.length { None } else { Some(array[index - 1]) }
    }
}

impl(F: type, T: type) Into[Array[T]] for Array[F] if F : Into[T], #notyet {
    into :: (ref Self) -> Array[T] {
        result := Array[T].create(self.get_length())
        for 0..self.get_length() {
            result.add(F.into(self.access_unchecked(it)))
        }
        return result
    }
}

impl(F: type, T: type) From[Array[F]] for Array[T] if T : From[F], #notyet {
    from :: (value: Array[F]) -> Array[T] {
        result := Array[T].create(value.get_length())
        for 0..value.get_length() {
            result.add(F.into(value.access_unchecked(it)))
        }
        return result
    }
}

for_extension_array_T :: (arr: ref Array[$T], code: Code, reverse: bool = false,
                            by_ref: bool = true) #for {
    while it_index := 0, it_index < arr.get_length(), it_index += 1 {
        if const reverse {
            it_index_rev := arr.length - it_index - 1
            if const by_ref {
                it := ref arr[it_index_rev]
            } else {
                it := arr[it_index_rev]
            }
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            if const by_ref {
                it := ref arr[it_index]
            } else {
                it := arr[it_index]
            }
            @insert(code, _break=break, _continue=continue)
        }
    }
}
