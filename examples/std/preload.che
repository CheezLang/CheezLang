_C :: import std.c

// OS
Platform :: enum {
    Unknown
    Windows
    Linux
    OSX
}

__platform__ : Platform = if const @is_os("Windows") {
    Platform.Windows
} else if const @is_os("Linux") {
    Platform.Linux
} else if const @is_os("OSX") {
    Platform.OSX
} else {
    Platform.Unknown
}

// 
push_var :: (var: Code, x: Code) #macro #transparent {
    prev := @insert(var) #local
    defer {@insert(var) = prev}
    @insert(var) = @insert(x)
}

// try
try :: (code: Code) #macro {
    match @insert(code, _break=break, _continue=continue) {
        Ok($val) -> val
        Err($err) -> {
            ReturnType :: @function_type().return_type
            return if const ReturnType == bool {
                false
            } else {
                TargetType :: ReturnType.E
                ErrorType :: @typeof(err)

                if const @type_has_trait(ErrorType, Into[TargetType]) {
                    ReturnType.Err(cast(TargetType) @typeof(err).into(&err))
                } else {
                    ReturnType.Err(err)
                }
                // bug?
                // if const @type_has_trait(ErrorType, Into[TargetType]) {
                //     return ReturnType.Err(cast(TargetType) @typeof(err).into(err))
                // } else {
                //     return ReturnType.Err(err)
                // }
            }
        }
    }
}

try_with :: (code: Code, with: Code) #macro {
    match @insert(code, _break=break, _continue=continue) {
        Ok($val) -> val
        Err($err) -> @insert(with, link=[err], _break=break, _continue=continue)
    }
}

// drop
Drop :: trait {
    drop :: (&Self);
}

// drops a values
Memory :: struct{}
impl Memory {
    drop :: (_: $T) {}
}

// option and result
Option :: enum(T: type) #copy(T) {
    None
    Some : T
}

Result :: enum(V: type, E: type) #copy(V, E) {
    Ok  : V
    Err : E
}

use Option
use Result

impl(T: type) Option[T] if (!@is_trait(T)) {
    unwrap :: (Self) -> T {
        return match self {
            Some($v) -> v
            None -> @assert(false)
        }
    }

    unwrap_or :: (Self, def: T) -> T {
        return match self {
            Some($v) -> {
                Memory.drop(def)
                v
            }
            None -> def
        }
    }

    map_ref :: (self: Option[&T], fun: fn(&T) -> $K) -> Option[K] {
        return match self {
            Some($value) -> Some(fun(value))
            None -> None
        }
    }
}

impl(V: type, E: type) Result[V, E] {
    unwrap :: (Self) -> V {
        return match self {
            Ok($v) -> v
            Err(_) -> @assert(false)
        }
    }
}

From :: trait(T: type) {
    from :: (value: T) -> Self;
}

Into :: trait(T: type) {
    into :: (&Self) -> T;
}

impl Into[()] for () {
    into :: (&Self) -> () {
        return ()
    }
}

impl From[()] for () {
    from :: (value: ()) -> () {
        return ()
    }
}

convert :: (T: type, c: &$S) #macro {
    if const T == S then *c else c.into()
}

Clone :: trait {
    clone :: (&Self) -> Self;
}

impl Clone for string {
    clone :: (&Self) -> Self {
        return *self
    }
}

Equatable :: trait(T: type) {
    equal :: (&Self, &T) -> bool;
}

impl Equatable[int] for int {
    equal :: (&Self, other: &int) -> bool {
        return *self == *other
    }
}

// impl(F: type, T: type) From[F] for T if F : Into[T], #notyet {
//     from :: (value: F) -> T {
//         return F.into(value)
//     }
// }

// impl(F: type, T: type) Into[T] for F if T : From[F], #notyet {
//     into :: (&Self) -> T {
//         return T.from(self)
//     }
// }

// Ranges
Range :: struct(T: type) {
    start : T = default
    end   : T = default
}

RangeInclusive :: struct(T: type) {
    start : T = default
    end   : T = default
}

RangeFrom :: struct(T: type) {
    start : T = default
}

RangeTo :: struct(T: type) {
    end : T = default
}

RangeToInclusive :: struct(T: type) {
    end : T = default
}

RangeFull :: struct {}

impl(T: type) Range[T] {
    reverse :: (self: Range[T]) -> Range[T] {
        return Range[T](self.end - 1, self.start - 1)
    }
}

impl string {
    get_index :: (Self, index: int) -> &u8 #operator("[]") {
        return self.bytes[index]
    }

    get_range :: (Self, range: Range[int]) -> string #operator("[]") {
        data := int(self.bytes.data) + range.start
        length := range.end - range.start
        return string(cast data, length)
    }

    get_range_inclusive :: (Self, range: RangeInclusive[int]) -> string #operator("[]") {
        data := int(self.bytes.data) + range.start
        length := range.end - range.start + 1
        return string(cast data, length)
    }

    get_range_to :: (Self, range: RangeTo[int]) -> string #operator("[]") {
        @assert(range.end >= 0 and range.end <= self.bytes.length)
        data := int(self.bytes.data)
        length := range.end
        return string(cast data, length)
    }

    get_range_to_incl :: (Self, range: RangeToInclusive[int]) -> string #operator("[]") {
        @assert(range.end >= 0 and range.end < self.bytes.length)
        data := int(self.bytes.data)
        length := range.end + 1
        return string(cast data, length)
    }

    get_range_from :: (Self, range: RangeFrom[int]) -> string #operator("[]") {
        if !(range.start >= 0 and range.start <= self.bytes.length) {
            _C.printf("%lld, %lld`n", range.start, self.bytes.length)
        }
        @assert(range.start >= 0 and range.start <= self.bytes.length)
        data := int(self.bytes.data) + range.start
        length := self.bytes.length - range.start
        return string(cast data, length)
    }

    get_range_full :: (Self, range: RangeFull) -> string #operator("[]") {
        return self
    }
}

impl(T: type) []T {
    get_index :: (Self, index: int) -> &T #operator("[]") {
        return &*pointer_add_sized(self.data, index)
        // return cast(^T) int(self.data) + index * @sizeof(T)
    }

    get_range :: (Self, range: Range[int]) -> []T #operator("[]") {
        result := self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = range.end - range.start
        return result
    }

    get_range_inclusive :: (Self, range: RangeInclusive[int]) -> []T #operator("[]") {
        result := self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = range.end - range.start + 1
        return result
    }

    get_range_to :: (Self, range: RangeTo[int]) -> []T #operator("[]") {
        @assert(range.end >= 0 and range.end <= self.length)
        result := self
        result.length = range.end
        return result
    }

    get_range_to_incl :: (Self, range: RangeToInclusive[int]) -> []T #operator("[]") {
        @assert(range.end >= 0 and range.end < self.length)
        result := self
        result.length = range.end + 1
        return result
    }

    get_range_from :: (Self, range: RangeFrom[int]) -> []T #operator("[]") {
        @assert(range.start >= 0 and range.start <= self.length)
        result := self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = self.length - range.start
        return result
    }

    get_range_full :: (Self, range: RangeFull) -> []T #operator("[]") {
        return self
    }
}

impl(T: type, Size: int) [Size]T {
    get_index :: (&Self, index: int) -> &T #operator("[]") {
        return &*pointer_add_sized(self.data, index)
        // return *cast(^T) int(self.data) + index * @sizeof(T)
    }

    get_range :: (&Self, range: Range[int]) -> []T #operator("[]") {
        result : []T = *self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = range.end - range.start
        return result
    }

    get_range_inclusive :: (&Self, range: RangeInclusive[int]) -> []T #operator("[]") {
        result : []T = *self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = range.end - range.start + 1
        return result
    }

    get_range_to :: (&Self, range: RangeTo[int]) -> []T #operator("[]") {
        @assert(range.end >= 0 and range.end <= self.length)
        result : []T = *self
        result.length = range.end
        return result
    }

    get_range_to_incl :: (&Self, range: RangeToInclusive[int]) -> []T #operator("[]") {
        @assert(range.end >= 0 and range.end < self.length)
        result : []T = *self
        result.length = range.end + 1
        return result
    }

    get_range_from :: (&Self, range: RangeFrom[int]) -> []T #operator("[]") {
        @assert(range.start >= 0 and range.start <= self.length)
        result : []T = *self
        result.data = cast int(result.data) + range.start * @sizeof(T)
        result.length = self.length - range.start
        return result
    }

    get_range_full :: (&Self, range: RangeFull) -> []T #operator("[]") {
        return cast([]T) *self
    }
}

// standard for loops
for_extension_range :: (r: Range[$T], code: Code) #for {
    rev := r.end < r.start
    inc := if rev then T(-1) else T(1)

    compare :: @code(if rev then it > r.end else it < r.end)

    while (it, it_index) := (r.start, 0),
            @insert(compare, link=[it], _break={}, _continue={}),
            it_index += 1; it += inc {
        @insert(code, _break=break, _continue=continue)
    }
}

for_extension_range_inclusive :: (r: RangeInclusive[$T], code: Code, reverse: bool = false) #for {
    start, end, inc := {
        end := r.end
        if const reverse then (end, r.start, T(-1)) else (r.start, end, T(1))
    }

    compare :: @code(if const reverse then it >= end else it <= end)

    while (it, it_index) := (start, 0),
            @insert(compare, link=[it], _break={}, _continue={}),
            it_index += 1; it += inc {
        @insert(code, _break=break, _continue=continue)
    }
}

for_extension_range_from :: (r: RangeFrom[$T], code: Code) #for {
    while (it, it_index) := (r.start, 0), true, it_index += 1; it += 1 {
        @insert(code, _break=break, _continue=continue)
    }
}

for_extension_slice :: (arr: []$T, code: Code, reverse: bool = false, by_ref: bool = false) #for {
    while it_index := 0, it_index < arr.length, it_index += 1 {
        if const reverse {
            it_index_rev := arr.length - it_index - 1
            it := if const by_ref then arr[it_index_rev] else *arr[it_index_rev]
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            it := if const by_ref then arr[it_index] else *arr[it_index]
            @insert(code, _break=break, _continue=continue)
        }
    }
}

for_extension_array :: (arr: [$Size]$T, code: Code, reverse: bool = false, by_ref: bool = false) #for {
    while it_index := 0, it_index < arr.length, it_index += 1 {
        if const reverse {
            it_index_rev := arr.length - it_index - 1
            it := if const by_ref then &arr[it_index_rev] else arr[it_index_rev]
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            it := if const by_ref then &arr[it_index] else arr[it_index]
            @insert(code, _break=break, _continue=continue)
        }
    }
}
// trait stuff
__VTable :: struct {
    type_info : ^TypeInfo
}
__Trait :: struct {
    value  : ^void
    vtable : ^__VTable
}

Traits :: struct {
    from_vtable_and_pointer :: ($T: type, vtable: ^void, value: ^void) -> ^T {
        t := __Trait(value, vtable)
        return *cast(^^T)^t
    }

    destructure :: (trait_ptr: $T) -> (ptr: ^void, vtable: ^void) {
        fat := cast(^__Trait) ^trait_ptr
        return cast fat.value, cast fat.vtable
    }
}

//
__any :: struct {
    value       : ^void
    type_info   : ^TypeInfo
}

Any :: struct {
    from_pointers :: (value: ^void, type_info: ^TypeInfo) -> ^any {
        t := __any(value, type_info)
        return *cast(^^any)^t
    }

    destructure :: (trait_ptr: $T) -> (ptr: ^void, vtable: ^void) {
        fat := cast(^__any) ^trait_ptr
        return cast fat.value, cast fat.vtable
    }
}

//
__FatFunction :: struct {
    func : ^void
    data : ^void
}

FatFunctions :: struct {
}
impl FatFunctions {
    from_pointers :: ($T: type, func: ^void, data: ^void) -> T {
        t := __FatFunction(func, data)
        return *cast(^T)^t
    }
    destructure :: (func: $T, $FuncType: type = ^void, $DataType: type = ^void) -> (FuncType, DataType) {
        fat := cast(^__FatFunction) ^func
        return cast fat.func, cast fat.data
    }
}

// VTable :: struct {

// }

// impl VTable {

// }

// type info stuff
__ti_type_info := @type_info(TypeInfo)
TypeInfo :: trait {
    size        : int
    alignment   : int
    traits      : []TypeInfoTraitImpl
    impl_funcs  : []TypeInfoImplFunction
}

TypeInfoVoid :: struct TypeInfo {}
__ti_TypeInfoVoid := @type_info(TypeInfoVoid)
TypeInfoType :: struct TypeInfo {}
__ti_TypeInfoType := @type_info(TypeInfoType)
TypeInfoCode :: struct TypeInfo {}
__ti_TypeInfoCode := @type_info(TypeInfoCode)
TypeInfoFloat :: struct TypeInfo {}
__ti_TypeInfoFloat := @type_info(TypeInfoFloat)
TypeInfoBool :: struct TypeInfo {}
__ti_TypeInfoBool := @type_info(TypeInfoBool)
TypeInfoChar :: struct TypeInfo {}
__ti_TypeInfoChar := @type_info(TypeInfoChar)
TypeInfoString :: struct TypeInfo {}
__ti_TypeInfoString := @type_info(TypeInfoString)
TypeInfoAny :: struct TypeInfo {}
__ti_TypeInfoAny := @type_info(TypeInfoAny)

TypeInfoFunction :: struct TypeInfo {
    return_type : ^TypeInfo
    param_types : []^TypeInfo
}
impl TypeInfo for TypeInfoFunction {}
__ti_TypeInfoFunction := @type_info(TypeInfoFunction)

TypeInfoTuple :: struct TypeInfo {
    members : []TypeInfoTupleMember
}
__ti_TypeInfoTuple := @type_info(TypeInfoTuple)

TypeInfoInt :: struct TypeInfo {
    signed : bool
}
__ti_TypeInfoInt := @type_info(TypeInfoInt)

TypeInfoPointer :: struct TypeInfo {
    target : ^TypeInfo
    is_mut : bool
    is_fat : bool
}
__ti_TypeInfoPointer := @type_info(TypeInfoPointer)

TypeInfoReference :: struct TypeInfo {
    target : ^TypeInfo
    is_mut : bool
    is_fat : bool
}
__ti_TypeInfoReference := @type_info(TypeInfoReference)

TypeInfoSlice :: struct TypeInfo {
    target : ^TypeInfo
}
__ti_TypeInfoSlice := @type_info(TypeInfoSlice)

TypeInfoArray :: struct TypeInfo {
    count   : int
    target  : ^TypeInfo
}
__ti_TypeInfoArray := @type_info(TypeInfoArray)

TypeInfoTrait :: struct TypeInfo {
    name      : string
    functions : []TypeInfoTraitFunction
}
__ti_TypeInfoTrait := @type_info(TypeInfoTrait)

TypeInfoStruct :: struct TypeInfo {
    name    : string
    members : []TypeInfoStructMember
    // parameters    : []any
    // const_members : []TypeInfoStructMember
}
__ti_TypeInfoStruct := @type_info(TypeInfoStruct)

TypeInfoEnum :: struct TypeInfo {
    name     : string
    members  : []TypeInfoEnumMember
    tag_type : ^TypeInfo
}
__ti_TypeInfoEnum := @type_info(TypeInfoEnum)

// 

TypeInfoImplFunction :: struct #copy {
    typ     : ^TypeInfo
    name    : string
    pointer : fn()
}

TypeInfoTraitFunction :: struct #copy {
    name    : string
    offset  : int
}

TypeInfoStructMember :: struct #copy {
    index       : int
    offset      : int
    name        : string
    typ         : ^TypeInfo
    value       : ^any
    initializer : fn(^void)
    attributes  : []TypeInfoAttribute
}

TypeInfoTupleMember :: struct #copy {
    index       : int
    offset      : int
    typ         : ^TypeInfo
}

TypeInfoEnumMember :: struct #copy {
    name       : string
    typ        : ^TypeInfo
    tag        : int
    attributes : []TypeInfoAttribute
}

TypeInfoTraitImpl :: struct #copy {
    trait_type : ^TypeInfo
    vtable     : ^void
}

TypeInfoAttribute :: struct #copy {
    name : string
    args : []^any
}

// 

impl TypeInfo {
    get_trait_impl :: (&Self, $T: type) -> ^TypeInfoTraitImpl {
        ti := @type_info(T)
        for(by_ref=true) self.traits {
            if it.trait_type == ti {
                return ^*it
            }
        }
        return null
    }

    get_trait_function :: (&Self, $Trait: type, func_name: string, $F: type) -> F {
        ti_impl := self.get_trait_impl(Trait)
        if ti_impl == null {
            return null
        }

        ti_trait := cast(^TypeInfoTrait) ti_impl.trait_type
        vtable := ti_impl.vtable
        func_info := ti_trait.get_function(func_name)
        @assert(func_info != null)
        function := cast(F) *cast(^fn()) int(vtable) + func_info.offset
        return function
    }
}

impl TypeInfoStruct {
    has_member :: (&Self, name: string) -> bool {
        for(by_ref=true) members {
            if strings_equal(name, it.name) {
                return true
            }
        }
        return false
    }

    get_member :: (&Self, name: string) -> ^TypeInfoStructMember {
        for(by_ref=true) members {
            if strings_equal(name, it.name) {
                return ^*it
            }
        }
        return null
    }
}

impl TypeInfoEnum {
    get_enum_member :: (&Self, tag: int) -> ^TypeInfoEnumMember {
        for(by_ref=true) mem in members {
            if mem.tag == tag {
                return ^*mem
            }
        }

        return null
    }

    get_tag :: (&Self, value: ^void) -> int {
        return match self.tag_type {
            $ti if ti == @type_info(u8)  -> int(*cast(^u8)value)
            $ti if ti == @type_info(u16) -> int(*cast(^u16)value)
            $ti if ti == @type_info(u32) -> int(*cast(^u32)value)
            $ti if ti == @type_info(u64) -> int(*cast(^u64)value)
            $ti if ti == @type_info(i8)  -> int(*cast(^i8)value)
            $ti if ti == @type_info(i16) -> int(*cast(^i16)value)
            $ti if ti == @type_info(i32) -> int(*cast(^i32)value)
            $ti if ti == @type_info(i64) -> int(*cast(^i64)value)
            _ -> -1
        }
    }
}

impl TypeInfoTraitImpl {
    get_function :: (&Self, func_name: string, $F: type) -> F {
        ti_trait := cast(^TypeInfoTrait) self.trait_type
        func_info := ti_trait.get_function(func_name)
        @assert(func_info != null)
        function := cast(F) cast(^void) int(vtable) + func_info.offset
        return function
    }
}

impl TypeInfoAttribute {
    get_arg :: (&Self, index: int, $T: type) -> T {
        @assert(index >= 0 and index < self.args.length)

        arg := *self.args[index]
        @assert(@type_info(T) == @type_info_of_any(arg))

        return *cast(^T) arg
    }
}

impl TypeInfoStructMember {
    get_attribute :: (&Self, name: string) -> ^TypeInfoAttribute {
        for(by_ref=true) att in attributes {
            if strings_equal(att.name, name) {
                return ^*att
            }
        }

        return null
    }

    has_attribute :: (&Self, name: string) -> bool {
        for(by_ref=true) att in attributes {
            if strings_equal(att.name, name) {
                return true
            }
        }

        return false
    }
}

impl TypeInfoEnumMember {
    get_attribute :: (&Self, name: string) -> ^TypeInfoAttribute {
        for(by_ref=true) att in attributes {
            if strings_equal(att.name, name) {
                return ^*att
            }
        }

        return null
    }

    has_attribute :: (&Self, name: string) -> bool {
        for(by_ref=true) att in attributes {
            if strings_equal(att.name, name) {
                return true
            }
        }

        return false
    }
}

impl TypeInfoTrait {
    get_function :: (&Self, name: string) -> ^TypeInfoTraitFunction {
        for(by_ref=true) functions {
            if strings_equal(name, it.name) {
                return ^*it
            }
        }
        return null
    }
}

strings_not_equal :: (a: string, b: string) -> bool #operator("!=") {
    return !strings_equal(a, b)
}

strings_equal :: (a: string, b: string) -> bool #operator("==") {
    a_bytes := a.bytes
    b_bytes := b.bytes
    if a_bytes.length != b_bytes.length {
        return false
    }

    for 0..a_bytes.length {
        if *a_bytes[it] != *b_bytes[it] {
            return false
        }
    }

    return true
}

pointer_add_sized :: (ptr: ^$T, amount: int) -> ^T {
    return cast(^T)((cast(int) ptr) + amount * @sizeof(T))
}

pointer_add :: (ptr: ^$T, amount: int) -> ^T {
    return cast(^T)((cast(int) ptr) + amount)
}

max :: (a: $T, b: T) -> T { return if a >= b then a else b }
min :: (a: $T, b: T) -> T { return if a <= b then a else b }