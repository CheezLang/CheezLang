enum Option(T: type) {
    Some : T
    None
}

enum Result(V: type, E: type) {
    Ok  : V
    Err : E
}

use Option
use Result

trait From(T: type) {
    fn from(value: T) -> Self;
}

trait Into(T: type) {
    fn into(ref Self) -> T;
}

impl(F: type, T: type) From(F) for T if F : Into(T), #notyet {
    fn from(value: F) -> T {
        return value::into()
    }
}

impl(F: type, T: type) Into(T) for F if T : From(F), #notyet {
    fn into(ref Self) -> T {
        return T::from(self)
    }
}

// standard for loops
fn for_extension_range(r: $T..T, code: Code, reverse: bool = false, inclusive: bool = false) #for {
    let (start, end, inc) = {
        let end = if const inclusive then r.end else r.end - 1
        if const reverse then (end, r.start, -1) else (r.start, end, 1)
    }

    let const compare = @code(if const reverse then it >= end else it <= end)

    while let (it, it_index) = (start, 0),
        @insert(compare, link=[it]),
        it_index += 1; it += inc {
        @insert(code, _break=break, _continue=continue)
    }
}

fn for_extension_int(end: int, code: Code) #for {
    while let it_index = 0, it_index < end, it_index += 1 {
        let it = it_index
        @insert(code, _break=break, _continue=continue)
    }
}

fn for_extension_slice(arr: []$T, code: Code, reverse: bool = false, by_ref: bool = false) #for {
    while let it_index = 0, it_index < arr.length, it_index += 1 {
        if const reverse {
            let it_index_rev = arr.length - it_index - 1
            let it = if const by_ref then ref arr[it_index_rev] else arr[it_index_rev]
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            let it = if const by_ref then ref arr[it_index] else arr[it_index]
            @insert(code, _break=break, _continue=continue)
        }
    }
}

// fn for_extension_array(arr: [$Size]$T, code: Code, reverse: bool = false, by_ref: bool = false) #for {
//     while let it_index = 0, it_index < arr.length, it_index += 1 {
//         if const reverse {
//             let it_index_rev = arr.length - it_index - 1
//             let it = if const by_ref then ref arr[it_index_rev] else arr[it_index_rev]
//             @insert(code, link=[it_index_rev], _break=break, _continue=continue)
//         } else {
//             let it = if const by_ref then ref arr[it_index] else arr[it_index]
//             @insert(code, _break=break, _continue=continue)
//         }
//     }
// }
