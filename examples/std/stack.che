use import std.array
use import std.mem.allocator
use import std.mem.std_heap_allocator

#export_scope

Stack :: struct(T: type) {
    array: Array[T]
}

impl(T: type) Stack[T] {
    create :: (initial_capacity: int = 10, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        return Stack[T](
            array = Array[T].create(initial_capacity, allocator)
        )
    }

    reserve :: (&Self, size: int) {
        array.reserve(size)
    }

    push :: (&Self, item: T) {
        array.add(item)
    }

    pop :: (&Self) -> T {
        return array.pop()
    }

    peek :: (&Self) -> &T {
        @assert(array.length > 0)
        return array[array.length - 1]
    }

    empty :: (&Self) -> bool {
        return array.length == 0
    }
}