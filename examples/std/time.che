if const @is_os("windows") {
    import std.os.windows
    use import std.os.windows_functions
}
if const @is_os("linux") {
    linux :: import std.os.linux
}

#export_scope

get_time_microseconds :: () -> int {
    if const @is_os("windows") {
        freq := 1
        QueryPerformanceFrequency(^freq)

        time := 0
        QueryPerformanceCounter(^time)

        time *= 1000000
        time /= freq

        return time
    }
    if const @is_os("linux") {
        tv : timeval = default
        err := gettimeofday(^tv, null)
        if err == -1 {
            return -1
        }
        time_in_micros := 1000000 * int(tv.tv_sec) + int(tv.tv_usec)
        return time_in_micros
    }
}

get_time_milliseconds :: () -> int {
    if const @is_os("windows") {
        freq := 1
        QueryPerformanceFrequency(^freq)

        time := 0
        QueryPerformanceCounter(^time)

        time *= 1000000
        time /= freq

        return time / 1000
    }
    if const @is_os("linux") {
        tv : timeval = default
        err := gettimeofday(^tv, null)
        if err == -1 {
            return -1
        }
        time_in_micros := 1000000 * int(tv.tv_sec) + int(tv.tv_usec)
        return time_in_micros / 1000
    }
}