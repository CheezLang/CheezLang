use import std.mem.allocator
use import std.mem.std_heap_allocator
use import std.array
use import std.printable

util :: import std.util
io   :: import std.io
C    :: import std.c

#export_scope

ArenaAllocator :: struct {
    parent      : ^Allocator

    bucket_size : uint
    buckets     : Array[Bucket]
}

impl Drop for ArenaAllocator {
    drop :: (&Self) {
        for &buckets {
            parent.free(it.memory.data)
        }
    }
}

impl ArenaAllocator {
    new :: (size: uint, alloc: ^Allocator = ^DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        a := ArenaAllocator(
            parent      = alloc,
            bucket_size = size,
            buckets     = Array[Bucket].create()
        )
        return a
    }

    clear :: (&Self) {
        for i in 0..buckets.length {
            buckets[i].filled = 0
        }
    }

    dump :: (&Self, dump_buckets: bool = false) {
        io.printfln("ArenaAllocator ({} buckets)", buckets.length)
        for i in 0..buckets.length {
            bucket : &Bucket = buckets[i]

            io.printfln("  Bucket {}: {}/{} bytes", (i, bucket.filled, bucket.memory.length))
            if dump_buckets {
                current : uint = 0

                while current < bucket.filled {
                    len := *cast(^uint)util.pointer_add(bucket.memory.data, cast(int)current)
                    if len == 0 {
                        current += 8
                        continue
                    }

                    io.printfln("    {}: {} bytes", (current, len))

                    // find next allocation
                    current += len + 8
                    current = align(current, 8)
                }
            }
        }
    }
}

impl Allocator for ArenaAllocator {
    allocate :: (&Self, count: u64, elementSize: u64, alignment: u64) -> ^void {
        required_size := count * elementSize + 8
        if alignment < 8 {
            alignment = 8
        }

        // find bucket with enough room for required size
        free_bucket : ^Bucket = null
        for i in 0..buckets.length {
            bucket : &Bucket = buckets[i]
            if bucket.can_store(required_size, alignment) {
                free_bucket = ^*bucket
                break
            }
        }

        // no bucket with enough space
        if free_bucket == null {
            new_bucket_size := required_size * 2
            if new_bucket_size < bucket_size {
                new_bucket_size = bucket_size
            }

            new_mem : []u8 = cast(^u8) parent.allocate(new_bucket_size, @sizeof(u8), alignment)
            new_mem.length = cast new_bucket_size
            buckets.add(Bucket(memory = new_mem, filled = 0))

            free_bucket = ^*buckets[buckets.length - 1]
        }

        ptr := free_bucket.allocate(required_size, alignment)
        len_ptr := cast(^uint)ptr
        *len_ptr = count * elementSize
        return util.pointer_add(ptr, 8)
    }

    reallocate :: (&Self, mem: ^void, count: u64, elementSize: u64, alignment: u64) -> ^void {
        if mem == null {
            return allocate(count, elementSize, alignment)
        } else {
            len := *cast(^uint)util.pointer_add(mem, -8)

            if len >= count * elementSize {
                return mem
            }

            new_mem := allocate(count, elementSize, alignment)
            C.memcpy(new_mem, mem, len)
            return new_mem
        }
    }

    free :: (&Self, mem: ^void) {
        // do nothing
    }
}

#file_scope

align :: (add: uint, align: uint) -> uint {
    mul := add + align - 1
    mul -= (mul % align)
    
    return mul
}


Bucket :: struct {
    memory  : []u8
    filled  : uint
}

impl Bucket {
    can_store :: (&Self, size: uint, align: uint) -> bool {
        next_address := util.next_aligned(util.pointer_add(memory.data, cast(int)filled), align)
        next_offset := (cast(uint)next_address) - (cast(uint)memory.data)
        free := (cast(uint)memory.length) - next_offset
        return free >= size
    }

    allocate :: (&Self, size: uint, align: uint) -> ^u8 {
        next_address := util.next_aligned(util.pointer_add(memory.data, cast(int)filled), align)
        next_offset := (cast(uint)next_address) - (cast(uint)memory.data)
        filled = next_offset + size
        return next_address
    }
}