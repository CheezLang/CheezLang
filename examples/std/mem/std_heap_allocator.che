#load("std:mem/allocator")
#load("std:mem/memory")

struct StdHeapAllocator {
    _unused: int = 0
}

impl Allocator for StdHeapAllocator {
    fn allocate(count: ulong, elementSize: ulong, alignment: ulong) -> any& {
        return c_malloc((int)(count * elementSize))
    }

    fn reallocate(mem: any&, count: ulong, elementSize: ulong, alignment: ulong) -> any& {
        return c_realloc(mem, (int)(count * elementSize))
    }

    fn free(mem: any&) {
        c_free(mem)
    }
}

let DEFAULT_STD_HEAP_ALLOCATOR = new StdHeapAllocator {}
