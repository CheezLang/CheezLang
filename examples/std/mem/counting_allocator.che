use import std.mem.allocator
use import std.mem.std_heap_allocator
C :: import std.c
io :: import std.io
util :: import std.util

CountingAllocator :: struct {
    parent    : ^Allocator
    allocated : u64
    freed     : u64
}

newCountingAllocator :: () -> CountingAllocator {
    return CountingAllocator(^DEFAULT_STD_HEAP_ALLOCATOR, 0, 0)
}

newCountingAllocator2 :: (alloc: ^Allocator) -> CountingAllocator {
    return CountingAllocator(alloc, 0, 0)
}

impl CountingAllocator {
    printDiagnostics :: (&Self) {
        io.printfln("( Allocated: {}, Freed: {} )", (allocated, freed))
    }
}

impl Allocator for CountingAllocator {
    allocate :: (&Self, count: u64, elementSize: u64, alignment: u64) -> ^void {
        size := count * elementSize
        allocated += size

        mem := parent.allocate(size + @sizeof(u64), 1, alignment)

        // store size before allocated memory
        sizePtr := cast(^u64)mem
        *sizePtr = size

        return util.pointer_add(mem, @sizeof(u64))
    }

    reallocate :: (&Self, mem: ^void, count: u64, elementSize: u64, alignment: u64) -> ^void {
        size := count * elementSize
        actualMem := util.pointer_add(mem, -@sizeof(u64))
        
        {
            sizePtr := cast(^u64)actualMem
            allocated += size - *sizePtr
        }

        mem = parent.reallocate(actualMem, size + @sizeof(u64), 1, alignment)

        sizePtr := cast(^u64)mem
        *sizePtr = size
        return util.pointer_add(mem, @sizeof(u64))
    }

    free :: (&Self, mem: ^void) {
        actualMem := util.pointer_add(mem, -@sizeof(u64))
        sizePtr := cast(^u64)actualMem
        freed += *sizePtr
        parent.free(actualMem)
    }
}
