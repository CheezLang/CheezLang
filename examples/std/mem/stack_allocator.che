#load("allocator.che")
#load("std_heap_allocator.che")
#load("../array.che")
#load("../util.che")

fn NextAligned(add: $T&, align: ulong) -> T& {
    let add = (ulong)add
    let mul = add + align - 1
    mul -= (mul % align)
    
    return (T&)mul
}

struct StackAllocation {
    offset: ulong
    size: ulong
}

impl Printable for StackAllocation {
    fn Print(str: String&, format: char[]) {
        Sprintf(str, "({}:{})", [offset, size])
    }
}

struct StackAllocator {
    parent: Allocator

    memory: byte&
    capacity: ulong

    allocations: Array(StackAllocation)
}

impl Printable for StackAllocator {
    fn Print(s: String&, format: char[]) {
        s.AppendString("( [")
        while let i: uint = 0; i < allocations.length; i += 1 {
            if i > 0 {
                s.AppendString(", ")
            }
            let a = allocations.Get(i)
            Sprintf(s, "{}", [a])
        }
        s.AppendString("]")

        let free: ulong = capacity
        let lastAllocation = self.GetLastAllocation()
        if lastAllocation != null {
            free = capacity - (lastAllocation.offset + lastAllocation.size)
        }
        Sprintf(s, ", Free: {} )", [free])
    }
}

fn NewStackAllocator(size: ulong) -> StackAllocator {
    let a = new StackAllocator {
        parent = new StdHeapAllocator {}
        memory = null
        capacity = 0
        allocations = (Array(StackAllocation))NewArray()
    }
    a.Reserve(size)
    return a
}

fn NewStackAllocator2(size: ulong, alloc: Allocator) -> StackAllocator {
    let a = new StackAllocator {
        parent = alloc
        memory = null
        capacity = 0
        allocations = (Array(StackAllocation))NewArray()
    }
    a.Reserve(size)
    return a
}

impl StackAllocator {
    ref fn Reserve(s: ulong) {
        if s <= capacity {
            return
        }
        capacity = s

        if memory == null {
            memory = parent.allocate(capacity, @sizeof(byte), 8)
        }
        else {
            memory = parent.reallocate(memory, capacity, @sizeof(byte), 8)
        }
    }

    ref fn Clear() {
        allocations.length = 0
    }

    ref fn Dispose() {
        self.Clear()
        parent.free(memory)
        allocations.Dispose()
    }

    ref fn PrintDiagnostics() {
        let s = NewString()
        defer s.Dispose()
        s.AppendString("( [")
        while let i: uint = 0; i < allocations.length; i += 1 {
            if i > 0 {
                s.AppendString(", ")
            }
            let a = allocations.Get(i)
            Sprintf(&s, "{}", [a])
        }
        s.AppendString("]")

        let free: ulong = capacity
        let lastAllocation = self.GetLastAllocation()
        if lastAllocation != null {
            free = capacity - (lastAllocation.offset + lastAllocation.size)
        }
        Sprintf(&s, ", Free: {} )", [free])
        Println(s)
    }

    ref fn GetLastAllocation() -> StackAllocation& {
        if allocations.length == 0 {
            return null
        } else {
            return &allocations.data[allocations.length - 1]
        }
    }

    ref fn GetNextAllocationOffset() -> ulong {
        let last = self.GetLastAllocation()
        if last == null {
            return 0
        } else {
            return last.offset + last.size
        }
    }
}

impl Allocator for StackAllocator {
    fn allocate(count: ulong, elementSize: ulong, alignment: ulong) -> any& {
        let nao = self.GetNextAllocationOffset()
        let nextAddress = PointerAdd(memory, (long)nao)
        nextAddress = NextAligned(nextAddress, alignment)

        let newAllocation = new StackAllocation {
            offset = (ulong)((ulong)nextAddress - (ulong)memory)
            size = count * elementSize
        }

        let end = newAllocation.offset + newAllocation.size

        if end > capacity {
            self.Reserve(2 * end)
        }

        allocations.Add(newAllocation)
        return nextAddress
    }

    fn reallocate(mem: any&, count: ulong, elementSize: ulong, alignment: ulong) -> any& {
        let size = count * elementSize

        let lastAllocation = self.GetLastAllocation()
        if lastAllocation == null {
            return null
        }

        let lastAllocationAddress = PointerAdd(memory, lastAllocation.offset)
        if mem == lastAllocationAddress {
            let newEnd = lastAllocation.offset + size
            if newEnd > capacity {
                self.Reserve(2 * newEnd)
            }

            lastAllocation.size = size
            return mem
        } else {
            let newMem = self.allocate(count, elementSize, 8)
            memcpy(newMem, mem, (int)size)
            return newMem
        }
    }

    fn free(mem: any&) {
        let lastAllocation = self.GetLastAllocation()
        if lastAllocation == null {
            return
        }
        if mem == PointerAdd(memory, lastAllocation.offset) {
            allocations.length -= 1
        }
    }
}
