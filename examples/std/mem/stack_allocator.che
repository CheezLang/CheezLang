#load("std:mem/allocator")
#load("std:mem/std_heap_allocator")
#load("std:array")
#load("std:util")
#load("std:printable")

StackAllocation :: struct {
    offset  : u64 = 0
    size    : u64 = 0
}

impl Printable for StackAllocation {
    print :: (ref Self, str: ref String, format: string) {
        str.appendf("({}:{})", (offset, size))
    }
}

StackAllocator :: struct {
    parent: Allocator

    memory: &void
    capacity: u64

    allocations: Array[StackAllocation]
}

impl Drop for StackAllocator {
    drop :: (ref Self) {
        self.clear()
        parent.free(memory)
    }
}

impl Printable for StackAllocator {
    print :: (ref Self, s: ref String, format: string) {
        s += "( ["
        for i : 0..allocations.length {
            if i > 0 {
                s += ", "
            }
            s.appendf("{}", allocations[i])
        }
        s += "]"

        free : u64 = capacity
        if lastAllocation := self.getLastAllocation(), lastAllocation != null {
            free = capacity - (lastAllocation.offset + lastAllocation.size)
        }
        s.appendf(", Free: {} )", free)
    }
}

impl StackAllocator {
    create :: (size: u64, alloc: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        a := StackAllocator(
            parent = alloc
            memory = null
            capacity = 0
            allocations = Array[StackAllocation].create()
        )
        a.reserve(size)
        return a
    }

    reserve :: (ref Self, s: u64) {
        if s <= capacity {
            return
        }
        capacity = s

        if memory == null {
            memory = parent.allocate(capacity, @sizeof(i8), 8)
        } else {
            memory = parent.reallocate(memory, capacity, @sizeof(i8), 8)
        }
    }

    clear :: (ref Self) {
        allocations.resize(0)
    }

    print_diagnostics :: (ref Self) {
        s := String.empty()
        s += "( ["
        for i : 0..allocations.length {
            if i > 0 {
                s += ", "
            }
            s.appendf("{}", allocations[i])
        }
        s += "]"

        free : u64 = capacity

        if lastAllocation := self.getLastAllocation(), lastAllocation != null {
            free = capacity - (lastAllocation.offset + lastAllocation.size)
        }
        s.appendf(", Free: {} )`n", free)
        print_string(s)
    }

    getLastAllocation :: (ref Self) -> &StackAllocation {
        if allocations.length == 0 {
            return null
        } else {
            return &allocations[allocations.length - 1]
        }
    }

    getNextAllocationOffset :: (ref Self) -> u64 {
        if last := self.getLastAllocation(), last == null {
            return 0
        } else {
            return last.offset + last.size
        }
    }
}

impl Allocator for StackAllocator {
    allocate :: (ref Self, count: u64, elementSize: u64, alignment: u64) -> &void {

        nextAddress := {
            unaligned := pointer_add(memory, cast(i64) self.getNextAllocationOffset())
            next_aligned(unaligned, alignment)
        }

        newAllocation := StackAllocation(
            offset = (cast(u64) nextAddress) - (cast(u64) memory)
            size = count * elementSize
        )

        end := newAllocation.offset + newAllocation.size

        if end > capacity {
            self.reserve(2 * end)
        }

        allocations.add(newAllocation)

        return nextAddress
    }

    reallocate :: (ref Self, mem: &void, count: u64, elementSize: u64, alignment: u64) -> &void {
        size := count * elementSize

        lastAllocation := self.getLastAllocation()
        if lastAllocation == null {
            return null
        }

        lastAllocationAddress := pointer_add(memory, cast(i64) lastAllocation.offset)
        if mem == lastAllocationAddress {
            newEnd := lastAllocation.offset + size
            if newEnd > capacity {
                self.reserve(2 * newEnd)
            }

            lastAllocation.size = size
            return mem
        } else {
            newMem := self.allocate(count, elementSize, 8)
            c_memcpy(newMem, mem, cast(uint) size)
            return newMem
        }
    }

    free :: (ref Self, mem: &void) {
        lastAllocation := self.getLastAllocation()
        if lastAllocation == null {
            return
        }
        if mem == pointer_add(memory, cast(i64) lastAllocation.offset) {
            allocations.resize(allocations.length - 1)
        }
    }
}
