#load("std:preload")
#load("std:string")
#load("std:math")

trait Printable {
    print :: (ref Self, str: ref String, format: string);
}

impl Printable for c_string {
    print :: (ref Self, str: ref String, format: string) {
        str += self
    }
}

impl Printable for string {
    print :: (ref Self, str: ref String, format: string) {
        str += self
    }
}

impl Printable for char {
    print :: (ref Self, str: ref String, format: string) {
        str += self
    }
}

impl Printable for float {
    print :: (ref Self, str: ref String, format: string) {
        buff : string = @alloca(char, 128)
        buff.length = c_sprintf(buff.data, "%g", double(self))
        str += buff
    }
}

impl Printable for double {
    print :: (ref Self, str: ref String, format: string) {
        buff : string = @alloca(char, 128)
        buff.length = c_sprintf(buff.data, "%g", self)
        str += buff
    }
}

impl Printable for bool {
    print :: (ref Self, str: ref String, format: string) {
        str += if streq(format, "b") {
            if self {"1"} else {"0"}
        } else if streq(format, "s") {
            if self {"t"} else {"f"}
        } else {
            if self {"true"} else {"false"}
        }
    }
}

impl Printable for i8 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for i16 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for i32 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for i64 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for u8 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for u16 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for u32 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

impl Printable for u64 {
    print :: (ref Self, str: ref String, format: string) {
        printf_int_to_string(str, self, format)
    }
}

printf_int_to_string :: (str: ref String, i: $T, format: string) {
    base := if streq("b", format) then 2
    else if streq("x", format) then 16
    else 10
    format_int(str, i, base)
}

impl(T: type) Printable for Option[T] if T: Printable {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            Some($v) -> str.appendf("Some({})", v)
            None -> str.append_string("None")
        }
    }
}

impl(V: type, E: type) Printable for Result[V, E] if V: Printable, E: Printable {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            Ok($v)  -> str.appendf("Ok({})", v)
            Err($v) -> str.appendf("Err({})", v)
        }
    }
}

impl Printable for Complex {
    print :: (ref Self, str: ref String, format: string) {
        str.appendf("{} + {}i", (r, i))
    }
}
