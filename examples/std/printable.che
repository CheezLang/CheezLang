use import std.array
use import std.hash_table
use import std.string
use import std.box
use import std.math

C   :: import std.c
io  :: import std.io
fmt :: import std.fmt

#export_scope

Printable :: trait {
    print :: (&Self, str: &String, format: string);
}

impl Printable for () {
    print :: (&Self, str: &String, format: string) {
        str += "()"
    }
}

impl Printable for string {
    print :: (&Self, str: &String, format: string) {
        str.append_string(*self)
    }
}

impl Printable for char8 {
    print :: (&Self, str: &String, format: string) {
        str.append_char(cast *self)
    }
}

impl Printable for char16 {
    print :: (&Self, str: &String, format: string) {
        str.append_char(cast *self)
    }
}

impl Printable for char32 {
    print :: (&Self, str: &String, format: string) {
        str.append_char(*self)
    }
}

impl Printable for float {
    print :: (&Self, str: &String, format: string) {
        buff : []char8 = @alloca(char8, 128)
        buff.length = C.sprintf(buff.data, "%g", double(*self))
        str.append_cstring(buff.data)
    }
}

impl Printable for double {
    print :: (&Self, str: &String, format: string) {
        buff : []char8 = @alloca(char8, 128)
        buff.length = C.sprintf(buff.data, "%g", self)
        str.append_cstring(buff.data)
    }
}

impl Printable for bool {
    print :: (&Self, str: &String, format: string) {
        str.append_string(if streq(format, "b") {
            if *self {"1"} else {"0"}
        } else if streq(format, "s") {
            if *self {"t"} else {"f"}
        } else {
            if *self {"true"} else {"false"}
        })
    }
}

impl Printable for i8 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for i16 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for i32 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for i64 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for u8 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for u16 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for u32 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl Printable for u64 {
    print :: (&Self, str: &String, format: string) {
        printf_int_to_string(str, *self, format)
    }
}

impl(T: type) Printable for Option[T] if T: Printable {
    print :: (&Self, str: &String, format: string) {
        match self {
            Some($v) -> {
                v_str := fmt.format("Some({})", [^v])
                str.append(&v_str)
            }
            None -> str.append_string("None")
        }
    }
}

impl(T: type) Printable for Array[T] if T: Printable {
    print :: (&Self, str: &String, format: string) {
        str += "["
        for(by_ref=true) v in self.slice() {
            if it_index > 0 {
                str += ", "
            }
            v.print(str, "")
        }
        str += "]"
    }
}

impl(K: type, V: type) Printable for Table[K, V] if K: Printable, V: Printable {
    print :: (&Self, str: &String, format: string) {
        str += "{"
        for v in self {
            if it_index > 0 {
                str += ", "
            }
            v.name.print(str, "")
            str += ": "
            v.value.print(str, "")
        }
        str += "}"
    }
}

impl(T: type) Printable for Box[T] {
    print :: (&Self, str: &String, format: string) {
        msg := fmt.format("Box({})", [value])
        str.append(&msg)
    }
}

impl(V: type, E: type) Printable for Result[V, E] if V: Printable, E: Printable {
    print :: (&Self, str: &String, format: string) {
        match self {
            Ok($v)  -> str.appendf("Ok({})", fmt.format_any(v))
            Err($v) -> str.appendf("Err({})", fmt.format_any(v))
        }
    }
}

impl Printable for Complex {
    print :: (&Self, str: &String, format: string) {
        str.appendf("{} + {}i", (r, i))
    }
}

impl Printable for TypeInfo {
    print :: (&Self, str: &String, format: string) {
        print_func := self.get_trait_function(Printable, "print", fn(^void, &String, string))
        if print_func != null {
            print_func(Traits.destructure(^self).ptr, str, "")
        } else {
            str += "TypeInfo<unknown>"
        }
    }
}
impl Printable for TypeInfoVoid {
    print :: (&Self, str: &String, format: string) {
        str += "void"
    }
}
impl Printable for TypeInfoType {
    print :: (&Self, str: &String, format: string) {
        str += "type"
    }
}
impl Printable for TypeInfoFloat {
    print :: (&Self, str: &String, format: string) {
        str.append_string(match self.size {
            4 -> "f32"
            8 -> "f64"
            _ -> @assert(false)
        })
    }
}
impl Printable for TypeInfoBool {
    print :: (&Self, str: &String, format: string) {
        str += "bool"
    }
}
impl Printable for TypeInfoChar {
    print :: (&Self, str: &String, format: string) {
        str.append_string(match self.size {
            1 -> "char8"
            2 -> "char16"
            4 -> "char32"
            _ -> @assert(false)
        })
    }
}
impl Printable for TypeInfoString {
    print :: (&Self, str: &String, format: string) {
        str += "string"
    }
}
impl Printable for TypeInfoAny {
    print :: (&Self, str: &String, format: string) {
        str += "any"
    }
}
impl Printable for TypeInfoFunction {
    print :: (&Self, str: &String, format: string) {
        str += "fn ("
        for param_type in self.param_types {
            if it_index > 0 { str += ", " }
            fmt.format_into(str, "{}", [param_type])
        }
        str += ") -> "
        fmt.format_into(str, "{}", [self.return_type])
    }
}
impl Printable for TypeInfoTuple {
    print :: (&Self, str: &String, format: string) {
        str += "TODO: printable for TypeInfoTuple"
    }
}
impl Printable for TypeInfoInt {
    print :: (&Self, str: &String, format: string) {
        str.append_string(match (self.size, self.signed) {
            (1, true)  -> "i8"
            (2, true)  -> "i16"
            (4, true)  -> "i32"
            (8, true)  -> "i64"
            (1, false) -> "u8"
            (2, false) -> "u16"
            (4, false) -> "u32"
            (8, false) -> "u64"
            _ -> @assert(false)
        })
    }
}
impl Printable for TypeInfoPointer {
    print :: (&Self, str: &String, format: string) {
        str += "^"
        if self.is_mut {
            str += "mut "
        }
        fmt.format_into(str, "{}", [target])
    }
}
impl Printable for TypeInfoReference {
    print :: (&Self, str: &String, format: string) {
        str += "&"
        if self.is_mut {
            str += "mut "
        }
        fmt.format_into(str, "{}", [target])
    }
}
impl Printable for TypeInfoSlice {
    print :: (&Self, str: &String, format: string) {
        str += "[]"
        fmt.format_into(str, "{}", [target])
    }
}
impl Printable for TypeInfoArray {
    print :: (&Self, str: &String, format: string) {
        str.appendf("[{}]", count)
        fmt.format_into(str, "{}", [target])
    }
}
impl Printable for TypeInfoTrait {
    print :: (&Self, str: &String, format: string) {
        if format == "?" {
            fmt.format_into(str, "trait {} ``{`n", [self.name])
            // @todo
            // for mem in self.members {
            //     fmt.format_into(str, "    {} : {}`n", [mem.name, mem.typ])
            // }
            str += "}"
        } else {
            str += self.name
        }
    }
}
impl Printable for TypeInfoStruct {
    print :: (&Self, str: &String, format: string) {
        if format == "?" {
            fmt.format_into(str, "struct {} ``{`n", [self.name])
            for mem in self.members {
                fmt.format_into(str, "    {} : {}`n", [mem.name, mem.typ])
            }
            str += "}"
        } else {
            str += self.name
        }
    }
}
impl Printable for TypeInfoEnum {
    print :: (&Self, str: &String, format: string) {
        if format == "?" {
            fmt.format_into(str, "enum {} ``{`n", [self.name])
            // @todo
            // for mem in self.members {
            //     fmt.format_into(str, "    {} : {}`n", [mem.name, mem.typ])
            // }
            str += "}"
        } else {
            str += self.name
        }
    }
}

#file_scope
printf_int_to_string :: (str: &String, i: $T, format: string) {
    base := if streq("b", format) then 2
    else if streq("x", format) then 16
    else 10
    fmt.format_int(str, i, base)
}
