use import std.string
use import std.printable
c :: import std.c

use import std.os.windows
use import std.os.windows_functions

#export_scope
println :: (v: $T) {
    s := String.empty()
    s.appendf("{}`n", v)
    print_string(s)
}

print :: (v: $T) {
    s := String.empty()
    s.appendf("{}", v)
    print_string(s)
}

printf :: (format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    print_string(s)
}

printfln :: (format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    s += '`n'
    print_string(s)
}


#file_scope

print_string :: (s: ref String) {
    mode := 0u32
    if GetConsoleMode(__std_out_handle, &mode) == 0 {
        // no console handle, use WriteFileW
        bytesWritten := 0u32
        WriteFile(__std_out_handle, cast s.get_raw(), cast s.get_length(), &bytesWritten, null)
    } else {
        match s.slice().to_utf16() {
            Ok($str) -> {
                bytesWritten := 0u32
                WriteConsoleW(__std_out_handle, cast str.get_raw(), cast str.get_length(), &bytesWritten, null)
            }
            Err -> {
                c.puts("print_string failed")
                c.printf("%.*s", cast(i32) s.get_length(), s.get_raw())
            }
        }
    }

}
