use import std.mem.allocator

#export_scope

Box :: struct(T: type) {
    _value: ^T
}

impl(T: type) Box[T] {
    // create :: (v: T) -> Box[T] {
    //     p := alloc(T)
    //     *p = v
    //     return Box[T](p)
    // }

    new :: (v: $T2) -> Box[T] {
        p := alloc(T2)
        *p = v
        return Box[T](cast p)
    }

    empty :: () -> Box[T] {
        return Box[T](null)
    }

    from_pointer :: (ptr: ^T) -> Box[T] {
        return Box[T](ptr)
    }

    value :: (&Self) -> &T {
        @assert(_value != null)
        return *_value
    }

    get :: (&Self) -> &T {
        @assert(_value != null)
        return *_value
    }
}

impl(T: type) Drop for Box[T] {
    drop :: (&Self) {
        free(_value)
        _value = null
    }
}