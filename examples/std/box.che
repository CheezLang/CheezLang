#load("std:mem/allocator")

struct Box(T: type) {
    _value: &T
}

impl(T: type) Box[T] {
    fn create(v: T = default) -> Box[T] {
        let p = alloc(T)
        <<p = v
        return Box[T](p)
    }

    fn value(ref Self) -> ref T {
        return <<_value
    }
}

impl(T: type) Drop for Box[T] {
    fn drop(ref Self) {
        free(_value)
        _value = null
    }
}