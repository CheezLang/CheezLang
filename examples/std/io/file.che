use import std.os.windows
use import std.os.windows_functions
use import std.os.windows_types
use import std.os.windows_constants
use import std.string
C   :: import std.c
io  :: import std.io
fmt :: import std.fmt
mem :: import std.mem.allocator

#export_scope

load_file :: (filename: string) -> Result[String, String] {
    str_c := @alloca(char8, filename.bytes.length + 1)
    *str_c[filename.bytes.length] = char8(0)
    C.memcpy(cast str_c.data, cast filename.bytes.data, cast filename.bytes.length)
    return load_filec(str_c.data)
}

load_filec :: (filename: c_string) -> Result[String, String] {
    content := String.empty()

    handle := CreateFileA(cast filename, GENERIC_READ, FILE_SHARE_READ, null, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, null)
    if (cast(int)handle) == -1 {
        lastError := GetLastError()
        return Err(fmt.format("failed to open file: 0x{:x}", [lastError]))
    }

    size : int = 0
    if GetFileSizeEx(handle, ^size) == 0 {
        lastError := GetLastError()
        return Err(fmt.format("failed to get file size: 0x{:x}", [lastError]))
    }

    content.resize(size)
    
    bytesRead : u32 = 0
    if ReadFile(handle, content.get_raw(), cast(u32)size, ^bytesRead, null) == 0 {
        lastError := GetLastError()
        return Err(fmt.format("failed to read content: 0x{:x}", [lastError]))
    }

    if CloseHandle(handle) == 0 {
        lastError := GetLastError()
        return Err(fmt.format("failed to close handle: 0x{:x}", [lastError]))
    }

    return Ok(content)
}

load_filecb :: (filename: c_string) -> Option[[]u8] {
    handle := CreateFileA(cast filename, GENERIC_READ, FILE_SHARE_READ, null, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, null)
    if (cast(int)handle) == -1 {
        return None
    }

    size : int = 0
    if GetFileSizeEx(handle, ^size) == 0 {
        return None
    }

    content := mem.alloc_n(u8, cast size)
    
    bytesRead : u32 = 0
    if ReadFile(handle, cast content.data, cast(u32)size, ^bytesRead, null) == 0 {
        mem.free_n(content)
        return None
    }

    if CloseHandle(handle) == 0 {
        mem.free_n(content)
        return None
    }

    return Some(content)
}

write_filecb :: (filename: c_string, data: []u8) -> bool {
    handle := CreateFileA(cast filename, GENERIC_WRITE, FILE_SHARE_WRITE, null, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, null)
    if (cast(int)handle) == -1 {
        io.println("failed to create file")
        return false
    }

    bytesRead : u32 = 0
    if WriteFile(handle, cast data.data, cast(u32)data.length, ^bytesRead, null) == 0 {
        io.println("failed to write data")
        return false
    }

    if CloseHandle(handle) == 0 {
        io.println("failed to close handle")
        return false
    }

    return true
}

write_file_string :: (filename: string, str: string) -> bool {
    filename_c := {
        str_c := @alloca(char8, filename.bytes.length + 1)
        *str_c[filename.bytes.length] = char8(0)
        C.memcpy(cast str_c.data, cast filename.bytes.data, cast filename.bytes.length)
        str_c.data
    }

    handle := CreateFileA(cast filename_c, GENERIC_WRITE, FILE_SHARE_WRITE, null, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, null)
    if (cast(int)handle) == -1 {
        io.println("failed to create file")
        return false
    }

    bytesRead : u32 = 0
    if WriteFile(handle, cast str.bytes.data, cast(u32)str.bytes.length, ^bytesRead, null) == 0 {
        io.println("failed to write data")
        return false
    }

    if CloseHandle(handle) == 0 {
        io.println("failed to close handle")
        return false
    }

    return true
}

// get_working_dir :: () -> wd: String {
//     len := cast(int) GetCurrentDirectory(0, null)

//     wd = String.empty()
//     wd.reserve(len)
//     wd.resize(len - 1)
//     GetCurrentDirectory(cast wd.length, wd.get_raw())
// }
