#load("../string.che")
#load("../mem/memory.che")
#load("../os/windows.che")

fn sprintf(buff: char&, f: string, a: double) #varargs;

let NEW_LINE: char = '`n'

fn PrintString(s: $T) {
    let s = (string)s
    let len = strlen(s)
    let bytesWritten: int
    WriteFile(__std_out_handle, s, len, &bytesWritten, 0)
}

fn PrintStringl(s: String&) {
    let bytesWritten: int
    WriteFile(__std_out_handle, (string)s.data, s.length, &bytesWritten, 0)
}

fn PrintChar(c: char) { 
    let bytesWritten: int
    WriteFile(__std_out_handle, (string)&c, 1, &bytesWritten, 0)
}

fn PrintFloat(val: float) {
    let buff: char[32]
    let buff: char[] = buff
    sprintf((char&)buff, "%f", (double)val)
    PrintString((string)(char&)buff)
}

fn PrintDouble(val: double) {
    let buff: char[32]
    let buff: char[] = buff
    sprintf((char&)buff, "%f", val)
    PrintString((string)(char&)buff)
}

fn PrintInt(val: $T) {
    let v = val
    let len = 0

    let neg = false
    if v < 0 {
        neg = true
        len = 1
        v = -v
        val = -val
    }
    else if v == 0 {
        len = 1
    }

    while v != 0 {
        v = v / 10
        len = len + 1
    }


    let buffer: String = NewString()
    defer buffer.Dispose()
    buffer.Resize(len)

    if val == 0 {
        buffer.data[0] = '0'
    }
    else {
        let minimum = false
        if neg and val < 0 {
            // val is minimum value
            val = -(val + 1)
            minimum = true
        }

        let i = len - 1
        while val != 0 {
            defer i -= 1

            let lastDigit = val % 10
            if i == len - 1 and minimum {
                lastDigit = lastDigit + 1
            }

            val = val / 10
            buffer.data[i] = (char)(lastDigit + 48)
        }

        if (neg) {
            buffer.data[0] = '-'
        }
    }

    PrintStringl(&buffer)
}

fn Bprinti(buffer: String&, val: $T) {
    let v = val
    let len = 0

    let neg = false
    if v < 0 {
        neg = true
        len = 1
        v = -v
    }
    else if v == 0 {
        len = 1
    }

    while v != 0 {
        v = v / 10
        len = len + 1
    }

    if buffer.length + len > buffer.capacity {
        buffer.Reserve(buffer.length + len)
    }

    buffer.length = buffer.length + len
    
    if val == 0 {
        buffer.data[buffer.length - 1] = '0'
    }
    else {
        let minimum = false
        if neg and val < 0 {
            // val is minimum value
            val = -(val + 1)
            minimum = true
        }

        let i = buffer.length - 1
        while val != 0 {
            defer i -= 1
            let lastDigit = val % 10
            if i == len - 1 and minimum {
                lastDigit = lastDigit + 1
            }

            val = val / 10
            buffer.data[i] = (char)(lastDigit + 48)
        }

        if (neg) {
            buffer.data[i] = '-'
            i -= 1
        }
    }
}

fn Println(v: $T) {
    Print(v)
    PrintChar(NEW_LINE)
}

fn Print(v: $T) {
    if @isbool(T) {
        if v {
            PrintString("true")
        } else {
            PrintString("false")
        }
    } else if @isint(T) {
        PrintInt(v)
    } else if @typeseq(T, f64) {
        PrintDouble(v)
    } else if @isstring(T) {
        PrintString(v)
    } else if @typeseq(String, T) {
        PrintStringl(&v)
    } else if @typeseq(String&, T) {
        PrintStringl(v)
    } else if @isenum(T) {
        PrintInt((int)v)
    } else if @typeseq(T, char) {
        PrintChar((char)v)
    } else if @typeseq(T, $X[]) {
        PrintSlice(v)
    } else {
        @error(@typename(T))
    }
}

fn PrintSlice(slice: $T[]) {
    let i = 0

    Print("[")
    while i < slice.length {
        defer i += 1

        if i > 0 {
            Print(", ")
        }
        Print(slice[i])
    }
    Printf("].{i32}", slice.length)
}
/////////////////////////// new functions ///////////////////////////

trait Printable {
    fn Print(str: String&, format: char[]);
}

fn ParseInt(str: $String) -> int {
    let val = 0

    let i = 0
    while i < str::GetLength() {
        defer i += 1
        val *= 10
        val += (int)str::CharAt(i) - (int)'0'
    }

    return val
}

fn Printf(format: string, args: Printable[]) {
    let s = NewString()
    defer s.Dispose()

    Sprintf(&s, format, args)
    Println(s)
}

fn Sprintf(buffer: String&, format: string, args: Printable[]) {
    let formatSpecifier = NewString()
    defer formatSpecifier.Dispose()
    formatSpecifier.Reserve(5)

    let len = (ulong)format.GetLength()
    let i: ulong = 0
    let state = 0
    let argIndex = 0

    while i < len {
        defer i += 1

        let c = format[i]

        if state == 0 {
            if (c == '{') {
                state = 1
            }
            else {
                buffer.AppendChar(c)
            }
        }
        else if state == 1 {
            if (c == '}') {
                let format: char[] = []

                let colon = formatSpecifier.IndexOf(':')
                if colon >= 1 {
                    argIndex = ParseInt(formatSpecifier.SliceL(colon))
                }
                else if colon == -1 and formatSpecifier.GetLength() > 0 {
                    argIndex = ParseInt(formatSpecifier)
                }
                if (colon != -1) {
                    format = formatSpecifier.SliceF(colon + 1)
                }

                if argIndex >= args.length {
                    Println("argindex to large")
                    argIndex = 0
                    return
                }

                state = 0
                args[argIndex].Print(buffer, format)
                argIndex += 1
                formatSpecifier.length = 0

            } else {
                formatSpecifier.AppendChar(c)
            }
        }
    }
}

impl Printable for u8 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for u16 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for u32 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for u64 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for i8 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for i16 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for i32 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}

impl Printable for i64 {
    fn Print(str: String&, format: char[]) {
        Bprinti(str, <<self)
    }
}
