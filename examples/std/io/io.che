#load("std:string")
#load("std:printable")
#load("std:mem/memory")
//#load("std:os/windows")
#load("std:c")

fn print_string(s: ref String) {
    //bytesWritten := 0u32
    //WriteFile(__std_out_handle, cast s.get_raw(), cast s.length, &bytesWritten, null)
    c_printf("%.*s", cast(i32) s.get_length(), s.get_raw())
}

fn println(v: $T) {
    s := String.empty()
    s.appendf("{}`n", v)
    print_string(s)
}

fn print(v: $T) {
    s := String.empty()
    s.appendf("{}", v)
    print_string(s)
}

fn printf(format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    print_string(s)
}

fn printfln(format: string, args: $T) {
    s := String.empty()
    s.appendf(format, args)
    s += '`n'
    print_string(s)
}

// helper functions
fn parse_int(str: string) -> int {
    val := 0

    for c : str {
        val *= 10
        val += int(c - '0')
    }

    return val
}

fn digit_to_char(i: $T) -> char {
    c := char(i)
    return if i < 10 { c + '0' } else { (c - char(10)) + 'A' }
}

fn format_int(buffer: ref String, val: $T, _base: int = 10) {
    base := T(_base)

    // calculate length and sign
    len, sign : int, T = if val < 0 then (1, -1)
    else if val == 0 then (1, 1)
    else (0, 1)

    while v := val, v != 0, v /= base {
        len += 1
    }

    // reserve memory
    buffer.resize(buffer.length + len)
    
    if val == 0 {
        buffer[buffer.length - 1] = '0'
    } else {
        i := buffer.length - 1
        while val != 0, i -= 1 {
            lastDigit := (val % base) * sign

            val = val / base
            buffer[i] = digit_to_char(lastDigit)
        }

        if sign < 0 {
            buffer[i] = '-'
            i -= 1
        }
    }
}
