use import std.math
use import std.iterator
use import std.time
use import std.hash_table
use import std.mem.allocator

#export_scope

LinearCongruentialGenerator :: struct {
    seed: u64
}

impl LinearCongruentialGenerator {
    create :: (seed: u64 = 0) -> Self {
        return Self(seed)
    }

    set_seed :: (&Self, seed: u64) {
        self.seed = seed
    }

    next :: (&Self) -> u32 {
        M : u64 = cast(u64) u32.max
        A : u64 = 1664525
        B : u64 = 1013904223
        seed = (A * seed + B) % M

        return cast(u32) seed
    }

    next_int :: (&Self, min: int = 0, max: int = cast u32.max) -> int {
        return (cast(int)next()) % (max - min) + min
    }
}

impl PseudoRandomGen for LinearCongruentialGenerator {
    next_u32 :: (&Self) -> u32 {
        return self.next()
    }

    next_double :: (&Self) -> double {
        r := double(self.next())
        m := double(u32.max)
        return r / m
    }
}

lcg : ^LinearCongruentialGenerator = null

PseudoRandomGen :: trait {
    next_u32 :: (&Self) -> u32;
    next_double :: (&Self) -> double;
}

PseudoRandom :: struct {}

impl PseudoRandom {
    init :: () {
        if lcg == null {
            lcg = alloc(LinearCongruentialGenerator)
            *lcg = LinearCongruentialGenerator.create(cast get_time_microseconds())
            for 0..1000 do lcg.next()
        }
    }

    set_seed :: (seed: u64) {
        init()
        lcg.set_seed(seed)
    }

    next_int :: () -> int {
        init()
        return cast lcg.next()
    }

    next_double :: () -> double {
        init()
        return lcg.next_double()
    }

    next_float :: () -> float {
        init()
        return cast lcg.next_double()
    }
}

// distributions
IDistribution :: trait(T: type) {
    sample :: (&Self) -> T;
}

IDiscreteDistribution :: trait(T: type) {
    get_weight :: (&Self, t: T) -> int;
    // support :: (&Self) -> T;
}

// iterator
DistributionIterator :: struct(T: type) {
    dist: IDistribution[T]
}

impl(T: type) Iterator[T] for DistributionIterator[T] {
    next :: (&Self) -> Option[T] {
        return Some(dist.sample())
    }

    dispose :: (&Self) {
        free(^self)
    }
}

for_extension_random :: (dist: ^IDistribution[$T], code: Code) #for {
    while it_index := 0, true, it_index += 1 {
        it := dist.sample()
        @insert(code)
    }
}

// i
impl(T: type) IDistribution[T] {
    samples :: (&Self) -> Iterator[T] {
        it := alloc(DistributionIterator[T])
        *it = DistributionIterator[T](self)
        return *it
    }
}

// Standard Continuous Uniform distribution
StandardContinuousUniform :: struct(T: type) {
    prng: ^T
}
impl(T: type) IDistribution[double] for StandardContinuousUniform[T] if T : PseudoRandomGen {
    sample :: (&Self) -> double {
        return prng.next_double()
    }
}

impl(T: type) StandardContinuousUniform[T] if T : PseudoRandomGen {
    create :: (prng: ^T) -> Self {
        return StandardContinuousUniform[T](prng)
    }
}

// normal distribution
NormalDistribution :: struct {
    mean    : double
    sigma   : double
    scu     : StandardContinuousUniform[LinearCongruentialGenerator]
}

impl NormalDistribution {
    create :: (mean: double, sigma: double) -> Self {
        return NormalDistribution(mean, sigma, StandardContinuousUniform[LinearCongruentialGenerator](lcg))
    }
}

impl IDistribution[double] for NormalDistribution {
    sample :: (&Self) -> double {
        a := scu.sample()
        b := scu.sample()
        return mean + sigma * (
            sqrt(-2.0 * log(a)) * cos(2.0 * 3.1415 * b)
        )
    }
}

// standard discrete uniform distribution
StandardDiscreteUniform :: struct {
    min: int
    max: int
}
impl IDiscreteDistribution[int] for StandardDiscreteUniform {
    get_weight :: (&Self, i: int) -> int {
        return if i >= min and i <= max {1} else {0}
    }
}
impl IDistribution[int] for StandardDiscreteUniform {
    sample :: (&Self) -> int {
        d := PseudoRandom.next_double()
        mi := cast(double)min
        ma := cast(double)max
        return cast(int) d * (1.0 + ma - mi) + mi
    }
}

// singleton distribution
SingletonDistribution :: struct(T: type) {
    value: T
}

impl IDistribution[int] for SingletonDistribution[int] {
    sample :: (&Self) -> int {
        return value
    }
}

// bernoulli
BernoulliDistribution :: struct {
    zero: int
    one : int
}

impl IDistribution[int] for BernoulliDistribution {
    sample :: (&Self) -> int {
        z := cast(double)zero
        o := cast(double)one
        d := PseudoRandom.next_double()
        return if d <= (z / (z + o)) {0} else {1}
    }
}

impl BernoulliDistribution {
    create :: (zero: int, one: int) -> Self {
        @assert(zero >= 0 and one >= 0 and (zero != 0 or one != 0))
        return BernoulliDistribution(zero, one)
    }
}

// histograms
print_histogram :: (dist: ^IDistribution[$T], low: double, high: double){
    width : int : 160
    height: int : 30
    samples   : int : 1000000
    it := dist.samples().take(samples)

    buckets := alloc_n(int, cast width)
    c_memset(buckets.data, 0, cast width * @sizeof(int))

    while match it.next() {
        Some($c) -> {
            bucket := cast(int) floor((cast(double)buckets.length) * ((cast(double)c) - low) / (high - low))
            if bucket >= 0 and bucket < buckets.length {
                buckets[bucket] += 1
            }
            true
        }
        $_ -> false
    } {}

    max := 0
    for i in 0..buckets.length {
        if buckets[i] > max {
            max = buckets[i]
        }
    }

    scale := if max < height {1.0} else {(cast(double)height) / (cast(double)max)}


    // top line
    max_str := String.empty()
    max_str.appendf("{}  ", max)
    print(max_str)
    for i in 0..(width - max_str.length) {
        print("-")
    }
    println("")

    // histogram
    for h in 0..height {
        for w in 0..width {
            b := cast(double)buckets[w]
            if b * scale >= cast(double)height - h {
                print("*")
            } else {
                print(" ")
            }
        }
        println("")
    }


    // bottom line
    left_str := String.empty()
    left_str.appendf("{}  ", low)
    right_str := String.empty()
    right_str.appendf("  {}", high)
    mid_str := String.empty()
    mid_str.appendf("  {}  ", 0.5 * (low + high))
    p1 := width / 2
    p2 := width - p1

    print(left_str)
    for i in 0..(p1 - left_str.length - mid_str.length / 2) {
        print("-")
    }
    print(mid_str)
    for i in 0..(p2 - right_str.length - (mid_str.length - mid_str.length / 2)) {
        print("-")
    }
    print(right_str)
    println("")

    max_str.dispose()
    left_str.dispose()
    mid_str.dispose()
    right_str.dispose()
    free_n(buckets)
    it.dispose()
}

print_discrete_histogram :: (dist: ^IDistribution[$T]){
    width : int : 40
    samples   : int : 100000
    it := dist.samples().take(samples)

    map := Table[int, int].create((a: int, b: int) => a == b)

    while match it.next() {
        Some($c) -> {
            match map.get(c) {
                Some($v) -> {
                    map[c] = v + 1
                }
                None -> {
                    map[c] = 1
                }
            }
            true
        }
        $_ -> false
    } {}

    cmp : fn(ref(int, int), ref(int, int)) -> int = (a, b) => b[0] - a[0]
    arr := map.iterator().to_array().sort(cmp)

    max := map.iterator().map((t: (int, int)) => t[1]).max()
    scale := if max < width {1.0} else {(cast(double)width)/(cast(double)max)}

    for i in 0..arr.length {
        printf("{}|", arr[i][0])
        count := cast(int) (cast(double) arr[i][1]) * scale

        for c in 0..count {
            print("*")
        }

        println("")
    }

    arr.dispose()
}
