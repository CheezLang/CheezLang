use import std.mem.allocator
use import std.mem.std_heap_allocator
use import std.hash
use import std.iterator

C :: import std.c
io :: import std.io

#export_scope



Map :: struct(K: type, V: type) {
    max_load  : double
    _count    : uint
    entries   : []Entry[K, V]
    allocator : &Allocator
}

impl(K: type, V: type) Drop for Map[K, V] {
    drop :: (ref Self) {
        if entries.data != null {
            for(by_ref=true) e, _ : entries {
                if e.filled then Memory.drop(e.value <- None)
            }
            free_n(entries, allocator)
        }
    }
}

impl(K: type, V: type) Map[K, V] {
    new :: (allocator: &Allocator = &DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        if const !@type_has_trait(K, Equatable[K]) {
            @static_assert(false, "Key of map must implment Equatable")
        }
        return Map[K, V](
            allocator   = allocator
            max_load    = 0.75
            _count      = 0
            entries     = null
        )
    }

    clear :: (ref Self) {
        for(by_ref=true) entry : entries {
            entry.filled = false
            entry.is_tombstone = false
            entry.key = None
            entry.value = None
        }
        _count = 0
    }

    empty :: (ref Self) -> bool {
        return _count == 0
    }

    count :: (ref Self) -> int {
        return cast _count
    }

    get_entries :: (ref Self) -> []Entry[K, V] {
        return entries
    }

    find_entry :: (ref Self, the_entries: []Entry[K, V], key: ref $K2) -> &Entry[K, V] {
        if const !@type_has_trait(K, Equatable[K2]) {
            @static_assert(false, "Key of map must implment Equatable[" + @typename(K2) + "]")
        }

        index := key.hash() % cast(uint) the_entries.length
        tombstone : &Entry[K, V] = null

        while true {
            entry := &the_entries[int(index)]

            if !entry.filled {
                if !entry.is_tombstone {
                    if tombstone != null {
                        return tombstone
                    } else {
                        return entry
                    }
                } else if tombstone == null {
                    tombstone = entry
                }
            } else {
                if @impl(K, Equatable[K2]).equal(entry.key.Some, key) {
                    return entry
                }
            }

            index = (index + 1) % cast(uint) the_entries.length
        }

        // unreachable
        return null
    }

    set :: (ref Self, key: $K2, value: V) -> bool #operator("set[]") {
        if entries.data == null {
            adjust_capacity(13)
        }
        if (cast(double) _count + 1) > ((cast(double)entries.length) * max_load) {
            adjust_capacity(cast(uint) entries.length * 2)
        }

        entry := find_entry(entries, key)
        is_new_key := !entry.filled
        entry.key = Some(key.into())
        entry.value = Some(value)
        entry.filled = true
        entry.is_tombstone = false

        if is_new_key {
            _count += 1
        }

        return is_new_key
    }

    get :: (ref Self, key: $K2) -> Option[ref V] {
        if entries.data == null {
            return None
        }
        
        entry := find_entry(entries, key)
        if !entry.filled {
            return None
        }

        return match ref entry.value {
            Some($val)  -> Some(val)
            None        -> None
        }
    }

    get_or_insert :: (ref Self, key: $K2, value: fn() -> V) -> ref V {
        if entries.data == null {
            adjust_capacity(13)
        }

        entry := find_entry(entries, key)
        if !entry.filled {
            entry.key = Some(key.into())
            entry.value = Some(value())
            entry.filled = true
            entry.is_tombstone = false
            _count += 1
        }

        return match ref entry.value {
            Some($val)  -> val
            None        -> @assert(false)
        }
    }

    get_unchecked :: (ref Self, key: $K2) -> ref V #operator("[]") {
        entry := find_entry(entries, key)
        @assert(entry.filled)
        return entry.value.Some
    }

    at :: (ref Self, key: $K2) -> ref V {
        entry := find_entry(entries, key)
        @assert(entry.filled)
        return entry.value.Some
    }

    delete :: (ref Self, key: $K2) -> bool {
        if _count == 0 or entries.data == null { return false }

        entry := find_entry(entries, key)
        if !entry.filled { return false }

        entry.filled = false
        entry.key = None
        entry.value = None
        entry.is_tombstone = true

        _count -= 1

        return true
    }

    adjust_capacity :: (ref Self, cap: uint) {
        entries_new := alloc_n(Entry[K, V], cap, allocator)

        for i : 0..entries_new.length {
            entries_new[i].filled = false
            entries_new[i].is_tombstone = false
        }

        // copy entries to new array
        if entries.data != null {
            _count = 0
            for i : 0..entries.length {
                entry := &entries[i]
                if entry.filled {
                    dest := find_entry(entries_new, entry.key.Some)
                    dest.key = entry.key <- None
                    dest.value = entry.value <- None
                    dest.filled = true
                    _count += 1
                }
            }

            free_n(entries, allocator)
        }

        entries = entries_new
    }

    iterator :: (ref Self) -> TableIterator[K, V] {
        return TableIterator[K, V](self, 0)
    }
}

impl(K: type, V: type) Clone for Map[K, V] if K : Clone, V : Clone {
    clone :: (ref Self) -> Self {
        result := Map[K, V].create()
        result.adjust_capacity(cast self.entries.length)
        for kv : <<&self {
            result[kv.name.clone()] = kv.value.clone()
        }
        return result
    }
}

for_extension_table :: (r: ref Map[$K, $V], code: Code) #for {
    it_index := 0
    for(by_ref=true) e, _ : r.get_entries() {
        if !e.filled then continue
        it : (name: K, value: ref V) = e.key, ref e.value.Some
        @insert(code, _break=@link(break), _continue=@link(continue))
        it_index += 1
    }
}

// iterator
TableIterator :: struct(K: type, V: type) {
    table: ref Map[K, V]
    index: int
}

impl(K: type, V: type) Iterator[(K, V)] for TableIterator[K, V] {
    next :: (ref Self) -> Option[(K, V)] {
        entries := table.get_entries()
        while index < entries.length {
            e := ref entries[index]
            index += 1

            if e.filled {
                return Some((e.key, e.value))
            }
        }

        return None
    }

    dispose :: (ref Self) {
        free(&self)
    }
}

#file_scope

Entry :: struct(K: type, V: type) {
    key          : Option[K]
    value        : Option[V]
    filled       : bool
    is_tombstone : bool
}
