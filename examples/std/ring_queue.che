use import std.mem.allocator
use import std.mem.std_heap_allocator
use import std.util
C :: import std.c

#export_scope

RingQueue :: struct(T: type) {
    data        : ^T
    capacity    : int
    first       : int
    last        : int
    allocator   : ^Allocator
}

impl(T: type) RingQueue[T] {
    new :: (init_size: int = 10, allocator: ^Allocator = null) -> Self {
        if allocator == null {
            allocator = ^DEFAULT_STD_HEAP_ALLOCATOR
        }

        data := alloc_raw(T, cast init_size, allocator)
        return RingQueue[T](
            data = data
            capacity = init_size
            first = 0
            last = 0
            allocator = allocator
        )
    }

    get_capacity :: (&Self) -> int {
        return capacity
    }

    get_length :: (&Self) -> int {
        // return if (last >= first) then (last - first) else (last - first + capacity)
        return (last - first + capacity) % capacity
    }

    count :: (&Self) -> int {
        // return if (last >= first) then (last - first) else (last - first + capacity)
        return (last - first + capacity) % capacity
    }

    reserve :: (&Self, size: int) {
        if capacity > size {
            return
        }

        // copy parts
        if last >= first {
            data = realloc_raw(data, cast size, allocator)
            last = last - first
            first = 0
        } else {
            data_new := alloc_raw(T, cast size, allocator)

            l1 := capacity - first
            l2 := last
            // data is split in
            // first half:  first..capacity -> 0..l1
            C.memcpy(cast data_new, cast pointer_add_sized(data, first), u64(l1 * @sizeof(T)))
            // second half: 0..last         -> l1..l1+l2
            C.memcpy(cast pointer_add_sized(data_new, l1), cast data, u64(l2 * @sizeof(T)))
            free(data, allocator)
            data = data_new
            last = l1 + l2
            first = 0
        }

        capacity = size

        if size > get_length() {
            C.memset(cast ^data[get_length()], 0, u64((size - get_length()) * @sizeof(T)))
        }

    }

    push :: (&Self, val: T) {
        if get_length() == capacity - 1 {
            reserve(capacity * 2)
        }

        data[last] = val
        last = (last + 1) % capacity
    }

    pop :: (&Self) -> T {
        @assert(first != last)

        val := data[first]
        // data[first] = default
        C.memset(^data[first], 0, @sizeof(T))
        first = (first + 1) % capacity
        return val
    }

    at :: (&Self, index: int) -> &T #operator("[]") {
        @assert(index >= 0 and index < count())
        index = (first + index) % capacity
        return &data[index]
    }
}

impl(T: type) Drop for RingQueue[T] {
    drop :: (&Self) {
        if first <= last {
            for first..last {
                Memory.drop(data[it])
            }
        } else {
            for first..capacity {
                Memory.drop(data[it])
            }
            for 0..last {
                Memory.drop(data[it])
            }
        }
        if allocator != null {
            free(data)
        }
    }
}

for_extension_ring_queue_T :: (que: &RingQueue[$T], code: Code, reverse: bool = false, by_ref: bool = true) #for {
    while it_index := 0, it_index < que.count(), it_index += 1 {
        if const reverse {
            it_index_rev := que.count() - it_index - 1
            if const by_ref {
                it := que[it_index_rev]
            } else {
                it := *que[it_index_rev]
            }
            @insert(code, link=[it_index_rev], _break=break, _continue=continue)
        } else {
            if const by_ref {
                it := que[it_index]
            } else {
                it := *que[it_index]
            }
            @insert(code, _break=break, _continue=continue)
        }
    }
}
