// #load("std:mem/allocator")
// #load("std:mem/std_heap_allocator")
#load("std:mem/memory")
#load("std:c")

fn streql(a: $T, b: $T2, len: int) -> bool {
    let alen: int = cast a.getLength()
    let blen: int = cast b.getLength()
    if len > alen {
        len = alen
    }
    if len > blen {
        len = blen
    }

    while let i: int = 0; i < len; i += 1 {
        if a.charAt(i) != b.charAt(i) {
            return false
        }
    }
    return true
}

fn streq(a: $T, b: $T2) -> bool {
    let len: int = cast a::get_length()
    let blen: int = cast b::get_length()

    if len != blen {
        return false
    }

    while let i: int = 0; i < len; i += 1 {
        if a::char_at(i) != b::char_at(i) {
            return false
        }
    }
    return true
}

impl c_string {
    fn get_length(Self) -> int {
        return cast c_strlen(self)
    }
    
    fn char_at(Self, i: int) -> char {
        return self[i]
    }

    fn to_string(Self) -> String {
        return String::from_cstring(self)
    }
}

impl string {
    fn get_length(Self) -> int {
        return self.length
    }
    
    fn char_at(Self, i: int) -> char {
        return self[i]
    }

    fn to_string(Self) -> String {
        return String::from_string(self)
    }
}

// impl Printable for c_string {
//     fn print(str: *String, format: string) {
//         str.append_cstring(<<self)
//     }
// }

// impl Printable for string {
//     fn print(str: *String, format: string) {
//         str.append_string(<<self)
//     }
// }

struct StringBase(CharType: type) {
    data: []CharType
    length: int
    // allocator: Allocator    = null
}

typedef String = StringBase(char)
typedef Utf32String = StringBase(i32)

impl StringBase($CharType) {
    fn empty() -> Self {
        return new { null, 0 }
    }

    fn from_string(str: string) -> Self {
        let s = Self::empty()
        s.append_string(str)
        return s
    }

    fn from_cstring(str: c_string) -> Self {
        let s = Self::empty()
        s.append_cstring(str)
        return s
    }

    fn free(ref Self) {
        c_free(cast data.data)
        data = null
        length = 0
    }

    fn get_length(ref Self) -> int {
        return length
    }

    fn get_capacity(ref Self) -> int {
        return data.length
    }

    fn get_raw(ref Self) -> *CharType {
        return data.data
    }

    fn char_at(ref Self, i: int) -> CharType {
        return data[i]
    }

    fn reserve(ref Self, size: int) {
        if data.length > size {
            return
        }

        data.length = size
        if data.data == null {
            length = 0
            data.data = cast c_malloc(cast(i32) (size * @sizeof(CharType)))
        }
        else {
            data.data = cast c_realloc(cast data.data, cast(i32) (size * @sizeof(CharType)))
            if length > data.length {
                length = data.length
            }
        }
    }

    fn resize(ref Self, size: int) {
        self.reserve(size)
        length = size
    }

    fn append(ref Self, other: ref Self) -> ref Self #operator("+=") {
        let newLength = length + other.length
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other.data.data, cast(i32) (other.length * @sizeof(CharType)))
        length = newLength
        return self
    }

    fn append_string(ref Self, other: string) -> ref Self #operator("+=") {
        let newLength = length + other.length
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other.data, cast other.length)
        length = newLength
        return self
    }

    fn append_cstring(ref Self, other: c_string) -> ref Self #operator("+=") {
        let otherLen = cast(int) c_strlen(other)
        let newLength = length + otherLen
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other, cast otherLen)
        length = newLength
        return self
    }

    fn append_char(ref Self, ch: CharType) -> ref Self #operator("+=") {
        let newLength = length + 1
        self.reserve(newLength)
        data[length] = ch
        length = newLength
        return self
    }

    fn sliceFL(ref Self, from: int, len: int) -> []CharType {
        let slice: []CharType = &data[from]
        slice.length = len
        return slice
    }

    fn slice(ref Self) -> []CharType {
        return self.sliceFL(0, length)
    }

    fn sliceF(ref Self, from: int) -> []CharType {
        return self.sliceFL(from, length - from)
    }
    
    fn sliceL(ref Self, len: int) -> []CharType {
        return self.sliceFL(0, len)
    }

    fn index_of(ref Self, ch: CharType) -> int {
        while let i = 0; i < length; i += 1 {
            if data[i] == ch {
                return i
            }
        }

        return -1
    }
}
