// #load("std:mem/allocator")
// #load("std:mem/std_heap_allocator")
#load("std:mem/memory")
#load("std:io/io")
#load("std:printable")
#load("std:c")
#load("std:mem/allocator")
#load("std:mem/std_heap_allocator")
#load("std:alloca")
#load("std:util")

struct StringBase(CharType: type) {
    data: []CharType
    pub const length: int
    allocator: Allocator
}

typedef String = StringBase(char)

impl(CharType: type) Drop for StringBase(CharType) {
    fn drop(ref Self) {
        if allocator != null {
            free_n(data, allocator)
        }
        data = null
        length = 0
    }
}

impl(CharType: type) StringBase(CharType) {
    fn empty(allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        return new { null, 0, allocator }
    }

    fn from_raw_ptr(ptr: &CharType, cap: int) -> Self {
        let sl: []CharType = ptr
        sl.length = cap
        return new { sl, 0, null }
    }

    fn from_string(str: string, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        let s = Self::empty(allocator)
        s.append_string(str)
        return s
    }

    fn from_cstring(str: c_string, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        let s = Self::empty(allocator)
        s.append_cstring(str)
        return s
    }

    fn get_capacity(ref Self) -> int {
        return data.length
    }

    fn get_length(ref Self) -> int {
        return length
    }

    fn get_raw(ref Self) -> &CharType {
        return data.data
    }

    fn char_at(ref Self, i: int) -> CharType #operator("[]") {
        return data[i]
    }

    fn set_char_at(ref Self, i: int, c: CharType) #operator("set[]") {
        data[i] = c
    }

    fn reserve(ref Self, size: int) {
        if data.length > size {
            return
        }

        data.length = size
        if data.data == null {
            length = 0
            data = alloc_n(CharType, cast size, allocator)
        }
        else {
            data = realloc_n(data, cast size, allocator)
            if length > data.length {
                length = data.length
            }
        }
    }

    fn resize(ref Self, size: int) {
        self.reserve(size)
        length = size
    }

    fn append(ref Self, other: ref Self) -> ref Self #operator("+=") {
        let newLength = length + other.length
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other.data.data, cast(uint) (other.length * @sizeof(CharType)))
        length = newLength
        return self
    }

    fn append_string(ref Self, other: string) -> ref Self #operator("+=") {
        let newLength = length + other.length
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other.data, cast other.length)
        length = newLength
        return self
    }

    fn append_cstring(ref Self, other: c_string) -> ref Self #operator("+=") {
        let otherLen = other::get_length()
        let newLength = length + otherLen
        self.reserve(newLength)
        c_memcpy(cast &data.data[length], cast other, cast otherLen)
        length = newLength
        return self
    }

    fn append_char(ref Self, ch: CharType) -> ref Self #operator("+=") {
        let newLength = length + 1
        self.reserve(newLength)
        data[length] = ch
        length = newLength
        return self
    }

    fn sliceFL(ref Self, from: int, len: int) -> []CharType {
        let slice: []CharType = &data[from]
        slice.length = len
        return slice
    }

    fn slice(ref Self) -> []CharType {
        return self.sliceFL(0, length)
    }

    fn sliceF(ref Self, from: int) -> []CharType {
        return self.sliceFL(from, length - from)
    }
    
    fn sliceL(ref Self, len: int) -> []CharType {
        return self.sliceFL(0, len)
    }

    fn index_of(ref Self, ch: CharType) -> int {
        while let i = 0, i < length, i += 1 {
            if data[i] == ch {
                return i
            }
        }

        return -1
    }
}

impl String {

    fn append_print(ref Self, pr: Printable) -> ref Self #operator("+=") {
        pr.print(self, "")
        return self
    }

    fn appendf(ref Self, format: string, args: []Printable) {
        let formatSpecifier = {
            let const len = 64
            String::from_raw_ptr(@alloca(char, len), len)
        }

        let len = format.length
        let state = 0
        let argIndex = 0

        // state    - desc
        // 0        - normal
        // 1        - in format
        // 2        - escape

        while let i = 0, i < len, i += 1 {
            let c = format[i]

            if state == 0 {
                if c == '``' {
                    state = 2
                }
                else if c == '{' {
                    state = 1
                }
                else {
                    self += c
                }
            }
            else if state == 2 {
                self += c
                state = 0
            }
            else if state == 1 {
                if c == '}' {
                    state = 0
                    
                    let format: string = null

                    let colon = formatSpecifier.index_of(':')
                    if colon >= 1 {
                        // colon -> arg index before colon
                        argIndex = parse_int(formatSpecifier.sliceL(colon))
                    }
                    else if colon == -1 and formatSpecifier.length > 0 {
                        // no colon but non empty -> arg index
                        argIndex = parse_int(formatSpecifier.slice())
                    }
                    if colon != -1 {
                        // colon -> format after colon
                        format = formatSpecifier.sliceF(colon + 1)
                    }

                    if argIndex >= args.length {
                        c_printf("[%lld] `"%.*s`": arg index to out of bounds: %lld, args: %lld`n", i, format.length, format.data, argIndex, args.length)
                        return
                    }

                    args[argIndex].print(self, format)
                    argIndex += 1
                    formatSpecifier.length = 0

                } else {
                    formatSpecifier += c
                }
            }
        }
    }

    fn format(format: string, args: []Printable) -> Self {
        let s = Self::empty()
        s.appendf(format, args)
        return s
    }
}

impl Printable for String {
    fn print(ref Self, str: ref String, format: string) {
        str += self
    }
}

fn streql(a: $T, b: $T2, len: int) -> bool {
    let alen = cast a::get_length()
    let blen = cast b::get_length()
    if len > alen {
        len = alen
    }
    if len > blen {
        len = blen
    }

    while let i = 0, i < len, i += 1 {
        if a::char_at(i) != b::char_at(i) {
            return false
        }
    }
    return true
}

fn streq(a: $T, b: $T2) -> bool {
    let len = a::get_length()
    let blen = b::get_length()

    if len != blen {
        return false
    }

    while let i = 0, i < len, i += 1 {
        if a::char_at(i) != b::char_at(i) {
            return false
        }
    }
    return true
}

impl string {
    fn get_length(Self) -> int {
        return self.length
    }
    
    fn char_at(Self, i: int) -> char {
        return self[i]
    }

    fn to_string(Self) -> String {
        return String::from_string(self)
    }

    fn slice(Self, from: int = 0, length: int = -1) -> string {
        if length < 0 {
            length = self.length - from
        }

        let result = self
        result.data = pointer_add_sized(result.data, from)
        result.length = length

        return result
    }
}

impl c_string {
    fn get_length(Self) -> int {
        return cast c_strlen(self)
    }
    
    fn char_at(Self, i: int) -> char {
        return self[i]
    }

    fn to_string(Self) -> String {
        return String::from_cstring(self)
    }
}
