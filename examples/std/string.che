io   :: import std.io
util :: import std.util
C    :: import std.c
fmt  :: import std.fmt

use import std.array
use import std.unicode
use import std.printable
use import std.mem.allocator
use import std.mem.std_heap_allocator
import std.alloca

if const @is_os("windows") {
    use import std.os.windows_functions
    use import std.os.windows_constants
}

#export_scope

// StringBase :: struct(CharType: type) {
//     data: []CharType
//     length: int
//     allocator: Allocator
// }
String :: struct {
    data: []u8
    length: int
    allocator: Allocator
}

impl Drop for String {
    drop :: (ref Self) {
        if allocator != null {
            free_n(data, allocator)
        }
        data = null
        length = 0
    }
}

impl String {
    empty :: (allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        return String(null, 0, allocator)
    }

    with_capacity :: (cap: int, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        result := String(null, 0, allocator)
        result.reserve(cap)
        return result
    }

    from_raw_ptr :: (ptr: &u8, cap: int) -> Self {
        sl : []u8 = ptr
        sl.length = cap
        return String(sl, 0, null)
    }

    from_string :: (str: string, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Self.empty(allocator)
        s.append_string(str)
        return s
    }

    from_cstring :: (str: c_string, allocator: Allocator = DEFAULT_STD_HEAP_ALLOCATOR) -> Self {
        s := Self.empty(allocator)
        s.append_cstring(str)
        return s
    }

    from_utf16 :: (str: []u16) -> Result[String, ()] {
        required_size := WideCharToMultiByte(CP_UTF8, 0, str.data, cast str.length, null, 0, null, null)
        result := String.empty()
        result.resize(required_size)
        bytes_written := WideCharToMultiByte(CP_UTF8, 0, str.data, cast str.length, result.get_raw(), required_size, null, null)
        if bytes_written == 0 {
            return Err(())
        }
        return Ok(result)
    }

    get_capacity :: (ref Self) -> int {
        return data.length
    }

    get_length :: (ref Self) -> int {
        return length
    }

    get_raw :: (ref Self) -> &u8 {
        return data.data
    }

    char_at :: (ref Self, i: int) -> ref char #operator("[]") {
        code_point, len := Utf8.decode(data[i..data.length])
        return code_point
    }

    set_char_at :: (ref Self, i: int, c: u8) #operator("set[]") {
        data[i] = c
    }

    reserve_more :: (ref Self, amount: int) {
        reserve(length + amount)
    }

    reserve :: (ref Self, size: int) {
        if data.length > size {
            return
        }

        data.length = size
        if data.data == null {
            length = 0
            data = alloc_n(u8, cast size, allocator)
        } else {
            data = realloc_n(data, cast size, allocator)
            if length > data.length {
                length = data.length
            }
        }
    }

    clone :: (ref Self) -> Self {
        other := Self.empty()
        other.append(self)
        return other
    }

    clear :: (ref Self) {
        length = 0
    }

    resize :: (ref Self, size: int) {
        self.reserve(size)
        length = size
    }

    append :: (ref Self, other: ref Self) -> ref Self #operator("+=") {
        if other.data.data == null {
            return self
        }
        newLength := length + other.length
        self.reserve(newLength)
        C.memcpy(cast &data.data[length], cast other.data.data, cast(uint) (other.length * @sizeof(u8)))
        length = newLength
        return self
    }

    append_string :: (ref Self, other: string) -> ref Self #operator("+=") {
        newLength := length + other.bytes.length
        self.reserve(newLength)
        C.memcpy(cast &data.data[length], cast other.bytes.data, cast other.bytes.length)
        length = newLength
        return self
    }

    append_cstring :: (ref Self, other: c_string) -> ref Self #operator("+=") {
        otherLen := C.strlen(other)
        newLength := length + int(otherLen)
        self.reserve(newLength)
        C.memcpy(cast &data.data[length], cast other, cast otherLen)
        length = newLength
        return self
    }

    append_char :: (ref Self, ch: char) -> ref Self #operator("+=") {
        bytes, count := Utf8.encode(ch)
        newLength := length + int(count)
        self.reserve(newLength)
        C.memcpy(&data[length], &bytes[0], cast count)
        length = newLength
        return self
    }

    sliceFT :: (ref Self, from: int, to: int) -> string {
        slice := string(&data[from], to - from)
        return slice
    }

    sliceFL :: (ref Self, from: int, len: int) -> string {
        slice := string(&data[from], len)
        return slice
    }

    slice :: (ref Self) -> string {
        return self.sliceFL(0, length)
    }

    sliceF :: (ref Self, from: int) -> string {
        return self.sliceFL(from, length - from)
    }
    
    sliceL :: (ref Self, len: int) -> string {
        return self.sliceFL(0, len)
    }

    index_of :: (ref Self, ch: char) -> int {
        for i : 0..length {
            if data[i] == u8(ch) {
                return i
            }
        }

        return -1
    }
}


impl String {
    append_print :: (ref Self, pr: Printable) -> ref Self #operator("+=") {
        pr.print(self, "")
        return self
    }

    appendf :: (ref Self, format: string, arguments: $T) {
        if const @is_tuple(T) {
            if const T.length == 0 {
                args : [1]Printable = [arguments]
            } else {
                args : [T.length] Printable = default
                @for_tuple_values(arguments, lambda v, i => {
                    args[i] = Printable(v)
                })
            }
        } else {
            args : [1]Printable = [Printable(arguments)]
        }

        formatSpecifier := {
            len :: 64
            String.from_raw_ptr(@alloca(u8, len), len)
        }

        //len      := format.bytes.length
        state    := 0
        argIndex := 0

        // state    - desc
        // 0        - normal
        // 1        - in format
        // 2        - escape

        for c : format {
            if state == 0 {
                if c == '``' {
                    state = 2
                } else if c == '{' {
                    state = 1
                } else {
                    self += c
                }
            } else if state == 2 {
                self += c
                state = 0
            } else if state == 1 {
                if c == '}' {
                    state = 0

                    format := ""

                    colon := formatSpecifier.index_of(':')
                    if colon >= 1 {
                        // colon -> arg index before colon
                        argIndex = fmt.parse_int(formatSpecifier.sliceL(colon))
                    } else if colon == -1 and formatSpecifier.length > 0 {
                        // no colon but non empty -> arg index
                        argIndex = fmt.parse_int(formatSpecifier.slice())
                    }
                    if colon != -1 {
                        // colon -> format after colon
                        format = formatSpecifier.sliceF(colon + 1)
                    }

                    if argIndex >= args.length {
                        C.printf("[%lld] `"%.*s`": arg index to out of bounds: %lld, args: %lld`n", it_index, format.bytes.length, format.bytes.data, argIndex, args.length)
                        return
                    }

                    args[argIndex].print(self, format)
                    argIndex += 1
                    formatSpecifier.length = 0

                } else {
                    formatSpecifier += c
                }
            }
        }
    }

    format :: (format: string, args: $T) -> Self {
        s := Self.empty()
        s.appendf(format, args)
        return s
    }

    split_at_char :: (ref Self, c: char, remove_empty: bool = false) -> Array[string] {
        result := Array[string].create()

        start := 0
        for i : 0..length {
            if data[i] == u8(c) {
                sub := self.sliceFT(start, i)
                if sub.bytes.length > 0 or !remove_empty {
                    result.add(sub)
                }

                start = i + 1
            }
        }

        if start < length {
            sub := self.sliceF(start)
            if sub.bytes.length > 0 or !remove_empty {
                result.add(sub)
            }
        }

        return result
    }
}

impl Printable for String {
    print :: (ref Self, str: ref String, format: string) {
        str += self
    }
}

streql :: (a: $T, b: $T2, len: int) -> bool {
    alen := T.get_length(a)
    blen := T2.get_length(b)
    if len > alen {
        len = alen
    }
    if len > blen {
        len = blen
    }

    for i : 0..len {
        if T.char_at(a, i) != T2.char_at(b, i) {
            return false
        }
    }
    return true
}

streq :: (a: $T, b: $T2) -> bool {
    len  := T.get_length(a)
    blen := T2.get_length(b)

    if len != blen {
        return false
    }

    for i : 0..len {
        if T.char_at(a, i) != T2.char_at(b, i) {
            return false
        }
    }
    return true
}

impl string {
    get_length :: (Self) -> int {
        // @todo: calculate length in chars
        return self.bytes.length
    }
    
    char_at :: (Self, i: int) -> char {
        return char(self[i])
    }

    to_string :: (Self) -> String {
        return String.from_string(self)
    }

    slice :: (Self, from: int = 0, length: int = -1) -> string {
        if length < 0 {
            length = self.bytes.length - from
        }

        result := string(util.pointer_add_sized(self.bytes.data, from), length)
        return result
    }

    to_cstring :: (Self) -> c_string {
        str_c := alloc_raw(char8, cast self.bytes.length + 1)
        str_c[self.bytes.length] = cast 0
        C.memcpy(cast str_c, cast self.bytes.data, cast self.bytes.length)
        return str_c
    }

    to_utf16 :: (Self) -> Result[Array[u16], ()] {
        required_size := MultiByteToWideChar(CP_UTF8, 0, self.bytes.data, cast self.bytes.length, null, 0)
        wide_char_str := Array[u16].create(cast required_size + 1)
        wide_char_str.resize(required_size)
        wide_char_str.access_unchecked(required_size) = 0
        bytes_written := MultiByteToWideChar(CP_UTF8, 0, self.bytes.data, cast self.bytes.length, wide_char_str.get_raw(), required_size)
        if bytes_written == 0 {
            return Err(())
        }
        return Ok(wide_char_str)
    }
}

impl c_string {
    get_length :: (Self) -> int {
        return cast C.strlen(self)
    }
    
    char_at :: (Self, i: int) -> char {
        return char(self[i])
    }

    to_string :: (Self) -> String {
        return String.from_cstring(self)
    }
}

for_extension_string_builtin :: (arr: string, code: Code) #for {
    bytes := arr.bytes

    while it_index := 0, it_index < bytes.length {
        it, len := Utf8.decode(bytes[it_index..bytes.length])
        @insert(code, _break=break, _continue=continue)
        it_index += int(len)
    }
}