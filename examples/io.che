#load("string.che")
#load("memory.che")
#load("std/windows.che")

fn PrintString(s: $T) {
    let s = (string)s
    let len = strlen(s)
    let bytesWritten: int
    WriteFile(__std_out_handle, s, len, &bytesWritten, 0)
}

fn Println(s: string) {
    let len = strlen(s)
    let bytesWritten: int
    WriteFile(__std_out_handle, s, len, &bytesWritten, 0)
    WriteFile(__std_out_handle, "`n", 1, &bytesWritten, 0)
}

fn PrintChar(c: byte) { 
    let bytesWritten: int
    WriteFile(__std_out_handle, (string)&c, 1, &bytesWritten, 0)
}

fn PrintDigit(d: int) {
    PrintChar((byte)d + 48)
}

fn PrintInt(num: $T) {
    if (num == 0)
    {
        PrintDigit(0)
        return
    }
    let bufferSize: uint = 30
    let buff: byte^ = Malloc(bufferSize)
    ClearMemory(buff, bufferSize)

    let neg = false
    let minimum = false
    if num < 0 {
        neg = true
        num = -num

        if num < 0 {
            // num is minimum value
            num = -(num + 1)
            minimum = true
        }
    }

    let i: uint = bufferSize - 2
    while i > 0 and num != 0 {
        let lastDigit = num % 10
        if i == (bufferSize - 2) and minimum {
            lastDigit = lastDigit + 1
        }

        num = num / 10
        buff[i] = (byte)lastDigit + 48
        i = i - 1
    }

    if (neg) {
        buff[i] = 45
        i = i - 1
    }

    let str = (string)((uint)buff + i + 1)
    PrintString(str)

    Free(buff)
}

fn PrintlnInt(i: $T) {
    PrintInt(i)
    Println("")
}

fn PrintfData(formatSpecifier: byte^, data: any) {
    let len = strlen(formatSpecifier)
    if streq(formatSpecifier, "i8") {
        PrintInt((i32)(i8)data)
    }
    else if streq(formatSpecifier, "i16") {
        PrintInt((i32)(i16)data)
    }
    else if streq(formatSpecifier, "i32") {
        PrintInt((i32)data)
    }
    else if streq(formatSpecifier, "i64") {
        PrintInt((i32)(i64)data)
    }
    else if streq(formatSpecifier, "b") {
        let b = (bool)data
        if (b) {
            PrintString("true")
        } else {
            PrintString("false")
        }
    }
    else if streq(formatSpecifier, "s") {
        PrintString((string)data)
    }
    else {
        PrintString("<Unknown format specifier: ")
        PrintString(formatSpecifier)
        PrintString(">")
    }
}

fn Printf(format: string, data: any) {
    let open = *"{"
    let close = *"}"

    let formatSpecifier: byte^ = Malloc(5)
    let fi: ulong = 0

    let len = (ulong)strlen(format)
    let i: ulong = 0
    let state = 0

    while (i < len) {
        let c = format[i]

        if state == 0 {
            if (c == open) {
                state = 1
            }
            else {
                PrintChar(c)
            }
        }
        else if state == 1 {
            if (c == close) {
                formatSpecifier[fi] = 0
                state = 0
                fi = 0

                PrintfData(formatSpecifier, data)

            } else {
                formatSpecifier[fi] = c
                fi = fi + 1
            }
        }


        i = i + 1
    }

    Free(formatSpecifier)
}

fn Printfn(format: string, args: any[]) {
    let open = *"{"
    let close = *"}"

    let argIndex = 0

    let formatSpecifier: byte^ = Malloc(5)
    let fi: ulong = 0

    let len = strlen(format)
    let i = 0
    let state = 0

    while (i < len) {
        let c = format[i]

        if state == 0 {
            if (c == open) {
                state = 1
            }
            else {
                PrintChar(c)
            }
        }
        else if state == 1 {
            if (c == close) {
                formatSpecifier[fi] = 0
                state = 0
                fi = 0

                PrintfData(formatSpecifier, args[argIndex])
                argIndex = argIndex + 1
            } else {
                formatSpecifier[fi] = c
                fi = fi + 1
            }
        }


        i = i + 1
    }

    Free(formatSpecifier)
}

fn Printlnf(format: string, data: any) {
    Printf(format, data)
    Println("")
}

fn Printlnfn(format: string, args: any[]) {
    Printfn(format, args)
    Println("")
}

fn PrintlnValue(v: $T) {
    PrintValue(v)
    Println("")
}

fn PrintValue(v: $T) {
    if @isbool(T) {
        if v {
            PrintString("true")
        } else {
            PrintString("false")
        }
    } else if @isint(T) {
        PrintInt(v)
    } else if @isstring(T) {
        PrintString(v)
    } else {
        @error("Can't print value of unknown type")
    }
}
