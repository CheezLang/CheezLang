// #load("examples/trait_function_call_performance")
// #load("examples/graphyfier/graphyfier")
#load("examples/pathtracer2/main")
// #load("examples/geometry_draw_thingy")
// #load("examples/signed_distance_field_renderer")
// #load("compiler/main")
// #load("examples/pathtracer")
// #load("examples/snake/snake")

// #load("tests/language/local_variables")
// #load("tests/library/arena_allocator1")
//#load("tests/other/test1")
// #load("examples/project_euler/009_special_pythagorean_triplet")

/*
// #load("std:c")
#load("std:io/io")
// trait Drop {}

struct Test(T: type, S: type) {
    pub t: T
    pub s: S
}

typedef TestIS = Test[int, string]

fn test() -> [2]int, string {
    let a = [5, 3], "lol"

    return a
}
fn Main() {
    let c = TestIS(123, "uiae")

    let nums, s = test()
    printfln("nums: {}, {}, s: '{}'", (nums[0], nums[1], s))
    printfln("nums: {}, {}, s: '{}'", nums[0], nums[1], s)

    // let uiae = test()
    // printfln("nums: {}, s: '{}'", uiae)
}
// */

/*

#load("std:preload")
#load("std:io/io")

fn try_catch(r: $T, code: Code) #macro {
    match r {
        Ok($v) -> v
        Err($e) -> {
            let err = e
            @insert(code, link=[err])
        }
    }
}

fn try(r: $T) #macro {
    match r {
        Ok($v) -> v
        Err($e) -> {
            return Err(e)
        }
    }
}

fn test(b: bool) -> Result(int, int) {
    if b {
        return Ok(5)
    } else {
        return Err(-1)
    }
}

fn foo() -> Result(int, int) {
    let i = try(test(false))
    println(i)
    return Ok(0)
}

fn Main() {
    println(foo())
    println("==========")
    // try_catch(test(false), {})
    try_catch(test(false), printfln("test1: err: {}", err))
}

// */
