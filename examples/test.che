// import examples.trait_function_call_performance
import examples.glfw3_example
// import examples.graphyfier.graphyfier
// import examples.pathtracer2.main
// import examples.geometry_draw_thingy
// import examples.signed_distance_field_renderer
// import examples.snake.snake
// import examples.pathtracer
// import examples.command_line_parser
// import examples.ShmupEngine.src.main
// import examples.CBindingGenerator.src.main
// import compiler.cli
// import compiler.compiler_test

// import examples.postfix
// import examples.image_processing
// import examples.clox.main
// import examples.lua_example

// import "tests/language/match"
// import tests.language.match3
// import tests.library.hash_table1
// import tests.other.test1
// import "examples/project_euler/018_maximum_path_sum_1"
// import bugs.bug1

// import "../Tools/Bindings/imgui_binding"

/*
#test_expect_output("")

// use import std.os.windows_functions
// use import std.os.windows_types
// use import std.os.windows_constants
// use import std.io.file
// use import std.io.fs
// use import std.string
// use import std.array
// use import std.hash_table
// use import std.mem.allocator
io  :: import std.io
// fmt :: import std.fmt
C   :: import std.c

use import compiler.ast
use import compiler.lexer
use import compiler.parser
use import compiler.error_handler
use import compiler.string_database

Main :: () {
    file :: "uiae.che"

    console_error_handler := ConsoleErrorHandler.new(null)
    console_error_handler.code_color_error  = io.ConsoleColor.Green
    console_error_handler.code_color_normal = io.ConsoleColor.White
    string_db := StringDatabase.new()
    lexer := try_with(
        Lexer.from_file(file, string_db),
        {
            io.printfln("Failed to open file '{}'", file)
            return
        })

    pattern := IdExpr(id = 1, name = "foo")
    init    := IdExpr(id = 2, name = "bar")

    move := MoveExpr(id = 1, target = pattern, source = init)
    pipe := PipeExpr(id = 1, left = move, right = pattern)

    decl := DeclStmt(
        id       = 3
        is_const = true
        pattern  = pattern
        typ      = Some(init)
        init     = Some(pipe))
    io.println(pattern)
    io.println(init)
    io.println(decl)

    loop {
        token := lexer.next_token()
        if int(token.ttype) == int(TokenType.EOF) then break

        
    }
}
// */