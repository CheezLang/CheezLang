// examples which should be working
// import examples.trait_function_call_performance
// import examples.glfw3_example
// import examples.graphyfier.graphyfier
// import examples.geometry_draw_thingy
// import examples.signed_distance_field_renderer
// import examples.snake.snake
// import examples.pathtracer
// import examples.pathtracer2.main
// import examples.command_line_parser
// import compiler.cli
// import compiler.compiler_test
// import examples.ShmupEngine.src.main

use import compiler.interpreter
use import json.json
use import clap.clap
use import dap.debug_adapter


use import std.array
use import std.hash_table
use import std.map
use import std.string
use import std.box
use import std.rc
use import std.thread

use import std.os.windows
use import std.os.windows_functions

io  :: import std.io
mem :: import std.mem.allocator
fmt :: import std.fmt
fs  :: import std.io.fs

LOG_PATH :: "P:/dev/CheezLang/data/log.txt"
CBC_FILE :: "p:/dev/debug_adapter_test/fac.cbc"

Breakpoint :: struct #copy {
    line : int
}

CBCDebugger :: struct {
    interp  : &Interpreter
    mutex   : Mutex
    thread  : Thread
    running : bool
    _step   : bool
    logger  : ref Logger
    adapter : &DebugAdapter

    breakpoints : Array[Breakpoint]

    break_when_fp_is_less_than  := 0
    ignore_breakpoints          := false
}

impl CBCDebugger {
    new :: (logger: ref Logger) -> Rc[CBCDebugger] {
        interp := {
            code : String = match fs.read_file(CBC_FILE) {
                Ok($content) -> content
                Err($err) -> {
                    logger.log_error("{}", [err]) 
                    String.empty()
                }
            }

            prog := compile_program(code.slice(), CBC_FILE)
            if prog == null {
                logger.log_error("failed to compile program")
                @assert(false)
            }
            prog.call("main")
            prog
        }

        cbc_debugger := mem.alloc(CBCDebugger)
        <<cbc_debugger = CBCDebugger(
            interp  = interp
            mutex   = Mutex.new()
            thread  = Thread.create((p: &CBCDebugger) => p.run(), cbc_debugger)
            running = false
            _step   = true
            logger  = logger
            adapter = null
            breakpoints = Array[Breakpoint].create()
        )

        interp.printer = cast cbc_debugger.print

        cbc_debugger.thread.start()
        
        return Rc[CBCDebugger].from_pointer(cbc_debugger, owned = true)
    }

    wait_for_mutex :: (ref Self) {
        mutex.lock()
        mutex.release()
    }

    pause :: (ref Self) {
        running = false
    }

    launch :: (ref Self) {
        _step = false
        break_when_fp_is_less_than = 0
        ignore_breakpoints = false
        running = true
    }

    resume :: (ref Self) {
        _step = false
        break_when_fp_is_less_than = 0
        ignore_breakpoints = true
        running = true
    }

    step :: (ref Self) {
        running = false
        wait_for_mutex()
        _step = false
        break_when_fp_is_less_than = interp.fp + 1
        ignore_breakpoints = true
        running = true
    }

    step_in :: (ref Self) {
        running = false
        wait_for_mutex()
        _step = true
        break_when_fp_is_less_than = 0
        ignore_breakpoints = true
        running = true
    }

    step_out :: (ref Self) {
        running = false
        wait_for_mutex()
        _step = false
        break_when_fp_is_less_than = interp.fp
        ignore_breakpoints = true
        running = true
    }

    print :: (ref Self, value: int) {
        adapter.emit_output_event(fmt.format("{}\n", [value]))
    }

    run :: (ref Self) {
        loop {
            if running {
                mutex.lock()
                loop {
                    if !ignore_breakpoints and breakpoints.count() > 0 {
                        frame := ref interp.get_stackframes()[interp.fp]
                        line := frame.func.debug_info.get_line_for_ip(frame.ip, logger)
                        for breakpoint : breakpoints {
                            if breakpoint.line == line {
                                running = false
                                adapter.emit_stop_event("breakpoint")
                                break
                            }
                        }

                        if !running then break
                    } else {
                        ignore_breakpoints = false
                    }
                    if !running then break

                    match interp.step() {
                        .Done -> {
                            running = false
                            adapter.emit_terminated_event()
                            break
                        }
                    }

                    if _step {
                        running = false
                        adapter.emit_stop_event("step")
                        break
                    } else if interp.fp < break_when_fp_is_less_than {
                        break_when_fp_is_less_than = 0
                        running = false
                        adapter.emit_stop_event("step")
                        break
                    }
                }
                mutex.release()
            } else {
                Thread.sleep(10)
            }
        }
    }

    get_stackframes :: (ref Self) -> []StackFrame {
        pause()
        mutex.lock()
        mutex.release()
        return interp.get_stackframes()
    }
}

VariableRef :: trait {
    interp  : &Interpreter
    frame   : int
    name    : String
    hint    : String
    index   : int

    get_variables :: (ref Self) -> Array[Rc[VariableRef]];
}

ArgumentsScope :: struct VariableRef {

}

impl ArgumentsScope {
    new :: (interp: &Interpreter, frame: int) -> Rc[ArgumentsScope] {
        return Rc[ArgumentsScope].new(ArgumentsScope(interp, frame, "Arguments".to_string(), "arguments".to_string(), -1))
    }
}

impl VariableRef for ArgumentsScope {
    get_variables :: (ref Self) -> Array[Rc[VariableRef]] {
        result := Array[Rc[VariableRef]].create()
        stackframe := ref interp.get_stackframes()[self.frame]
        for name : stackframe.func.debug_info.parameters {
            value := stackframe.stack[stackframe.bp - it_index - 1]
            var := Variable.new(interp, frame, name.clone(), fmt.format("{}", [value]))
            result.add(var.clone().change_type(VariableRef))
        }
        return result
    }
}

LocalsScope :: struct VariableRef {

}

impl LocalsScope {
    new :: (interp: &Interpreter, frame: int) -> Rc[LocalsScope] {
        return Rc[LocalsScope].new(LocalsScope(interp, frame, "Locals".to_string(), "locals".to_string(), -1))
    }
}

impl VariableRef for LocalsScope {
    get_variables :: (ref Self) -> Array[Rc[VariableRef]] {
        result := Array[Rc[VariableRef]].create()
        stackframe := ref interp.get_stackframes()[self.frame]
        for name : stackframe.func.debug_info.locals {
            value := stackframe.stack[stackframe.bp + it_index]
            var := Variable.new(interp, frame, name.clone(), fmt.format("{}", [value]))
            result.add(var.clone().change_type(VariableRef))
        }
        return result
    }
}

RegistersScope :: struct VariableRef {

}

impl RegistersScope {
    new :: (interp: &Interpreter, frame: int) -> Rc[RegistersScope] {
        return Rc[RegistersScope].new(RegistersScope(interp, frame, "Registers".to_string(), "registers".to_string(), -1))
    }
}

impl VariableRef for RegistersScope {
    get_variables :: (ref Self) -> Array[Rc[VariableRef]] {
        result := Array[Rc[VariableRef]].create()

        stackframe := ref interp.get_stackframes()[self.frame]

        ip := Variable.new(interp, frame, "ip".to_owned(), fmt.format("{}", [stackframe.ip]))
        result.add(ip.clone().change_type(VariableRef))
        sp := Variable.new(interp, frame, "sp".to_owned(), fmt.format("{}", [stackframe.sp]))
        result.add(sp.clone().change_type(VariableRef))
        bp := Variable.new(interp, frame, "bp".to_owned(), fmt.format("{}", [stackframe.bp]))
        result.add(bp.clone().change_type(VariableRef))

        return result
    }
}

Variable :: struct VariableRef {
    value : String
}

impl Variable {
    new :: (interp: &Interpreter, frame: int, name: String, value: String) -> Rc[Variable] {
        return Rc[Variable].new(Variable(interp, frame, name, String.empty(), -1, value))
    }
}

impl VariableRef for Variable {
    get_variables :: (ref Self) -> Array[Rc[VariableRef]] {
        result := Array[Rc[VariableRef]].create()
        return result
    }
}

CheezDebugAdapter :: struct CommandHandler {
    cbc_debugger    : Rc[CBCDebugger]
    variable_refs   : Array[Rc[VariableRef]]
}

impl CheezDebugAdapter {
    new :: (cbc_debugger: Rc[CBCDebugger]) -> Box[CommandHandler] {
        return Box[CommandHandler].new(CheezDebugAdapter(
            adapter         = null
            cbc_debugger    = cbc_debugger
            variable_refs   = Array[Rc[VariableRef]].create()
        ))
    }
}

impl CommandHandler for CheezDebugAdapter {
    initialize :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        body := Table[string, JsonValue].create(strings_equal)

        adapter.emit_event("initialized", JsonValue.JsonNull)

        return Ok(JsonValue.JsonObject(body))
    }

    clear_variable_refs :: (ref Self) {
        variable_refs.clear()
    }

    get_variable_reference :: (ref Self, index: int) -> ref VariableRef {
        @assert(index >= 1 and index <= variable_refs.count())
        return variable_refs[index - 1].get()
    }

    add_variable_ref :: (ref Self, var_ref: Rc[VariableRef]) -> int {
        index := variable_refs.count() + 1
        var_ref.get().index = index
        variable_refs.add(var_ref)
        return index
    }

    launch :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().launch()
        return Ok(JsonValue.JsonObject(body))
    }

    threads :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        thread0 := Table[string, JsonValue].create(strings_equal)
        thread0["id"] = JsonValue.JsonNumber(0)
        thread0["name"] = JsonValue.JsonString("Main Thread".to_owned())

        threads := Array[JsonValue].create()
        threads.add(JsonValue.JsonObject(thread0))

        body := Table[string, JsonValue].create(strings_equal)
        body["threads"] = JsonValue.JsonArray(threads)

        return Ok(JsonValue.JsonObject(body))
    }

    set_breakpoints :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        body := Table[string, JsonValue].create(strings_equal)

        breakpoints := arguments.at("breakpoints").as_array().clone()
        cbc_debugger.get().breakpoints.clear()

        for(by_ref=true) br_json : breakpoints.slice() {
            br := br_json.as_map().clone()
            line := cast(int) br.at("line").to_number()
            cbc_debugger.get().breakpoints.add(Breakpoint(line - 1))
        }

        return Ok(JsonValue.JsonObject(body))
    }

    stacktrace :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        cbc_debugger.get().pause()
        frames := cbc_debugger.get().get_stackframes()

        stack_frames := Array[JsonValue].create()

        use_prev_ip := false
        for(by_ref=true, reverse=true) frame : frames {
            defer { use_prev_ip = true }
            ip := if use_prev_ip then frame.ip_prev else frame.ip
            line := frame.func.debug_info.get_line_for_ip(ip, adapter.logger)

            adapter.logger.log("stackframe: line: {}, func: '{}', path: '{}'", [line, frame.func.name, frame.func.debug_info.path])

            json := Table[string, JsonValue].create(strings_equal)
            json["id"] = JsonValue.JsonNumber(cast(double) frames.length - it_index - 1)
            json["name"] = JsonValue.JsonString(frame.func.name.clone())

            frame_source := Table[string, JsonValue].create(strings_equal)
            frame_source["name"] = JsonValue.JsonString("fac.cbc".to_owned()) // @todo
            frame_source["path"] = JsonValue.JsonString(frame.func.debug_info.path.clone())

            json["source"] = JsonValue.JsonObject(frame_source)
            json["line"] = JsonValue.JsonNumber(cast(double) line + 1)
            json["column"] = JsonValue.JsonNumber(5) // @todo

            stack_frames.add(JsonValue.JsonObject(json))
        }

        body := Table[string, JsonValue].create(strings_equal)
        body["stackFrames"] = JsonValue.JsonArray(stack_frames)
        
        return Ok(JsonValue.JsonObject(body))
    }

    collect_scopes :: (ref Self, frame: int) -> Array[Rc[VariableRef]] {
        result := Array[Rc[VariableRef]].create()


        locals := LocalsScope.new(cbc_debugger.get().interp, frame)
        result.add(locals.clone().change_type(VariableRef))
        args := ArgumentsScope.new(cbc_debugger.get().interp, frame)
        result.add(args.clone().change_type(VariableRef))

        registers := RegistersScope.new(cbc_debugger.get().interp, frame)
        result.add(registers.clone().change_type(VariableRef))

        return result
    }

    scopes :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        frame_id := cast(int) arguments.at("frameId").to_number()

        // cbc_debugger.get().pause()
        frame := ref cbc_debugger.get().get_stackframes()[frame_id]
        scopes_json := Array[JsonValue].create()

        scopes := collect_scopes(frame_id)
        for scope : scopes {
            add_variable_ref(scope.clone().change_type(VariableRef))

            json := Table[string, JsonValue].create(strings_equal)
            json["name"] = JsonValue.JsonString(scope.get().name.clone())
            json["presentationHint"] = JsonValue.JsonString(scope.get().hint.clone())
            json["variablesReference"] = JsonValue.JsonNumber(cast(double) scope.get().index)

            scopes_json.add(JsonValue.JsonObject(json))
        }

        body := Table[string, JsonValue].create(strings_equal)
        body["scopes"] = JsonValue.JsonArray(scopes_json)
        return Ok(JsonValue.JsonObject(body))
    }

    variables :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        index := cast(int) arguments.at("variablesReference").to_number()

        cbc_debugger.get().pause()
        variables_json := Array[JsonValue].create()

        var_ref := ref get_variable_reference(index)
        vars := var_ref.get_variables()
        for var : vars {
            add_variable_ref(var.clone())

            json := Table[string, JsonValue].create(strings_equal)

            json["name"] = JsonValue.JsonString(var.get().name.clone())

            match ref var.get() {
                Variable($var) -> {
                    json["value"] = JsonValue.JsonString(var.value.clone())
                    json["variablesReference"] = JsonValue.JsonNumber(0)
                }

                $scope -> {
                    json["presentationHint"] = JsonValue.JsonString(scope.hint.clone())
                    json["variablesReference"] = JsonValue.JsonNumber(cast(double) scope.index)
                }
            }

            variables_json.add(JsonValue.JsonObject(json))
        }

        body := Table[string, JsonValue].create(strings_equal)
        body["variables"] = JsonValue.JsonArray(variables_json)
        return Ok(JsonValue.JsonObject(body))
    }

    pause :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().pause()
        adapter.emit_stop_event("pause")
        return Ok(JsonValue.JsonObject(body))
    }

    resume :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        clear_variable_refs()
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().resume()
        return Ok(JsonValue.JsonObject(body))
    }

    next :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        clear_variable_refs()
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().step()
        return Ok(JsonValue.JsonObject(body))
    }

    step_in :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        clear_variable_refs()
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().step_in()
        return Ok(JsonValue.JsonObject(body))
    }

    step_out :: (ref Self, arguments: ref Table[string, JsonValue]) -> Result[JsonValue, String] {
        clear_variable_refs()
        body := Table[string, JsonValue].create(strings_equal)
        cbc_debugger.get().step_out()
        return Ok(JsonValue.JsonObject(body))
    }
}

Main :: () {
    logger := Logger.new(LOG_PATH)
    logger.get().clear()

    cbc_debugger := CBCDebugger.new(logger.get())
    handler := CheezDebugAdapter.new(cbc_debugger.clone())
    adapter := DebugAdapter.new(handler, logger.get())
    cbc_debugger.get().adapter = &adapter.get()

    adapter.get().run()

    // args_array := get_cmd_args()
    // io.formatln(args_array.slice())

    // if args_array.count() == 1 {
    //     io.println("missing arg")
    //     return
    // }

    // match fs.read_file(args_array[1].slice()) {
    //     Ok($file_content) -> {
    //         val := parse_json(JsonValue, file_content.slice())

    //         match ref val {
    //             Some($val) -> {
    //                 io.formatln("{:p}", [val])

    //                 io.println("========================")
    //                 // fs.write_file("../data/")
    //                 io.println(serialize_json_value(val))
    //             }
    //         }
    //     }

    //     Err($err) -> {
    //         io.formatln(err)
    //     }
    // }

}

// examples which are not working currently
// import examples.image_processing
// import examples.postfix
// import examples.clox.main
// import examples.lua_example

// tests
// import "tests/language/match"
// import tests.language.match3
// import tests.library.hash_table1
// import tests.other.test1
// import "examples/project_euler/018_maximum_path_sum_1"
// import bugs.bug1

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

// io :: import std.io

// Foo :: struct {
//     x : int
//     y : int
//     z : int
// }

// Main :: () {
//     b := FooBuilder.new()
//     io.formatln(b)
//     f1 := FooBuilder.new().build()                      // compiler error, FooBuilder[Empty] has no method build
//     f2 := FooBuilder.new().z(1).build()                 // compiler error, FooBuilder[X] has no method build
//     f3 := FooBuilder.new().x(1).y(2).build()            // compiler error, FooBuilder[X or Y] has no method build
//     f4 := FooBuilder.new().x(1).y(2).z(3).build()       // works
//     // f4 := FooBuilder.new().y(1).x(2).z(3).x(-1).build() // works

//     // io.formatln(f4)
// }

// FooBuilder :: struct(Flags: int) {
//     _x : int = default
//     _y : int = default
//     _z : int = default
// }

// impl FooBuilder {
//     new :: () -> FooBuilder[0] {
//         return FooBuilder[0]()
//     }
// }

// impl(Flags: int) FooBuilder[Flags] {
//     x :: (Self, v: int) -> FooBuilder[@bin_or(Flags, 1)] {
//         return @expected()(v, _y, _z)
//     }
//     y :: (Self, v: int) -> FooBuilder[@bin_or(Flags, 2)] {
//         return @expected()(_x, v, _z)
//     }
//     z :: (Self, v: int) -> FooBuilder[@bin_or(Flags, 4)] {
//         return @expected()(_x, _y, v)
//     }
// }

// impl FooBuilder[7] {
//     build :: (Self) -> Foo {
//         return Foo(_x, _y, _z)
//     }
// }

// FooBuilderFlags :: enum #flags {
//     Empty, X, Y, Z
// }

// FooBuilder :: struct(Flags: FooBuilderFlags) {
//     _x : int = default
//     _y : int = default
//     _z : int = default
// }

// impl FooBuilder {
//     new :: () -> FooBuilder[FooBuilderFlags.Empty] {
//         return @expected()()
//     }
// }

// impl(Flags: FooBuilderFlags) FooBuilder[Flags] {
//     x :: (Self, v: int) -> FooBuilder[Flags or FooBuilderFlags.X] {
//         return @expected()(v, _y, _z)
//     }
//     y :: (Self, v: int) -> FooBuilder[Flags or FooBuilderFlags.Y] {
//         return @expected()(_x, v, _z)
//     }
//     z :: (Self, v: int) -> FooBuilder[Flags or FooBuilderFlags.Z] {
//         return @expected()(_x, _y, v)
//     }
// }

// impl FooBuilder[FooBuilderFlags.X or FooBuilderFlags.Y or FooBuilderFlags.Z] {
//     build :: (Self) -> Foo {
//         return Foo(_x, _y, _z)
//     }
// }

// use import std.string
// io   :: import std.io
// fmt  :: import std.fmt

// Expr :: trait {
//     id  : int
//     typ : string
//     eval :: (ref Self) -> int;
//     to_string :: (ref Self) -> String;
// }

// Const :: struct Expr {
//     value   : int
// }

// Binary :: struct Expr {
//     op      : enum #copy {Add, Sub, Mul, Div}
//     left    : &Expr
//     right   : &Expr
// }

// impl Expr for Const {
//     eval :: (ref Self) -> int {
//         return value
//     }

//     to_string :: (ref Self) -> String {
//         return fmt.format("{}:{}", [value, typ])
//     }
// }

// impl Expr for Binary {
//     eval :: (ref Self) -> int {
//         return match op {
//             .Add -> left.eval() + right.eval()
//             .Sub -> left.eval() - right.eval()
//             .Mul -> left.eval() * right.eval()
//             .Div -> left.eval() / right.eval()
//         }
//     }

//     to_string :: (ref Self) -> String {
//         l := left.to_string()
//         r := right.to_string()
//         o := match op {
//             .Add -> "+"
//             .Sub -> "-"
//             .Mul -> "*"
//             .Div -> "/"
//         }
//         return fmt.format("({}){}({}):{}", [l.slice(), o, r.slice(), typ])
//     }
// }

// Main :: () {
//     a := Const(id=0, typ="int", value=1)
//     b := Const(id=1, typ="int", value=2)
//     c := Const(id=2, typ="int", value=3)
//     d := Binary(id=3, typ="int", op = .Mul, left=&b, right=&c)
//     e := Binary(id=4, typ="int", op = .Add, left=&a, right=&d)

//     expr : &Expr = &e

//     io.println(expr.id)
//     io.println(expr.typ)
//     io.println(expr.to_string())
//     io.println(expr.eval())

// }

/*

use import std.string
use import std.printable
use import std.array
use import std.box
use import std.math
io   :: import std.io
fmt  :: import std.fmt
mem  :: import std.mem.allocator
util :: import std.util
C    :: import std.c

use import clap.clap2
use import clap.clap_printable

Command :: enum {
    #name("star")   Star
    #name("start")  Start
    #name("stop")   Stop
    #name("test")   Test    : Foo
    #name("switch") Switch  : Mode
}
Foo :: struct {
    mode   : Mode
    banana : int
    bazaza : String
    baz    : Baz
    array  := Array[string].create()
}
Baz :: struct {
    name : String
    age  : int
}
Mode :: enum {
    #name("on") On
    #name("off") Off
}

Main :: () {
    command := "test -mode of -baz -nam "
    args := Clap.tokenize(command)

    io.println("Arguments`n==========")
    for(by_ref=true) a : args {
        io.formatln(a)
    }
    io.println("==========")

    result := parse_args(@type_info(Command), args.slice())
    io.println("===")
    io.println(fmt.format_any(result))
    io.println("===")

    match ref result {
        Some($result) -> {
            match get_value(Command, result.get()) {
                Ok($result) -> io.formatln(result)
                Err($err)   -> print_error_message(command, err)
            }
        }
    }

    io.println("-------------------`n`n")

    for at : 0 .. (command.bytes.length + 1) {
        io.formatln(command)
        for 0 .. at do io.print(" ")
        io.println("^")
        auto_completions := get_auto_completions_at(@type_info(Command), result, at)
        for completion : auto_completions {
            io.formatln("> {}", [completion.slice()])
        }
        io.println("---`n")
    }
}

impl CustomParser for String {
    parse :: (args: []ClapToken, loc: Location) -> Option[Box[Expr]], []ClapToken {
        // io.println("String.parse")
        result := mem.alloc(CustomExpr)
        <<result = CustomExpr(@type_info(Self), loc, create_empty_expr(null, loc))
        if args.length == 0 {
            return Some(Box[Expr].from_pointer(cast result)), args
        }

        result.sub = create_raw_expr(result.typ, args[0])
        return Some(Box[Expr].from_pointer(cast result)), args[1..args.length]
    }

    validate :: (expr: ref CustomExpr) -> Result[(), ClapError] {
        // io.println("String.validate")
        return match ref expr.sub.get() {
            ValueExpr($v)   -> Ok(())
            EmptyExpr($v)   -> Err(ClapError(v.loc, fmt.format("Missing value for string argument", [])))
            _               -> @assert(false)
        }
    }

    get_value :: (result: &void, expr: ref CustomExpr) {
        // io.println("String.get_value")
        match ref expr.sub.get() {
            ValueExpr($v) -> {
                <<cast(&String)result = v.raw.clone()
            }

            _ -> @assert(false)
        }
    }
}

// */