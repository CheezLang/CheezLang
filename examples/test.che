// import examples.trait_function_call_performance
// import examples.glfw3_example
// import examples.graphyfier.graphyfier
// import examples.pathtracer2.main
// import examples.geometry_draw_thingy
// import examples.signed_distance_field_renderer
// import examples.snake.snake
// import examples.pathtracer
// import examples.print_any
// import examples.command_line_parser
// import compiler.cli
// import compiler.compiler_test

// import examples.postfix
// import examples.image_processing
// import examples.clox.main
// import examples.lua_example

// import tests.language.loop2
// import tests.library.all_include
// import tests.other.test1
// import "examples/project_euler/018_maximum_path_sum_1"
// import bugs.bug1

//*
#test_expect_output("")

use import std.os.windows_functions
use import std.os.windows_types
use import std.os.windows_constants
use import std.io.file
use import std.io.fs
use import std.string
use import std.array
use import std.hash_table
use import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt
C   :: import std.c

Foo :: struct {
    a : int
}

impl Drop for Foo {
    drop :: (ref Self) {
        io.printfln("~Foo({})", a)
    }
}

Bar :: struct {
    foo : Option[Foo]
}

// test :: (foo: Option[Foo]) {
//     io.println("test()")
//     match foo {
//         Some($foo) -> {
//             io.printfln("Some(Foo({}))", foo.a)
//         }
//         None -> io.println("None")
//     }
// }

Main :: () {
    io.println("main()")
    bar := Bar(Some(Foo(123)))
    test(bar.foo <- Some(Foo(456)))
    io.println("... main()")
    // test(bar.foo <- None)
    // match bar.foo {
    //     Some($foo) -> io.printfln("Some(Foo({}))", foo.a)
    //     None -> io.println("None")
    // }
}
// */