// #load("examples/geometry_draw_thingy")
// #load("examples/trait_function_call_performance")
// #load("examples/signed_distance_field_renderer")
// #load("compiler/main")
// #load("examples/pathtracer")
// #load("tests/library/stack_allocator")
// #load("tests/language/tuple")

//*

#load("std:io/io")
// #load("std:array")

// fn for_array(array: ref Array($T), $body: Code, $reverse: bool = false, $reference: bool = false, count: int = -1) #for {
//     if count < 0 or count > array.get_length() {
//         count = array.get_length()
//     }

//     while let i = 0; i < count; i += 1 {
//         let it #export #for_var = const if reference then ref array[i] else array[i]
//         let it_index #export #for_index = i
//         #insert body
//     }
// }

fn macro_test(a: int) #macro {
    // printfln("macro, a = {}, link(x) = {}", [a, @link(x)])
}

fn macro_test2() #macro {
    @link({
        let uiae = 10
    })
}

fn for_extension(arr: []$T, $code: Code, $reverse: bool = false) #macro #for {
    while let it_index = 0; it_index < arr.length; it_index += 1 {
        if const reverse {
            let it_index_rev = arr.length - it_index - 1
            let it = arr[it_index_rev]
            @insert(code, link=[it_index_rev])
        } else {
            let it = arr[it_index]
            @insert(code)
        }
    }
}

fn test() #main {

    let arr: []int = [9, 8, 7, 6, 5]

    for v, i :arr {
        printfln("[{}] = {}", [i, v])
    }
    println("")

    for :arr {
        printfln("[{}] = {}", [it_index, it])
    }
    println("")

    for(reverse = true) v, i :arr {
        printfln("[{0}/{2}] = {1}", [i, v, it_index_rev])
    }
    println("")

    for(reverse = true) :arr {
        printfln("[{0}/{2}] = {1}", [it_index, it, it_index_rev])
    }
    println("")

    // let uiae = "lol"
    // {
    //     let arr = [5, 3, 2]
    //     for_extension(arr, println(@sizeof(@link(T))))
    //     // macro_test3(arr, {
    //     //     printfln("arr[{}] = {}", [@link(it_index), @link(it)])
    //     //     // println(uiae)
    //     //     // println("test")
    //     // }, reverse = false)
    //     println("")
    // }

    // {
    //     let x = 123
    //     macro_test(x)
    //     macro_test(2 + 3 * x)
    // }

    // {
    //     macro_test2()
    //     println(uiae)
    // }

    // for i : arr {
    //     println(i)
    // }

    // for(count = 5) i, index : arr {
    //     println(i)
    //     println(index)
    // }

    // for #odd (count = 5) i, index : arr {
    //     println(i)
    //     println(index)
    // }

    /*
    for_array(arr, #code {
        println(it)
    })

    for_array(arr, #code {
        println(i)
        println(index)
    })

    for_array(arr, #code {
        println(i)
        println(index)
    }, count = 5)

    #scope_name tmp
    #scope(parent = #global_scope, array = arr, reverse = false, reference = false, count = -1) {
        if count < 0 or count > array.get_length() {
            count = array.get_length()
        }

        while let i = 0; i < count; i += 1 {
            let it #export #for_var = const if reference then ref array[i] else array[i]
            let it_index #export #for_index = i
            #scope(parent = tmp, it = it) {
                println(it)
            }
        }
    }

    #scope_name tmp2
    #scope(parent = #global_scope, array = arr, reverse = false, reference = false, count = -1) {
        if count < 0 or count > array.get_length() {
            count = array.get_length()
        }

        while let i = 0; i < count; i += 1 {
            let it #export #for_var = const if reference then ref array[i] else array[i]
            let it_index #export #for_index = i
            #scope(parent = tmp2, i = it, index = it_index) {
                println(i)
                println(index)
            }
        }
    }

    #scope_name tmp3
    #scope(parent = #global_scope, array = arr, reverse = false, reference = false, count = 5) {
        if count < 0 or count > array.get_length() {
            count = array.get_length()
        }

        while let i = 0; i < count; i += 1 {
            let it #export #for_var = const if reference then ref array[i] else array[i]
            let it_index #export #for_index = i
            #scope(parent = tmp3, i = it, index = it_index) {
                println(i)
                println(index)
            }
        }
    }

    // */
}

// */