#load("examples/trait_function_call_performance")
// #load("examples/graphyfier/graphyfier")
// #load("examples/pathtracer2/main")
// #load("examples/geometry_draw_thingy")
// #load("examples/signed_distance_field_renderer")
// #load("compiler/main")
// #load("examples/snake/snake")
// #load("examples/pathtracer")

// #load("tests/language/match3")
// #load("tests/library/arena_allocator1")
// #load("tests/other/test1")
// #load("examples/project_euler/005_smallest_multiple")


/*
#load("std:io/io")
#load("std:fiber")
#load("std:thread")
#load("std:c")

foo :: () {
    if c_rand() % 10 == 0 {
        @panic("uiae")
    }
    foo()
}

thread_func :: (_: &any) {
    c_srand(c_time(null) % 10)
    foo()
}

Main :: () {
    tp := ThreadPool.create(10)
    for 0..2 {
        tp.enqueue(thread_func, null)
        Sleep(1)
    }
    println("waiting")
    tp.terminate(true)
    println("done")
}

// */