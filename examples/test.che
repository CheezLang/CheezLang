#load("examples/olc/pixel_game_engine")
#load("std:io/io")

typedef Vec2 = Vector2(float)

struct MyGame {
    pge: &PixelGameEngine

    pos: Vec2
}

impl Game for MyGame {
    fn on_create(ref Self, pge: &PixelGameEngine) -> bool {
        self.pge = pge
        println("on_create()")

        pos = new Vec2{0, 0}
        return true
    }

    fn on_destroy(ref Self) -> bool {
        println("on_destroy()")
        return true
    }

    fn on_update(ref Self, dt: float) -> bool {
        pge.clear()

        let speed = 10.0f
        if pge.get_key(Key.RIGHT).held {
            pos.x += dt * speed
        }
        if pge.get_key(Key.LEFT).held {
            pos.x -= dt * speed
        }
        if pge.get_key(Key.DOWN).held {
            pos.y += dt * speed
        }
        if pge.get_key(Key.UP).held {
            pos.y -= dt * speed
        }

        pos.x = cast pge.get_mouse_pos().x
        pos.y = cast pge.get_mouse_pos().y

        pge.fill_rect(50, 50, 150, 200, Pixel::rgba(255, 255, 0))
        pge.draw_circle(400, 200, 50, Pixel::rgba(0, 255, 0))

        pge.draw_line(100, 100, cast pos.x, cast pos.y, Pixel::rgba(0, 255, 255), 0xf0f0f0f0)

        return true
    }
}

fn Main() {
    let myGame = new MyGame{}
    let pge = PixelGameEngine::create(myGame, 720, 400, 2, 2)
    match pge {
        OptionPGE.Some($pge) -> {
            pge.start()
            pge.dispose()
            free(pge)
        }

        OptionPGE.None -> {
            println("failed to create pixel game engine")
        }
    }
}
