// import examples.trait_function_call_performance
// import examples.glfw3_example
// import examples.graphyfier.graphyfier
// import examples.pathtracer2.main
// import examples.geometry_draw_thingy
// import examples.signed_distance_field_renderer
// import examples.snake.snake
// import examples.pathtracer
// import examples.print_any
// import examples.command_line_parser
// import compiler.cli
// import compiler.compiler_test

// import examples.postfix
// import examples.image_processing
// import examples.clox.main
// import examples.lua_example

// import tests.language.loop2
// import tests.library.all_include
// import tests.other.test1
// import "examples/project_euler/018_maximum_path_sum_1"
// import bugs.bug1

//*
#test_expect_output("")

use import std.os.windows_functions
use import std.os.windows_types
use import std.os.windows_constants
use import std.io.file
use import std.io.fs
use import std.string
use import std.array
use import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt
C   :: import std.c

use import compiler.lexer
use import compiler.error_handler
use import compiler.string_database

// impl string {
//     index_of :: (ref Self, ch: char) -> Option[int] {
//         return None
//     }
// }



Main :: () {
    a0 := 123_456
    a1 := 0b1101_1110
    a2 := 0xABC_789

    console_error_handler := ConsoleErrorHandler.new(null)
    string_db := StringDatabase.new()
    lexer := try_with(Lexer.from_file("D:\Programming\CheezLang\gen\uiae.che", string_db, console_error_handler), {return})
    console_error_handler.text_provider = lexer

    str := String.empty()

    loop {
        token := lexer.next_token()

        str.appendf("{}`n", token)

        if int(token.ttype) == int(TokenType.EOF) then break
    }

    write_file("out.txt", str.slice())
}
// */