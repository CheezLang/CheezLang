// import examples.trait_function_call_performance
// import examples.glfw3_example
// import examples.graphyfier.graphyfier
// import examples.pathtracer2.main
// import examples.geometry_draw_thingy
// import examples.signed_distance_field_renderer
// import examples.snake.snake
// import examples.pathtracer
// import examples.print_any
// import examples.command_line_parser
// import compiler.cli
import compiler.compiler_test

// import examples.postfix
// import examples.image_processing
// import examples.clox.main
// import examples.lua_example

// import "tests/language/match"
// import tests.language.match3
// import tests.library.hash_table1
// import tests.other.test1
// import "examples/project_euler/018_maximum_path_sum_1"
// import bugs.bug1

/*
#test_expect_output("")

// use import std.os.windows_functions
// use import std.os.windows_types
// use import std.os.windows_constants
// use import std.io.file
// use import std.io.fs
// use import std.string
// use import std.array
// use import std.hash_table
// use import std.mem.allocator
io  :: import std.io
// fmt :: import std.fmt
C   :: import std.c

impl Drop for Foo {
    drop :: (ref Self) {
        io.printfln("~Foo({})", x)
    }
}

Foo :: struct {
    x : int
}

Main :: () {
    foo := Foo(123)

    io.println("    match")
    match (ref foo, 2) {
        ($f, 3) -> {
            T :: @typeof(f)
            io.println("1")
        }

        ($f, _) -> {
            T :: @typeof(f)
            io.println("2")
        }
    }

    io.println(foo.x)

    io.println("    ende")
}
// */