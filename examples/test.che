// #load("tests/other/string1")
#load("test2")
// #load("std:util")
// #load("std:math")
// #load("std:string")
#load("std:array")


fn print_array(a: ref Array(int)) {
    c_printf("len: %lld`n", a.get_length())
    c_printf("cap: %lld`n", a.get_capacity())
    c_printf("ptr: %lld`n", a.get_raw())
    c_printf("arr: [")

    while let i = 0; i < a.get_length(); i += 1 {
        if i > 0 {
            c_printf(", ")
        }
        c_printf("%lld", a[i])
    }

    c_printf("]`n`n")
}

struct Foo {
    x: int
}

impl Foo {
    fn bar(ref Self) {
        self.x += 10
    }
}

fn Main() {
    let a = type Array(int)::create()

    print_array(a)

    a.resize(15)
    print_array(a)

    // a[0] = 0

    a.add(1)
    a.add(2)
    a.add(3)
    print_array(a)

    a += 1 + 5
    // a += 2 + 5
    // a += 3 + 5
    print_array(a)

    if let (ok, value) = a.get(-1); ok { c_printf("a[%lld] = %lld`n", -1, value) }
    if let (ok, value) = a.get(5); ok { c_printf("a[%lld] = %lld`n", 5, value) }
    if let (ok, value) = a.get(20); ok { c_printf("a[%lld] = %lld`n", 20, value) }

    a.free()
    print_array(a)
}