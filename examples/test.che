// #load("test2")
// #load("std:random")
// // #load("std:io/io")
#load("std:iterator")

#load("std:io/io")

struct Seq(T: type) {
    current: T
}
impl Iterator($T) for Seq(T) {
    fn next(ref Self) -> Option(T) {
        let c = current
        current += 1
        return Some(c)
    }

    fn dispose(ref Self) {}
}

fn Main() -> int {
    // let scu: IDistribution(double) = new StandardContinuousUniform{}
    // scu::samples()::take(10)::foreach(|d: double| {
    //     println(d)
    // })

    // println(scu::samples()::take(10)::sum())
    // println(scu::samples()::take(10)::map(|d: double| d*2)::sum())

    let it = cast(Iterator(int)) new Seq(int){1}

    let sum = it::take(5)::sum()
    // println(sum)

    return sum
}