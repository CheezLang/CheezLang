// #load("test2")
// #load("std:random")
// #load("std:io/io")
// #load("std:iterator")

#load("std:fiber")
#load("std:iterator")
#load("std:io/io")

fn generator(start: double, gen: ref GeneratorWithArg(double, double)) {
    while let i: double = start; true; i += 1 {
        gen.yield(i)
    }
}

fn Main() {
    let gen = GeneratorWithArg(double, double)::create(generator, 1.0)

    let it : Iterator(double) = ref <<gen
    it = it::take(5)
    it = it::map(|a: double| a * 2)

    while true {
        let i = it.next()
        match i {
            Some($v) -> println(v)
            None -> {
                break
            }
        }
    }
    println("done")
}