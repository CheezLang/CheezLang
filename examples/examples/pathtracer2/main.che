use import misc
use import objects
use import material
use import texture

use import std.math
use import std.random.mt
use import std.util
use import std.string
use import std.time
use import std.thread
use import std.array
use import std.profiling
use import std.mem.allocator
io :: import std.io
C :: import std.c

use import bmp.bmp

#export_scope

enable_profiler :: false
report_progress :: false
real            :: float

use_bhv     := true
num_threads := 10
grid_size   := 30

scale  := 1
width  := 192 * scale
height := 108 * scale
// width : int = 108 * scale
// height : int = 108 * scale
samples   := 100
max_depth := 15

scenes := [simple_light, cornell_box, basic_scene, random_scene, big_scene]
scene  := 0

mut file_write_mutex : ^mut Mutex = null

RenderContext :: struct {
    id      : int
    min     : Vector2[int]
    max     : Vector2[int]
    image   : []mut double
    world   : ^Hittable
    cam     : &Camera
    random  : Random
}

Main :: () {
    Instrumentor.init(true)
    Instrumentor.get().begin_session("pathtracer2", "pathtracer2.json")
    pathtracer2()
    Instrumentor.get().end_session()
}

pathtracer2 :: () {
    profile_function()
    file_write_mutex    = alloc(Mutex)
    *file_write_mutex  = Mutex.new()

    global_random       = alloc(MTwister)
    *global_random     = MTwister.create(0)

    C.srand(C.time(null))

    io.println(if use_bhv then "bhv enabled" else "bhv disabled")

    image   := alloc_n(double, cast width * height * 3)

    cam_pos := vec3(20.0, 2.25, 5.0)
    lookat  := vec3(4.0, 1.0, 1.0)
    cam     := Camera.create(
        cam_pos,
        lookat,
        10,
        real(width) / real(height),
        0.0,
        vec3.mag(cam_pos - lookat))

    world := scenes[scene](&cam)

    for 0..(get_time_milliseconds()%100) {
        global_random.next_double()
    }

    start := get_time_milliseconds()
    {
        mut thread_pool := ThreadPool.create(num_threads)

        mut id := 1
        size := grid_size
        h    := (height-1)/size+1
        w    := (width-1)/size+1
        for y in 0..h {
            for x in 0..w {
                context := alloc(RenderContext)
                *context = RenderContext(
                    id    = id
                    min   = Vector2[int](x*size, y*size)
                    max   = Vector2[int](min((x+1)*size, width), min((y+1)*size, height))
                    image = image
                    world = world
                    cam   = &cam
                    // random = Random.create(0)
                    random = Random.create(cast C.rand()) // crashes with seed not 0, wtf?
                )
                // io.printfln("thread {}: ({}, {}) -> ({}, {})", (context.id, context.min.x, context.min.y, context.max.x, context.max.y))

                // if global_random.next_double() < 0.5 {
                    thread_pool.enqueue(cast(fn(&RenderContext)) render_loop, &*context)
                // }

                id += 1
            }
        }

        thread_pool.terminate(true)
    }

    end := get_time_milliseconds()
    dur := double(end - start) / 1000

    io.printfln("resolution: {}x{}", (width, height))
    io.printfln("   samples: {}", samples)
    io.printfln("      time: {}s", dur)

    {
        profile_scope("write_bmp")
        write_bmp(cast width, cast height, image.data, "image.bmp")
    }
}

render_loop :: (context: ^mut RenderContext) {
    profile_function()
    {
        h := (height - 1) / grid_size + 1
        w := (width  - 1) / grid_size + 1
        count := w * h
        io.printfln("block {}/{}: ({}, {}) -> ({}, {})", (context.id, count, context.min.x, context.min.y, context.max.x, context.max.y))
    }

    for 0..(get_time_microseconds()%100) {
        context.random.next_double()
    }

    start := get_time_milliseconds()
    last_update := 0

    pixel_str := String.empty()

    for py, py_index in context.min.y..context.max.y {
        for px, px_index in context.min.x..context.max.x {
            pixel_str.clear()
            pixel_str.appendf("pixel {}, {}", (px, py))
            profile_scope(pixel_str.slice())

            mut col := vec3(0.0, 0.0, 0.0)
            for s in 0..samples {
                u := (real(px) + context.random.random_real()) / real(width)
                v := (real(height - py - 1) + context.random.random_real()) / real(height)
                r := context.cam.get_ray(u, v, &context.random)
                &col += color(r, context.world, &context.random)
            }

            col /= real(samples)

            // gamma correction
            col = vec3(real(sqrt(col.x)), real(sqrt(col.y)), real(sqrt(col.z)))

            *context.image[(px + py * width) * 3 + 0] = double(col.x)
            *context.image[(px + py * width) * 3 + 1] = double(col.y)
            *context.image[(px + py * width) * 3 + 2] = double(col.z)
        }
    }
    io.printfln("block {}: finished", context.id)

    if const report_progress {
        file_write_mutex.lock()
        write_bmp(cast width, cast height, context.image.data, "image.bmp")
        file_write_mutex.release()
    }
}

color :: (r: Ray, world: ^Hittable, random: &Random, depth: int = 0) -> vec3 {
    return match world.hit(&r, 0.001, 1000000.0, random) {
        Some($hit) -> {
            match hit.m.scatter(&r, &hit, random) {
                Scatter.ColorReflection($m) if depth < max_depth -> color(m.scattered, world, random, depth + 1) * m.att
                Scatter.Reflection($ray) if depth < max_depth -> color(ray, world, random, depth + 1)
                Scatter.Color($col) -> col

                $_ -> vec3(0.0, 0.0, 0.0)
            }
        }

        None -> {
            // t : real = 0.5 * (r.direction.y + 1)
            // vec3(1, 1, 1) * (1 - t) + vec3(0.5, 0.7, 1.0) * t
            vec3(0.0, 0.0, 0.0)
            // vec3(1, 1, 1)
        }
    }
}

random_scene :: (cam: &mut Camera) -> ^Hittable {
    io.println("random_scene")
    cam_pos := vec3(20.0, 2.25, 5.0)
    lookat  := vec3(4.0, 1.0, 1.0)
    *cam = Camera.create(
        cam_pos,
        lookat,
        10,
        real(width) / real(height),
        0.1,
        vec3.mag(cam_pos - lookat))

    //
    list := Array[^Hittable].create()
    list.add(create_object(Hittable, Sphere(
        center = vec3(0, -1000, 0)
        radius = 1000
        material = create_object(Material, Lambertian(
            CheckerTexture.create(
                ConstantTexture.create(vec3(0.1, 0.1, 0.1)),
                ConstantTexture.create(vec3(0.9, 0.9, 0.9))
            )
        ))
    )))

    for a in -11..11 {
        for b in -11..11 {
            choose_mat := global_random.random_real()
            center := vec3(
                x = real(a) + real(0.9) * global_random.random_real(),
                y = 0.2
                z = real(b) + real(0.9) * global_random.random_real()
            )

            if vec3.mag(center - vec3(4, 0.2, 0)) > 0.9 {
                if choose_mat < 0.65 { // diffuse
                    list.add(create_object(Hittable, Sphere(
                        center = center
                        radius = 0.2
                        material = create_object(Material, Lambertian(ConstantTexture.create(vec3(
                            x = global_random.random_real() * global_random.random_real()
                            y = global_random.random_real() * global_random.random_real()
                            z = global_random.random_real() * global_random.random_real()
                        ))))
                    )))
                } else if choose_mat < 0.75 { // emissive
                    list.add(create_object(Hittable, Sphere(
                        center = center
                        radius = 0.2
                        material = create_object(Material, Emissive(vec3(
                            x = 50 * global_random.random_real()
                            y = 50 * global_random.random_real()
                            z = 50 * global_random.random_real()
                        )))
                    )))
                } else if choose_mat < 0.9 { // metal
                    list.add(create_object(Hittable, Sphere(
                        center = center
                        radius = 0.2
                        material = create_object(Material, Metal(
                            albedo = vec3(
                                x = 0.5 * (1.0 + global_random.random_real())
                                y = 0.5 * (1.0 + global_random.random_real())
                                z = 0.5 * (1.0 + global_random.random_real())
                            )
                            roughness = 0.5 * global_random.random_real()
                        ))
                    )))
                } else { // glass
                    list.add(create_object(Hittable, Sphere(
                        center = center
                        radius = 0.2
                        material = create_object(Material, Dielectric(1.5))
                    )))
                }
            }
        }
    }

    list.add(create_object(Hittable, Sphere(
        center = vec3(0, 1, 0)
        radius = 1.0
        material = create_object(Material, Dielectric(1.5))
    )))
    list.add(create_object(Hittable, Sphere(
        center = vec3(-4, 1, 0)
        radius = 1.0
        material = create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.2, 0.1))))
    )))
    list.add(create_object(Hittable, Sphere(
        center = vec3(4, 1, 0)
        radius = 1.0
        material = create_object(Material, Metal(vec3(0.7, 0.6, 0.5), 0.0))
    )))

    box := create_object(Hittable, Box.create(
        vec3(-100, 0, -100), vec3(100, 1, 100), null
        // vec3(-4, 0, 1), vec3(4, 1, 2), null
    ))

    col : real = 1.0
    den : real = 0.075
    list.add(ConstantMedium.create(box, den, ConstantTexture.create(vec3(col, col, col))))

    if use_bhv {
        bhv := BhvNode.create(list.slice_mut())
        return create_object(Hittable, bhv)
    } else {
        return create_object(Hittable, list)
    }
}

basic_scene :: (cam: &mut Camera) -> ^Hittable {
    io.println("basic_scene")
    cam_pos := vec3(20.0, 2.25, 5.0)
    lookat  := vec3(4.0, 1.0, 1.0)
    *cam = Camera.create(
        cam_pos,
        lookat,
        10,
        real(width) / real(height),
        0.0,
        vec3.mag(cam_pos - lookat))

    list := Array[^Hittable].create()
    list.add(create_object(Hittable, Sphere(
        center = vec3(0, -1000, 0)
        radius = 1000
        material = create_object(Material, Lambertian(
            CheckerTexture.create(
                ConstantTexture.create(vec3(0.1, 0.1, 0.1)),
                ConstantTexture.create(vec3(0.9, 0.9, 0.9))
            )
        ))
    )))

    list.add(create_object(Hittable, Sphere(
        center = vec3(0, 1, 0)
        radius = 1.0
        material = create_object(Material, Dielectric(1.5))
    )))
    list.add(create_object(Hittable, Sphere(
        center = vec3(-4, 1, 0)
        radius = 1.0
        material = create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.2, 0.1))))
    )))
    list.add(create_object(Hittable, Sphere(
        center = vec3(4, 1, 0)
        radius = 1.0
        material = create_object(Material, Metal(vec3(0.7, 0.6, 0.5), 0.0))
    )))

    box := create_object(Hittable, Box.create(
        vec3(-100, 0, -100), vec3(100, 10, 100), null
        // vec3(-4, 0, 1), vec3(4, 1, 2), null
    ))

    col : real = 1.0
    den : real = 0.025
    list.add(ConstantMedium.create(box, den, ConstantTexture.create(vec3(col, col, col))))

    if use_bhv {
        bhv := BhvNode.create(list.slice_mut())
        return create_object(Hittable, bhv)
    } else {
        return create_object(Hittable, list)
    }
}

simple_light :: (cam: &mut Camera) -> ^Hittable {
    io.println("simple_light")
    *cam = Camera.create(
        vec3(20.0, 4.0, 5.0),
        vec3(4.0, 2.5, 1.0),
        20,
        real(width) / real(height)
    )

    list := Array[^Hittable].create()

    // ground
    list.add(create_object(Hittable, Sphere(
        center = vec3(0, -1000, 0)
        radius = 1000
        material = create_object(Material, Lambertian(
            CheckerTexture.create(
                ConstantTexture.create(vec3(0.1, 0.1, 0.1)),
                ConstantTexture.create(vec3(0.9, 0.9, 0.9))
            )
        ))
    )))

    list.add(create_object(Hittable, Sphere(
        center = vec3(0, 2, 0)
        radius = 2
        material = create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.7, 0.3))))
    )))

    list.add(create_object(Hittable, XYRect(
        3, 5, 1, 3, -2
        create_object(Material, Emissive(vec3(4, 4, 4)))
    )))

    if use_bhv {
        bhv := BhvNode.create(list.slice_mut())
        return create_object(Hittable, bhv)
    } else {
        return create_object(Hittable, list)
    }
}

cornell_box :: (cam: &mut Camera) -> ^Hittable {
    io.println("cornell_box")
    *cam = Camera.create(
        vec3(278, 278, -800),
        vec3(278, 278, 0),
        40,
        real(width) / real(height),
        0,
        10
    )

    // materials
    red := create_object(Material, Lambertian(ConstantTexture.create(vec3(0.65, 0.05, 0.05))))
    white := create_object(Material, Lambertian(ConstantTexture.create(vec3(0.73, 0.73, 0.73))))
    green := create_object(Material, Lambertian(ConstantTexture.create(vec3(0.12, 0.45, 0.15))))
    light := create_object(Material, Emissive(vec3(15, 15, 15)))

    // room
    list := Array[^Hittable].create()
    list.add(FlipNormals.create(create_object(Hittable, YZRect(  0, 555,   0, 555, 555, green))))  // left
    list.add(                    create_object(Hittable, YZRect(  0, 555,   0, 555,   0, red)))     // right
    list.add(                    create_object(Hittable, ZXRect(213, 343, 227, 332, 554, light)))   // light
    // list.add(FlipNormals.create(create_object(Hittable, ZXRect(  0, 555,   0, 555, 555, white))))  // ceiling
    list.add(                    create_object(Hittable, ZXRect(  0, 555,   0, 555,   0, white)))   // floor
    // list.add(FlipNormals.create(create_object(Hittable, XYRect(  0, 555,   0, 555, 555, white))))  // back

    // objects
    Box.create_faces(vec3(130, 0, 65), vec3(295, 165, 230), white, &list)
    Box.create_faces(vec3(265, 0, 295), vec3(430, 330, 460), white, &list)

    if use_bhv {
        bhv := BhvNode.create(list.slice_mut())
        return create_object(Hittable, bhv)
    } else {
        return create_object(Hittable, list)
    }
}

big_scene :: (cam: &mut Camera) -> ^Hittable {
    io.println("big_scene")
    // change random number gen for better level gen
    {
        global_random.next_double()
        global_random.next_double()
    }

    cam_pos := vec3(478, 278, -600)
    look_at := vec3(278, 278, 0)
    focus_point := vec3(220, 280, 300)
    // vec3(0, 150, 145),
    focus_dist := vec3.dot(vec3.normalized(look_at - cam_pos), focus_point - cam_pos) - 80

    *cam = Camera.create(
        cam_pos,
        look_at,
        35,
        real(width) / real(height),
        15,
        focus_dist
    )

    list := Array[^Hittable].create()

    nb := 20

    m_white := create_object(Material, Lambertian(ConstantTexture.create(vec3(0.73, 0.73, 0.73))))
    m_ground := create_object(Material, Lambertian(ConstantTexture.create(vec3(0.48, 0.83, 0.53))))

    // boxes
    {
        boxlist := Array[^Hittable].create()
        for i in 0..nb {
            for j in 0..nb {
                w := real(100.0)
                x0 := -1000.0 + real(i) * w
                z0 := -1000.0 + real(j) * w
                y0 := real(0)
                x1 := x0 + w
                y1 := 100.0 * (global_random.random_real() + 0.01)
                z1 := z0 + w
                list.add(create_object(Hittable, Box.create(vec3(x0, y0, z0), vec3(x1, y1, z1), m_ground)))
            }
        }
        // list.add(create_object(Hittable, BhvNode.create(boxlist.slice())))
    }

    // light
    m_light := create_object(Material, Emissive(vec3(7, 7, 7)))
    list.add(create_object(Hittable, ZXRect(50, 423, 200, 412, 634, m_light)))

    // spheres
    // matte
    list.add(create_object(Hittable, Sphere(vec3(400, 400, 200), 50, create_object(Material, Lambertian(ConstantTexture.create(vec3(0.7, 0.3, 0.1)))))))

    // glass
    list.add(create_object(Hittable, Sphere(vec3(260, 150, 45), 50, create_object(Material, Dielectric(1.5)))))

    // metal
    list.add(create_object(Hittable, Sphere(vec3(0, 150, 145), 50, create_object(Material, Metal(vec3(0.8, 0.8, 0.9), 0.2)))))

    // checker sphere
    if true {
        size := real(80.0)
        mat := CheckerMaterial.create(3.1415 / size * 2.0, vec3(-220, -280, -300),
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.6, 0.2, 0.4)))),
            create_object(Material, Metal(vec3(1, 1, 1), 0)))

        list.add(create_object(Hittable, Sphere(vec3(220, 280, 300), size, mat)))
    }

    // weird blue sphere
    if true {
        boundary := create_object(Hittable, Sphere(vec3(460, 150, 145), 70, create_object(Material, Dielectric(1.5))))

        list.add(boundary)
        list.add(ConstantMedium.create(boundary, 0.2, ConstantTexture.create(vec3(0.2, 0.4, 0.9))))
    }

    // fog
    if true {
        boundary := create_object(Hittable, Sphere(vec3(0, 0, 0), 5000, create_object(Material, Dielectric(1.5))))
        list.add(ConstantMedium.create(boundary, 0.0002, ConstantTexture.create(vec3(1, 1, 1))))
    }

    // lots of spheres
    if true {
        mats := [
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.6, 0.8))))
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.6, 0.8))))
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.8, 0.6))))
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.4, 0.8, 0.6))))
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.8, 0.6, 0.4))))
            create_object(Material, Lambertian(ConstantTexture.create(vec3(0.8, 0.6, 0.4))))
            create_object(Material, Emissive(vec3(2.0, 2.0, 2.0)))
            create_object(Material, Metal(vec3(1, 0.8, 0.8), 0.0))
            create_object(Material, Metal(vec3(1, 0.8, 0.8), 0.0))
            create_object(Material, Dielectric(1.5))
            create_object(Material, Dielectric(1.5))
        ]
        for j in 0..1000 {
            pos := vec3(
                165.0 * global_random.random_real() - 200.0
                165.0 * global_random.random_real() + 270.0
                165.0 * global_random.random_real() + 395.0
            )
            m := *mats[int(global_random.random_real() * real(mats.length))]
            list.add(create_object(Hittable, Sphere(pos, 10, m)))
        }

        // list.add(create_object(Hittable, BhvNode.create(boxlist.slice())))
    }

    if use_bhv {
        bhv := BhvNode.create(list.slice_mut())
        return create_object(Hittable, bhv)
    } else {
        return create_object(Hittable, list)
    }
}

// 

profile_scope :: (name: string) #macro #transparent {
    if const enable_profiler {
        _ := Timer.start(name)
    } else {
        _ := 0
    }
}

profile_function :: () #macro #transparent {
    if const enable_profiler {
        _ := Timer.start(@function_signature())
    } else {
        _ := 0
    }
}

profile_async :: (name: string, id: int, ph: string) #macro {
    if const enable_profiler {
        Instrumentor.get().
            write_profile_async(name, id, get_time_microseconds(), ph, Thread.current().id)
    }
}