use import main

use import std.math
use import std.random
use import std.printable
use import std.string
use import std.mem.allocator
use import std.random.mt

#export_scope

create_object :: ($T: type, val: $V) -> ^T {
    mem := alloc(V)
    *mem = val
    return mem
}

vec3 :: Vector3[real]

global_random : ^MTwister = null

Random :: MTwister

impl Random {
    random_real :: (&Self) -> real {
        return real(self.next_double())
    }

    random_in_unit_sphere :: (&Self) -> vec3 {
        p : vec3 = default
        while true {
            r := vec3(self.random_real(), self.random_real(), self.random_real())
            p = r * real(2.0) - vec3(1, 1, 1)
            if p.magsq() < 1 {
                break
            }
        }

        return p
    }

    random_in_unit_disk :: (&Self) -> vec3 {
        p : vec3 = default
        while true {
            r := vec3(self.random_real(), self.random_real(), 0.0)
            p = r * real(2.0) - vec3(1, 1, 0.0)
            if p.magsq() < 1 {
                break
            }
        }

        return p
    }
}

Ray :: struct #copy {
    origin    : vec3
    direction : vec3
}

impl Ray {
    from_to :: (a: vec3, b: vec3) -> Ray {
        dir := b - a
        return Ray(a, dir.normalized())
    }

    from_dir :: (a: vec3, dir: vec3) -> Ray {
        return Ray(a, dir.normalized())
    }

    at :: (&Self, t: real) -> vec3 {
        return origin + direction * t
    }
}

Camera :: struct {
    origin              : vec3
    lower_left_corner   : vec3
    horizontal          : vec3
    vertical            : vec3

    u: vec3
    v: vec3
    w: vec3

    lens_radius: real
}

impl Camera {
    create :: (pos: vec3, lookat: vec3, fov: real, aspect_ratio: real, aperture: real = 0.0, focus_dist: real = -1.0) -> Self {
        theta := fov * 3.1415 / 180
        half_height := real(tan(theta / 2.0))
        half_width := aspect_ratio * half_height

        up := vec3(0, 1, 0)
        w := vec3.normalized(pos - lookat)
        u := vec3.cross(&up, w).normalized()
        v := vec3.cross(&w, u)

        if focus_dist < 0.0 {
            focus_dist = vec3.mag(pos - lookat)
        }

        return Camera(
            lower_left_corner   = pos - u * half_width * focus_dist - v * half_height * focus_dist - w * focus_dist
            horizontal          = u * real(2.0) * half_width * focus_dist
            vertical            = v * real(2.0) * half_height * focus_dist
            origin              = pos
            u = u, v = v, w = w
            lens_radius = aperture * 0.5
        )
    }

    get_ray :: (&Self, s: real, t: real, random: &Random) -> Ray {
        rd := random.random_in_unit_disk() * lens_radius
        offset := u * rd.x + v * rd.y
        return Ray.from_to(origin + offset, lower_left_corner + horizontal * s + vertical * t)
    }
}

impl Printable for vec3 {
    print :: (&Self, str: &String, format: string) {
        str.appendf("v3({}, {}, {})", (x, y, z))
    }
}

impl Printable for Ray {
    print :: (&Self, str: &String, format: string) {
        str.appendf("ray({}, {})", (origin, direction))
    }
}

AABB :: struct #copy {
    _min: vec3
    _max: vec3
}

impl AABB {
    create :: (min: vec3, max: vec3) -> Self {
        return AABB(min, max)
    }

    help :: (min_w: real, max_w: real, origin_w: real, dir_w: real, t_min: &real, t_max: &real) -> bool {
        inv_d := real(1.0) / dir_w
        t0 := (min_w - origin_w) * inv_d
        t1 := (max_w - origin_w) * inv_d
        if inv_d < real(0.0) {
            (t0, t1) = (t1, t0)
        }
        *t_min = max(t0, *t_min)
        *t_max = min(t1, *t_max)
        return *t_max <= *t_min
    }

    hit :: (&Self, r: &Ray, t_min: real, t_max: real) -> bool {
        if help(_min.x, _max.x, r.origin.x, r.direction.x, &t_min, &t_max) {
            return false
        }
        if help(_min.y, _max.y, r.origin.y, r.direction.y, &t_min, &t_max) {
            return false
        }
        if help(_min.z, _max.z, r.origin.z, r.direction.z, &t_min, &t_max) {
            return false
        }

        return true
    }

    surrounding_box :: (a: &AABB, b: &AABB) -> AABB {
        small := vec3(
            x = min(a._min.x, b._min.x)
            y = min(a._min.y, b._min.y)
            z = min(a._min.z, b._min.z)
        )
        big := vec3(
            x = max(a._max.x, b._max.x)
            y = max(a._max.y, b._max.y)
            z = max(a._max.z, b._max.z)
        )

        return AABB.create(small, big)
    }
}


