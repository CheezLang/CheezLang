use import main
use import misc
use import texture
use import objects

use import std.math

#export_scope

MaterialRecord :: struct {
    att       : vec3
    scattered : Ray
}

Scatter :: enum {
    ColorReflection: MaterialRecord
    Reflection: Ray
    Color: vec3
    None
}

Material :: trait {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter;
}

//
Lambertian :: struct {
    albedo : ^Texture
}

impl Material for Lambertian {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        target := hit.p + hit.n + random.random_in_unit_sphere()
        ray := Ray.from_to(hit.p, target)
        color := albedo.value(0, 0, &hit.p)
        return Scatter.ColorReflection(MaterialRecord(color, ray))
    }
}

//
Emissive :: struct {
    color: vec3
}

impl Material for Emissive {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        return Scatter.Color(color)
    }
}

//
Metal :: struct {
    albedo    : vec3
    roughness : real = 0.0
}

impl Material for Metal {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        reflected := r.direction.reflect(hit.n) + random.random_in_unit_sphere() * roughness
        return if vec3.dot(reflected, hit.n) > 0 then
            Scatter.ColorReflection(MaterialRecord(albedo, Ray.from_dir(hit.p, reflected)))
        else
            Scatter.None
    }
}

//
Dielectric :: struct {
    ior: real
}

impl Material for Dielectric {
    schlick :: (cosine: real, ior: real) -> real {
        r0 := {
            r := (1.0 - ior) / (1.0 + ior)
            r * r
        }

        return r0 + (1.0 - r0) * real(pow(1.0 - cosine, 5))
    }

    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        dir_dot_n := vec3.dot(r.direction, hit.n)
        (outward_normal, ni_over_nt, cosine) := if dir_dot_n > 0 then
            (-hit.n, self.ior, self.ior * dir_dot_n)
        else
            (hit.n, 1.0 / self.ior, -dir_dot_n)

        reflected := r.direction.reflect(hit.n)
        return match r.direction.refract(outward_normal, ni_over_nt) {
            Some($refr) ->
                if random.random_real() > schlick(cosine, self.ior) then
                    Scatter.Reflection(Ray.from_dir(hit.p, refr))
                else
                    Scatter.Reflection(Ray.from_dir(hit.p, reflected))

            None -> Scatter.Reflection(Ray.from_dir(hit.p, reflected))
        }
    }
}



//
CheckerMaterial :: struct {
    size: real
    off : vec3
    even: ^Material
    odd : ^Material
}

impl CheckerMaterial {
    create :: (size: real, off: vec3, even: ^Material, odd: ^Material) -> ^Material {
        return create_object(Material, CheckerMaterial(size=size, off=off, even=even, odd=odd))
    }
}

impl Material for CheckerMaterial {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        sines := real(sin(size * (hit.p.x + off.x)) * sin(size * (hit.p.y + off.y)) * sin(size * (hit.p.z + off.z)))
        return if sines >= 0 then even.scatter(r, hit, random) else odd.scatter(r, hit, random)
    }
}

// isotropic
Isotropic :: struct {
    albedo: ^Texture
}

impl Material for Isotropic {
    scatter :: (&Self, r: &Ray, hit: &HitRecord, random: &Random) -> Scatter {
        return Scatter.ColorReflection(MaterialRecord(
            att         = albedo.value(hit.u, hit.v, &hit.p)
            scattered   = Ray.from_dir(hit.p, random.random_in_unit_sphere())
        ))
    }
}