use import main
use import misc
use import material
use import texture

use import std.array
use import std.math
use import std.mem.allocator
io :: import std.io

#export_scope

HitRecord :: struct {
    t : real
    p : vec3
    n : vec3
    m : ^Material
    u : real = 0
    v : real = 0
}

Hittable :: trait {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord];
    bounding_box :: (&Self) -> Option[AABB];
}

//
Sphere :: struct {
    center   : vec3
    radius   : real
    material : ^Material
}

impl Hittable for Sphere {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        oc := r.origin - center
        b := vec3.dot(oc, r.direction)
        c := vec3.dot(oc, oc) - radius * radius
        discriminant := b * b - c

        if discriminant > 0 {
            sqrt_dis := real(sqrt(discriminant))

            temp := -b - sqrt_dis
            if temp < t_max and temp > t_min {
                point := r.at(temp)
                return Some(HitRecord(
                    t = temp
                    p = point
                    n = (point - center) / radius
                    m = material
                ))
            }

            temp = -b + sqrt_dis
            if temp < t_max and temp > t_min {
                point := r.at(temp)
                return Some(HitRecord(
                    t = temp
                    p = point
                    n = (point - center) / radius
                    m = material
                ))
            }
        }
        return None
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(AABB.create(
            center - vec3(radius, radius, radius)
            center + vec3(radius, radius, radius)
        ))
    }
}

//
impl Hittable for Array[^Hittable] {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        hit := Option[HitRecord].None
        closest := t_max
        for self.slice() {
            match it.hit(r, t_min, closest, random) {
                Some($h) -> {
                    closest = h.t
                    hit = Some(h)
                }
            }
        }

        return hit
    }

    bounding_box :: (&Self) -> Option[AABB] {
        if self.get_length() == 0 {
            return None
        }

        box := match self[0].bounding_box() {
            Some($aabb) -> aabb
            None -> {
                return None
                AABB(default, default)
            }
        }

        for self.sliceF(1) {
            box = match it.bounding_box() {
                Some($aabb) -> AABB.surrounding_box(&box, &aabb)
                None -> {
                    return None
                    AABB(default, default)
                }
            }
        }

        return Some(box)
    }
}

//
BhvNode :: struct {
    left    : ^Hittable
    right   : ^Hittable
    box     : AABB
}

test_macro :: (name: string, arr: []^Hittable) {
    address := int(arr.data)
    io.printfln("{}: [{}] {}", (name, address, arr.length))
    for arr {
        it.bounding_box()
    }
}

quick_sort :: (arr: []^Hittable, cmp: fn (^Hittable, ^Hittable) -> int) {
        if arr.length <= 1 {
            return
        }

        idx := 0
        pivot := *arr[arr.length - 1]
        for i in 0..arr.length-1 {
            if cmp(*arr[i], pivot) > 0 {
                (*arr[idx], *arr[i]) = (*arr[i], *arr[idx])
                idx += 1
            }
        }
        (*arr[idx], *arr[arr.length - 1]) = (*arr[arr.length - 1], *arr[idx])

        quick_sort(arr[0..idx], cmp)
        quick_sort(arr[idx+1..arr.length], cmp)
    }

box_compare_x :: (a: ^Hittable, b: ^Hittable) -> int {
    return match (a.bounding_box(), b.bounding_box()) {
        (Some($a), Some($b)) -> if a._min.x - b._min.x < 0 then -1 else 1

        $_ -> {
            io.println("no bounding box in BhvNode constructor")
            0
        }
    }
}

box_compare_y :: (a: ^Hittable, b: ^Hittable) -> int {
    return match (a.bounding_box(), b.bounding_box()) {
        (Some($a), Some($b)) -> if a._min.y - b._min.y < 0 then -1 else 1

        $_ -> {
            io.println("no bounding box in BhvNode constructor")
            0
        }
    }
}

box_compare_z :: (a: ^Hittable, b: ^Hittable) -> int {
    return match (a.bounding_box(), b.bounding_box()) {
        (Some($a), Some($b)) -> if a._min.z - b._min.z < 0 then -1 else 1

        $_ -> {
            io.println("no bounding box in BhvNode constructor")
            0
        }
    }
}

impl BhvNode {
    create :: (l: []^Hittable) -> BhvNode {
        compare_funcs := [box_compare_x, box_compare_y, box_compare_z]
        quick_sort(l, *compare_funcs[int(global_random.random_real() * 3)])

        left, right : ^Hittable, ^Hittable = if l.length == 1 {
            (cast *l[0], cast *l[0])
        } else if l.length == 2 {
            (cast *l[0], cast *l[1])
        } else {
            mid := l.length / 2
            a := alloc(BhvNode)
            *a = BhvNode.create(l[0..mid])
            b := alloc(BhvNode)
            *b = BhvNode.create(l[mid..l.length])
            (@cast(^Hittable, a), @cast(^Hittable, b))
        }

        aabb := match (left.bounding_box(), right.bounding_box()) {
            (Some($a), Some($b)) -> AABB.surrounding_box(&a, &b)
            $_ -> {
                io.println("no bounding box in BhvNode constructor")
                AABB(default, default)
            }
        }

        return BhvNode(left, right, aabb)
    }
}

impl Hittable for BhvNode {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        if box.hit(r, t_min, t_max) {
            hit_left := left.hit(r, t_min, t_max, random)
            hit_right := right.hit(r, t_min, t_max, random)

            return match (hit_left, hit_right) {
                (None, None)                        -> None
                (Some($hit), None)                  -> Some(hit)
                (None, Some($hit))                  -> Some(hit)
                (Some($hit_left), Some($hit_right)) -> Some(if hit_left.t < hit_right.t then hit_left else hit_right)
            }
        }

        return None
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(box)
    }
}

//
XYRect :: struct {
    x0  : real
    x1  : real
    y0  : real
    y1  : real
    z   : real
    mat : ^Material
}

impl Hittable for XYRect {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        t := (z - r.origin.z) / r.direction.z
        if t < t_min or t > t_max {
            return None
        }

        x := r.origin.x + t * r.direction.x
        y := r.origin.y + t * r.direction.y
        if x < x0 or x > x1 or y < y0 or y > y1 {
            return None
        }

        return Some(HitRecord(
            t = t
            p = r.at(t)
            m = mat
            n = vec3(0, 0, 1)
            u = (x - x0) / (x1 - x0)
            v = (y - y0) / (y1 - y0)
        ))
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(AABB.create(vec3(x0, y0, z - real(0.0001)), vec3(x1, y1, z + real(0.0001))))
    }
}

YZRect :: struct {
    y0  : real
    y1  : real
    z0  : real
    z1  : real
    x   : real
    mat : ^Material
}

impl Hittable for YZRect {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        t := (x - r.origin.x) / r.direction.x
        if t < t_min or t > t_max {
            return None
        }

        y := r.origin.y + t * r.direction.y
        z := r.origin.z + t * r.direction.z
        if y < y0 or y > y1 or z < z0 or z > z1 {
            return None
        }

        return Some(HitRecord(
            t = t
            p = r.at(t)
            m = mat
            n = vec3(1, 0, 0)
            u = (y - y0) / (y1 - y0)
            v = (z - z0) / (z1 - z0)
        ))
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(AABB.create(vec3(x - real(0.0001), y0, z0), vec3(x + real(0.0001), y1, z1)))
    }
}

ZXRect :: struct {
    x0  : real
    x1  : real
    z0  : real
    z1  : real
    y   : real
    mat : ^Material
}

impl Hittable for ZXRect {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        t := (y - r.origin.y) / r.direction.y
        if t < t_min or t > t_max {
            return None
        }

        z := r.origin.z + t * r.direction.z
        x := r.origin.x + t * r.direction.x
        if z < z0 or z > z1 or x < x0 or x > x1 {
            return None
        }

        return Some(HitRecord(
            t = t
            p = r.at(t)
            m = mat
            n = vec3(0, 1, 0)
            u = (z - z0) / (z1 - z0)
            v = (x - x0) / (x1 - x0)
        ))
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(AABB.create(vec3(x0, y - real(0.0001), z0), vec3(x1, y + real(0.0001), z1)))
    }
}

//
FlipNormals :: struct {
    obj: ^Hittable
}

impl FlipNormals {
    create :: (h: ^Hittable) -> ^Hittable {
        return create_object(Hittable, FlipNormals(h))
    }
}

impl Hittable for FlipNormals {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        return match obj.hit(r, t_min, t_max, random) {
            Some($hit) -> {
                &hit.n *= real(-1.0)
                Some(hit)
            }

            None -> None
        }
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return obj.bounding_box()
    }
}

//
Box :: struct {
    pmin    : vec3
    pmax    : vec3
    faces   : Array[^Hittable]
}

impl Box {
    create :: (p0: vec3, p1: vec3, mat: ^Material) -> Box {
        arr := Array[^Hittable].create(6)
        create_faces(p0, p1, mat, &arr)
        return Box(p0, p1, arr)
    }

    create_faces :: (p0: vec3, p1: vec3, mat: ^Material, arr: &Array[^Hittable]) {
        arr.add(create_object(Hittable, XYRect(p0.x, p1.x, p0.y, p1.y, p1.z, mat)))
        arr.add(FlipNormals.create(create_object(Hittable, XYRect(p0.x, p1.x, p0.y, p1.y, p0.z, mat))))

        arr.add(create_object(Hittable, ZXRect(p0.x, p1.x, p0.z, p1.z, p1.y, mat)))
        arr.add(FlipNormals.create(create_object(Hittable, ZXRect(p0.x, p1.x, p0.z, p1.z, p0.y, mat))))

        arr.add(create_object(Hittable, YZRect(p0.y, p1.y, p0.z, p1.z, p1.x, mat)))
        arr.add(FlipNormals.create(create_object(Hittable, YZRect(p0.y, p1.y, p0.z, p1.z, p0.x, mat))))
    }
}

impl Hittable for Box {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        return faces.hit(r, t_min, t_max, random)
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return Some(AABB.create(pmin, pmax))
    }
}

// volumes
ConstantMedium :: struct {
    boundary    : ^Hittable
    density     : real
    phase_func  : ^Material
}

impl ConstantMedium {
    create :: (boundary: ^Hittable, density: real, tex: ^Texture) -> ^Hittable {
        return create_object(Hittable, ConstantMedium(
            boundary, density, create_object(Material, Isotropic(tex))
        ))
    }
}

impl Hittable for ConstantMedium {
    hit :: (&Self, r: &Ray, t_min: real, t_max: real, random: &Random) -> Option[HitRecord] {
        match boundary.hit(r, -10000.0, 10000.0, random) {
            Some($h1) -> match boundary.hit(r, h1.t + 0.0001, 10000.0, random) {
                Some($h2) -> {
                    if h1.t < t_min {
                        h1.t = t_min
                    }

                    if h2.t > t_max {
                        h2.t = t_max
                    }

                    if h1.t >= h2.t {
                        return None
                    }

                    dist_in_boundary := h2.t - h1.t
                    hit_distance := -(1.0 / density) * real(log(random.next_double()))
                    if hit_distance < dist_in_boundary {
                        t := h1.t + hit_distance
                        hit := HitRecord(
                            t = t
                            p = r.at(t)
                            n = vec3(1, 0, 0)
                            m = phase_func
                        )

                        return Some(hit)
                    }
                }
            }
        }

        return None
    }

    bounding_box :: (&Self) -> Option[AABB] {
        return boundary.bounding_box()
    }
}