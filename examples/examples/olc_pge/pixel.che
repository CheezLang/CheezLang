#load("std:printable")

Pixel :: struct #copy {
    r: u8 = 0
    g: u8 = 0
    b: u8 = 0
    a: u8 = 255
}

impl Pixel {
    rgba :: (r: u8, g: u8, b: u8, a: u8 = 255) -> Self {
        return Pixel(r, g, b, a)
    }

    rgbad :: (r: double, g: double, b: double, a: double = 1) -> Self {
        return Pixel(cast(u8) r * 255, cast(u8) g * 255, cast(u8) b * 255, cast(u8) a * 255)
    }
}

impl Printable for Pixel {
    print :: (ref Self, str: ref String, fmt: string) { 
        str.appendf("({}, {}, {}, {})", (r, g, b, a))
    }
}

PixelMode :: enum #copy {
    Normal
    Mask
    Alpha
    Custom
}
