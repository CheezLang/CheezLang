use import std.array
use import std.string
use import std.printable
use import std.os.windows_functions
use import std.mem.allocator
use import std.util
io  :: import std.io
fmt :: import std.fmt
C   :: import std.c

use import clap.clap

console_debug_print :: false

Main :: () {
    args := get_cmd_args()
    test_args_slice(MyArgsEnum, args.sliceF(1))
    test_args(MyArgsEnum, to_args_array([
        "project", "new", "-name", "hello_world", "-type", "Program"
    ]))
}

MyArgsEnum :: enum {
    #help_text("Displays this help information")
    help
    build
    project : Project
    compile : CompileOptions
}

Project :: enum {
    new : ProjectNew
}

ProjectNew :: struct {
    name : String

    #name("type")
    typ  : ProjectType

    #ignore
    #fmt_ignore
    test : int
}

ProjectType :: enum {
    Program
    DynamicLibrary
    StaticLibrary
}

LibraryType :: enum {
    Dynamic
    Static
}

MyArguments :: struct {
    name : String
    age  : int
}

CompileOptions :: struct {
    #catch_args
    // #fmt_ignore
    files  : Array[String]

    opt    : bool   = false
    number : int    = 0
    // out    : String = String.empty()
}

// impl(T: type) Printable for Array[T] if T : Printable, #notyet {
//     print :: (&Self, str: &String, format: string) {
//         str += "["
//         for(by_ref=true) v in self.slice() {
//             if it_index > 0 {
//                 str += ", "
//             }

//             p : ^Printable = ^v
//             p.print(str, "")
//         }
//         str += "]"
//     }
// }

to_args_array :: (strings: []string) -> Array[String] {
    array := Array[String].create(strings.length)
    for strings {
        array.add(String.from_string(it))
    }
    return array
}

test_args_slice :: ($T: type, args: []String) {
    io.printfln("test_args_slice({})", @typename(T))
    log_args(args)
    io.println("====================================")
    my_args := parse_arguments(T, args)
    if my_args != null {
        io.println(fmt.format_any(<<my_args))
    }
    io.println("====================================`n`n")
}

test_args :: ($T: type, args: Array[String]) {
    io.printfln("test_args({})", @typename(T))
    log_args(args.slice())
    io.println("====================================")
    my_args := parse_arguments(T, args.slice())
    if my_args != null {
        io.println(fmt.format_any(<<my_args))
    }
    io.println("====================================`n`n")
}

log_args :: (args: []String) {
    io.println("=== args ===")
    for arg in args {
        io.printfln("[{}] '{}'", (it_index, arg.slice()))
    }
}