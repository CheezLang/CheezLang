#load("std:io/io")
#load("std:array")
#load("std:util")
#load("glfw:glfw3")
#load("opengl:opengl")

#load("quad")

enum Direction {
    None
    Up
    Right
    Down
    Left
}

let action = Direction.None

fn onKeyDown(window: &GLFWwindow, key: i32, scancode: i32, a: i32, mods: i32) {
    if a == GLFW_PRESS {
        action = match key {
            265 -> Direction.Up
            262 -> Direction.Right
            264 -> Direction.Down
            263 -> Direction.Left
        }
    }
}

fn onResize(window: &GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

let timePerStep = 0.05
let gridSize = 10.0

let width = 640.0
let height = 480.0

fn action_to_dir(dir: ref Direction, action: Direction) {
    dir = match (dir, action) {
        (Direction.Up,      Direction.Down) -> dir
        (Direction.Right,   Direction.Left) -> dir
        (Direction.Down,    Direction.Up)   -> dir
        (Direction.Left,    Direction.Right)-> dir
        ($x, Direction.None)                -> dir
        $x -> action
    }
}

fn Main()
{
    if !glfwInit() {
        println("Failed to initialize GLFW")
        return
    }
    // defer glfwTerminate()

    let windowTitle = String::empty()
    windowTitle.appendf("Snake     {} FPS`0" , [0])

    let window = glfwCreateWindow(cast width, cast height, windowTitle.get_raw(), null, null)
    if window == null {
        println("Failed to create window")
        glfwTerminate()
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    glfwMakeContextCurrent(window)
    glViewport(0, 0, cast width, cast height)

    glClearColor(0, 0, 0, 1)

    glTranslated(-1.0, -1.0, 0.0)
    glScaled(2.0 / width, 2.0 / height, 1.0)

    glfwSwapInterval(0)

    //
    let rand = LinearCongruentialGenerator::create(cast getCurrentTimeInMilliseconds())

    let xMax = cast(int)(width / gridSize)
    let yMax = cast(int)(height / gridSize)

    let snake = Array(Quad)::create()

    let startCount = 5
    while let i = 0; i < startCount; i += 1 {
        let intesity = cast(double)i / cast(double)(startCount - 1)
        snake.add(new Quad {
            new Vec2i{10, 15},
            new Vec2{gridSize, gridSize},
            new Vec3{1, intesity, intesity}
        })
    }

    let target = new Quad {
        new Vec2i{rand.next_int(max=xMax), rand.next_int(max=yMax)},
        new Vec2{gridSize, gridSize},
        new Vec3{0, 1, 0}
    }

    let dir = Direction.Up

    let timer = 0.0
    let fpsTimer = 0.0
    let fpsCounter = 0

    let lastTime = glfwGetTime()
    while !glfwWindowShouldClose(window) {
        glClear(GL_COLOR_BUFFER_BIT)

        //
        let now = glfwGetTime()
        let deltaTime = now - lastTime
        lastTime = now

        //
        fpsTimer += deltaTime
        fpsCounter += 1
        if fpsTimer >= 1.0 {
            printf("FPS: {}`n", [fpsCounter])

            windowTitle.length = 0
            windowTitle.appendf("Snake     {} FPS`0" , [fpsCounter])
            glfwSetWindowTitle(window, windowTitle.get_raw())

            fpsTimer -= 1.0
            fpsCounter = 0
        }

        //
        timer += deltaTime

        if timer >= timePerStep {
            timer -= timePerStep
            action_to_dir(dir, action)
            action = Direction.None

            // move snake
            while let i = snake.length - 1; i > 0; i -= 1 {
                snake[i].pos = snake[i - 1].pos
            }

            let head: ref Quad = snake[0]

            head.pos += match dir {
                Direction.Up    -> new Vec2i{0, 1}
                Direction.Right -> new Vec2i{1, 0}
                Direction.Down  -> new Vec2i{0, -1}
                Direction.Left  -> new Vec2i{-1, 0}
            }

            if head.pos.x < 0 { head.pos.x = xMax - 1 }
            if head.pos.y < 0 { head.pos.y = yMax - 1 }
            if head.pos.x >= xMax { head.pos.x = 0 }
            if head.pos.y >= yMax { head.pos.y = 0 }

            if head.pos == target.pos {
                snake.add(snake[snake.length - 1])
                target.pos.x = rand.next_int(max=xMax)
                target.pos.y = rand.next_int(max=yMax)
            }
        }

        while let i = 0; i < snake.length; i += 1 {
            snake[i].draw()
        }

        target.draw()

        // present image
        glfwSwapBuffers(window)
        //
        glfwPollEvents()
    }
    
    glfwTerminate()
}
