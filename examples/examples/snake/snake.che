#lib("OpenGL32.lib")

use import quad

use import std.array
use import std.util
use import std.math
use import std.random
use import std.string
use import std.time
io :: import std.io

use import glfw.glfw_binding
use import opengl.glad_binding

Direction :: enum #copy {
    None
    Up
    Right
    Down
    Left
}

action : Direction = Direction.None

onKeyDown :: (window: ^GLFWwindow, key: i32, scancode: i32, a: i32, mods: i32) {
    if a == GLFW_PRESS {
        action = match key {
            265 -> Direction.Up
            262 -> Direction.Right
            264 -> Direction.Down
            263 -> Direction.Left
        }
    }
}

onResize :: (window: ^GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

timePerStep : double = 0.05
gridSize : double = 10.0

width : double = 640.0
height : double = 480.0

action_to_dir :: (dir: &Direction, action: Direction) {
    *dir = match (*dir, action) {
        (Direction.Up,      Direction.Down) -> dir
        (Direction.Right,   Direction.Left) -> dir
        (Direction.Down,    Direction.Up)   -> dir
        (Direction.Left,    Direction.Right)-> dir
        ($x, Direction.None)                -> dir
        (_, $a) -> a
    }
}

Main :: () {
    if glfwInit() == 0 {
        io.println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    windowTitle := String.empty()
    windowTitle.appendf("Snake     {} FPS`0" , 0)

    window := glfwCreateWindow(cast width, cast height, cast windowTitle.get_raw(), null, null)
    if window == null {
        io.println("Failed to create window")
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    glfwMakeContextCurrent(window)
    if gladLoadGL() == 0 {
        io.println("Failed to initialize glad")
        return
    }
    glViewport(0, 0, cast width, cast height)

    glClearColor(0, 0, 0, 1)

    glTranslated :: (x: f64, y: f64, z: f64) #stdcall;
    glScaled     :: (x: f64, y: f64, z: f64) #stdcall;
    glTranslated(-1.0, -1.0, 0.0)
    glScaled(2.0 / width, 2.0 / height, 1.0)

    glfwSwapInterval(0)

    //
    rand := LinearCongruentialGenerator.create(cast get_time_milliseconds())

    xMax := cast(int)(width / gridSize)
    yMax := cast(int)(height / gridSize)

    snake := Array[Quad].create()

    startCount := 5
    for i in 0..startCount {
        intesity := (cast(double)i) / cast(double)(startCount - 1)
        snake.add(Quad(
            Vec2i(10, 15)
            Vec2(gridSize, gridSize)
            Vec3(1, intesity, intesity)
        ))
    }

    target := Quad(
        Vec2i(rand.next_int(max=xMax), rand.next_int(max=yMax))
        Vec2(gridSize, gridSize)
        Vec3(0, 1, 0)
    )

    dir := Direction.Up

    timer := 0.0
    fpsTimer := 0.0
    fpsCounter := 0

    lastTime := glfwGetTime()
    while glfwWindowShouldClose(window) == 0 {
        glClear(GL_COLOR_BUFFER_BIT)

        //
        now := glfwGetTime()
        deltaTime := now - lastTime
        lastTime = now

        //
        fpsTimer += deltaTime
        fpsCounter += 1
        if fpsTimer >= 1.0 {
            io.printf("FPS: {}`n", fpsCounter)

            windowTitle.resize(0)
            windowTitle.appendf("Snake     {} FPS`0" , fpsCounter)
            glfwSetWindowTitle(window, cast windowTitle.get_raw())

            fpsTimer -= 1.0
            fpsCounter = 0
        }

        //
        timer += deltaTime

        if timer >= timePerStep {
            timer -= timePerStep
            action_to_dir(dir, action)
            action = Direction.None

            // move snake
            for i in {1..snake.length}.reverse() {
                snake[i].pos = snake[i - 1].pos
            }

            head : &Quad = snake[0]

            head.pos += match dir {
                Direction.Up    -> Vec2i(0, 1)
                Direction.Right -> Vec2i(1, 0)
                Direction.Down  -> Vec2i(0, -1)
                Direction.Left  -> Vec2i(-1, 0)
            }

            if head.pos.x < 0 { head.pos.x = xMax - 1 }
            if head.pos.y < 0 { head.pos.y = yMax - 1 }
            if head.pos.x >= xMax { head.pos.x = 0 }
            if head.pos.y >= yMax { head.pos.y = 0 }

            if head.pos == target.pos {
                snake.add(snake[snake.length - 1])
                target.pos.x = rand.next_int(max=xMax)
                target.pos.y = rand.next_int(max=yMax)
            }
        }

        for i in 0..snake.length {
            snake[i].draw()
        }

        target.draw()

        // present image
        glfwSwapBuffers(window)
        //
        glfwPollEvents()
    }
}
