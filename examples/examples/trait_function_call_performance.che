#load("std:io/io")
#load("std:time")

trait TestTrait {
    traitFunction :: (ref Self, n: u64);
}

Test :: struct #copy {
    counter: u64 = default

    // not used, just so that passing by value will be slow
    // comment out to see performance of pass by value with small structs
    // a0: i32
    // a1: i32
    // a2: i32
    // a3: i32
    // a4: i32
    // a5: i32
    // a6: i32
    // a7: i32
    // a8: i32
    // a9: i32
}

impl Test {
    normalFunction :: (Self, n: u64) {
        counter += n
    }

    refFunction :: (ref Self, n: u64) {
        counter += n
    }
}

impl TestTrait for Test {
    traitFunction :: (ref Self, n: u64) {
        counter += n
    }
}

Main :: () {
    iterations := 100000000
    n := 8


    printf("iterations: {}, n: {}`n", (iterations, n))

    t  : Test = default
    tt : TestTrait = t

    // call normalFunction() on Test
    // t is implicitly passed by value
    {
        t.counter = 0

        start := get_time_microseconds()

        for : 0..iterations {
            t.normalFunction(cast(u64)n)
        }

        {
            end  := get_time_microseconds()
            diff := end - start
            ms   := diff / 1000

            printf("counter: {}`n", t.counter)
            printf("[t.normalFunction()] Time elapsed: {} ms ({} iterations)`n", (ms, iterations))
        }
    }

    // call refFunction() on Test
    // t is implicitly passed as a pointer
    {
        t.counter = 0

        start := get_time_microseconds()

        for : 0..iterations {
            t.refFunction(cast(u64)n)
        }

        {
            end  := get_time_microseconds()
            diff := end - start
            ms   := diff / 1000

            printf("counter: {}`n", t.counter)
            printf("[t.refFunction()] Time elapsed: {} ms ({} iterations)`n", (ms, iterations))
        }
    }

    // call traitFunction() on Test
    {
        t.counter = 0

        start := get_time_microseconds()

        for : 0..iterations {
            t.traitFunction(cast(u64)n)
        }

        {
            end  := get_time_microseconds()
            diff := end - start
            ms   := diff / 1000

            printf("counter: {}`n", t.counter)
            printf("[t.traitFunction()] Time elapsed: {} ms ({} iterations)`n", (ms, iterations))
        }
    }

    // call traitFunction() on TestTrait
    // tt is implicitly  passed to the function
    // tt is already a trait object, so no implicit casting for every call
    {
        t.counter = 0

        start := get_time_microseconds()

        for : 0..iterations {
            tt.traitFunction(cast(u64)n)
        }

        {
            end  := get_time_microseconds()
            diff := end - start
            ms   := diff / 1000

            printf("counter: {}`n", t.counter)
            printf("[tt.traitFunction()] Time elapsed: {} ms ({} iterations)`n", (ms, iterations))
        }
    }
}
