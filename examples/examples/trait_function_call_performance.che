#load("../std/io/io.che")
#load("../std/util.che")


fn scanf(format: string, value: int&, value2: int&) -> int #varargs;

trait TestTrait {
    fn TraitFunction(n: ulong);
}

struct Test {
    counter: ulong
    a0: int
    a1: int
    a2: int
    a3: int
    a4: int
    a5: int
    a6: int
    a7: int
    a8: int
    a9: int
}

impl Test {
    fn NormalFunction(n: ulong) {
        counter += n
    }

    ref fn RefFunction(n: ulong) {
        counter += n
    }
}

impl TestTrait for Test {
    fn TraitFunction(n: ulong) {
        counter += n
    }
}

fn trait_function_call_performance() {
    let iterations = 100000000
    let n = 8

    // 1000000000 5
    // scanf("%d %d", &iterations, &n)

    Printf("iterations: {}, n: {}`n", [iterations, n])

    let t: Test
    let tt: TestTrait = t


    {
        t.counter = 0

        let start = GetCurrentTimeInMicroseconds()
        defer {
            let end = GetCurrentTimeInMicroseconds()
            let diff = end - start
            let ms = diff / 1000

            Printf("counter: {}`n", [t.counter])
            Printf("[{}] Time elapsed: {} ms ({} iterations)`n", ["t.NormalFunction()", ms, iterations])
        }   

        while let i = 0; i < iterations; i += 1 {
            t.NormalFunction((ulong)n)
        }
    }

    {
        t.counter = 0

        let start = GetCurrentTimeInMicroseconds()
        defer {
            let end = GetCurrentTimeInMicroseconds()
            let diff = end - start
            let ms = diff / 1000

            Printf("counter: {}`n", [t.counter])
            Printf("[{}] Time elapsed: {} ms ({} iterations)`n", ["t.RefFunction()", ms, iterations])
        }   

        while let i = 0; i < iterations; i += 1 {
            t.RefFunction((ulong)n)
        }
    }

    {
        t.counter = 0
        
        let start = GetCurrentTimeInMicroseconds()
        defer {
            let end = GetCurrentTimeInMicroseconds()
            let diff = end - start
            let ms = diff / 1000

            Printf("counter: {}`n", [t.counter])
            Printf("[{}] Time elapsed: {} ms ({} iterations)`n", ["t.TraitFunction()", ms, iterations])
        }   

        while let i = 0; i < iterations; i += 1 {
            t.TraitFunction((ulong)n)
        }
    }

    {
        t.counter = 0
        
        let start = GetCurrentTimeInMicroseconds()
        defer {
            let end = GetCurrentTimeInMicroseconds()
            let diff = end - start
            let ms = diff / 1000

            Printf("counter: {}`n", [t.counter])
            Printf("[{}] Time elapsed: {} ms ({} iterations)`n", ["tt.TraitFunction()", ms, iterations])
        }   

        while let i = 0; i < iterations; i += 1 {
            tt.TraitFunction((ulong)n)
        }
    }
}
