use import std.math
use import std.rc
use import std.array
use import std.hash_table
mem :: import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt

use import opengl.glad_binding
ImGui :: import imgui.imgui_binding

use import math
use import matrix
use import opengl_buffers
use import opengl_utils
use import shader

#export_scope

quad_cache_size         :: 5000
line_cache_size         :: 5000
point_light_cache_size  :: 100
area_light_cache_size  :: 100

// @todo: read this value from OpenGL
max_texture_slots :: 16

Origin :: enum #copy {
    Center, TopLeft, BottomLeft, TopRight, BottomRight
}

QuadVertex :: struct #copy {
    position    : vec3
    color       : vec4
    uv          : vec2
    tex_index   : i32
}

LineVertex :: struct #copy {
    position    : vec3
    color       : vec4
}

PointLightVertex :: struct #copy {
    position    : vec2
    light_pos   : vec2
    color       : vec3
    params      : vec4
    attenuation : vec3
}

AreaLightVertex :: struct #copy {
    position    : vec2
    uv          : vec2
    color       : vec3
    smooth      : float
}

int_compare :: (a: int, b: int) -> bool {
    return a == b
}

RenderTargets :: struct {
    color_map : Rc[FrameBuffer]
    light_map : Rc[FrameBuffer]
}

Renderer :: struct {
    single_quad_va          : ^VertexArray

    quad_va                 : ^VertexArray
    quad_cache              := Array[QuadVertex].create(quad_cache_size * 4)

    line_va                 : ^VertexArray
    line_cache              := Array[LineVertex].create(line_cache_size * 2)


    // light stuff
    enable_lights           := true

    point_light_va          : ^VertexArray
    point_light_cache       := Array[PointLightVertex].create(point_light_cache_size * 4)
    area_light_va           : ^VertexArray
    area_light_cache        := Array[AreaLightVertex].create(area_light_cache_size * 4)

    white_tex               := Rc[Texture].empty()
    texture_map             := Table[int, i32].create(int_compare)
    used_textures           := Array[Rc[Texture]].create(max_texture_slots)

    // shaders
    color_shader            : ^Shader = null
    line_shader             : ^Shader = null
    apply_light_shader      : ^Shader = null
    point_light_shader      : ^Shader = null
    area_light_shader       : ^Shader = null

    //
    projection_matrix_stack := Array[mat4].create()
    projection_matrix       := mat4()
    viewport_size           := vec2()

    // render targets
    max_size                := vec2i()
    render_targets          := Array[RenderTargets].create()
    current_target          := -1
    tmp_target              := Rc[FrameBuffer].empty()
}

impl Renderer {
    create :: (max_size: vec2i) -> ^Renderer {
        // white texture
        white_tex := Texture.from_bytes(1, 1, .RGB, [255, 255, 255])

        // create line va
        line_va := {
            line_va := VertexArray.new()

            vertex_buffer := VertexBuffer.dynamic(line_cache_size * 2 * @sizeof(LineVertex))
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float3)
                BufferElement("aColor", ShaderDataType.Float4)
            ])
            line_va.add_vertex_buffer(vertex_buffer)

            // create index buffer
            indices := mem.alloc_n(u32, line_cache_size * 2)
            defer mem.free_n(indices)
            for i in 0..line_cache_size {
                *indices[i * 2 + 0] = u32(i * 2 + 0)
                *indices[i * 2 + 1] = u32(i * 2 + 1)
            }

            index_buffer := IndexBuffer.create(indices)
            line_va.set_index_buffer(index_buffer)

            line_va
        }

        // create vertex array for quad
        quad_va := {
            vertex_array := VertexArray.new()

            vertex_buffer := VertexBuffer.dynamic(quad_cache_size * 4 * @sizeof(QuadVertex))
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float3)
                BufferElement("aColor", ShaderDataType.Float4)
                BufferElement("aTexCoord", ShaderDataType.Float2)
                BufferElement("aTexIndex", ShaderDataType.Int)
            ])
            vertex_array.add_vertex_buffer(vertex_buffer)

            indices := mem.alloc_n(u32, quad_cache_size * 6)
            defer mem.free_n(indices)
            for i in 0..quad_cache_size {
                *indices[i * 6 + 0] = u32(i * 4 + 0)
                *indices[i * 6 + 1] = u32(i * 4 + 1)
                *indices[i * 6 + 2] = u32(i * 4 + 2)
                *indices[i * 6 + 3] = u32(i * 4 + 2)
                *indices[i * 6 + 4] = u32(i * 4 + 3)
                *indices[i * 6 + 5] = u32(i * 4 + 0)
            }

            index_buffer := IndexBuffer.create(indices)
            vertex_array.set_index_buffer(index_buffer)

            vertex_array
        }
        
        // create vertex array for quad
        single_quad_va := {
            vertex_array := VertexArray.new()

            vertex_buffer := VertexBuffer.create([
                -1.0f, -1.0f, 0.0f, 0.0f
                 1.0f, -1.0f, 1.0f, 0.0f
                 1.0f,  1.0f, 1.0f, 1.0f
                -1.0f,  1.0f, 0.0f, 1.0f
            ])
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float2)
                BufferElement("aTexCoord", ShaderDataType.Float2)
            ])
            vertex_array.add_vertex_buffer(vertex_buffer)

            index_buffer := IndexBuffer.create([0, 1, 2, 2, 3, 0])
            vertex_array.set_index_buffer(index_buffer)

            vertex_array
        }

        // create vertex array for point_lights
        point_light_va := {
            vertex_array := VertexArray.new()

            vertex_buffer := VertexBuffer.dynamic(point_light_cache_size * 4 * @sizeof(PointLightVertex))
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float2)
                BufferElement("aLightPos", ShaderDataType.Float2)
                BufferElement("aColor", ShaderDataType.Float3)
                BufferElement("aParams", ShaderDataType.Float4)
                BufferElement("aAttenuation", ShaderDataType.Float3)
            ])
            vertex_array.add_vertex_buffer(vertex_buffer)

            indices := mem.alloc_n(u32, point_light_cache_size * 6)
            defer mem.free_n(indices)
            for i in 0..point_light_cache_size {
                *indices[i * 6 + 0] = u32(i * 4 + 0)
                *indices[i * 6 + 1] = u32(i * 4 + 1)
                *indices[i * 6 + 2] = u32(i * 4 + 2)
                *indices[i * 6 + 3] = u32(i * 4 + 2)
                *indices[i * 6 + 4] = u32(i * 4 + 3)
                *indices[i * 6 + 5] = u32(i * 4 + 0)
            }

            index_buffer := IndexBuffer.create(indices)
            vertex_array.set_index_buffer(index_buffer)

            vertex_array
        }

        // create vertex array for point_lights
        area_light_va := {
            vertex_array := VertexArray.new()

            vertex_buffer := VertexBuffer.dynamic(area_light_cache_size * 4 * @sizeof(AreaLightVertex))
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float2)
                BufferElement("aTexCoord", ShaderDataType.Float2)
                BufferElement("aColor", ShaderDataType.Float3)
                BufferElement("aSmooth", ShaderDataType.Float)
            ])
            vertex_array.add_vertex_buffer(vertex_buffer)

            indices := mem.alloc_n(u32, area_light_cache_size * 6)
            defer mem.free_n(indices)
            for i in 0..area_light_cache_size {
                *indices[i * 6 + 0] = u32(i * 4 + 0)
                *indices[i * 6 + 1] = u32(i * 4 + 1)
                *indices[i * 6 + 2] = u32(i * 4 + 2)
                *indices[i * 6 + 3] = u32(i * 4 + 2)
                *indices[i * 6 + 4] = u32(i * 4 + 3)
                *indices[i * 6 + 5] = u32(i * 4 + 0)
            }

            index_buffer := IndexBuffer.create(indices)
            vertex_array.set_index_buffer(index_buffer)

            vertex_array
        }

        tmp_target := match FrameBuffer.new(max_size.x, max_size.y, unclamped_color = true) {
            Ok($val) -> val
            Err(_) -> @assert(false)
        }

        //
        r := mem.alloc(Renderer)
        *r = Renderer(
            quad_va         = quad_va
            line_va         = line_va
            single_quad_va  = single_quad_va
            point_light_va  = point_light_va
            area_light_va   = area_light_va

            white_tex       = white_tex

            tmp_target      = tmp_target
            max_size        = max_size
        )
        r.reload_shaders()

        return r
    }

    reload_shaders :: (&Self) {
        reload_shader(^color_shader, "../data/test_shader.shader")
        color_shader.bind()
        uTextures : [16]i32 = default
        for i in 0..16 {
            *uTextures[i] = i32(i)
        }
        color_shader.set_uniform_ints("uTextures", uTextures)
        color_shader.unbind()

        reload_shader(^line_shader, "../data/line_shader.shader")
        reload_shader(^point_light_shader, "../data/point_light_shader.shader")
        reload_shader(^area_light_shader, "../data/area_light.shader")

        reload_shader(^apply_light_shader, "../data/gyroids.shader")
        apply_light_shader.bind()
        apply_light_shader.set_uniform_int("uColorTex", 0)
        apply_light_shader.set_uniform_int("uLightMap", 1)
        apply_light_shader.unbind()
    }

    reload_shader :: (&Self, shader: ^^Shader, file: string) {
        match Shader.from_file(file) {
            Ok($s) -> {
                shader_program := mem.alloc(Shader)
                *shader_program = s

                if *shader != null {
                    Memory.drop(*(*shader))
                    mem.free(*shader)
                }
                *shader = shader_program
            }

            Err($msg) -> {
                io.formatln("[ERROR] Failed to load '{}' from file: {}", [file, msg.slice()])
                return
            }
        }
    }

    set_projection_matrix :: (&Self, projection_matrix: &mat4) {
        projection_inv := projection_matrix.invert_orthographic()

        color_shader.bind()
        color_shader.set_uniform_mat4("m_projection", projection_matrix)
        line_shader.bind()
        line_shader.set_uniform_mat4("m_projection", projection_matrix)
        point_light_shader.bind()
        point_light_shader.set_uniform_mat4("m_projection", projection_matrix)
        point_light_shader.set_uniform_mat4("m_projection_inv", &projection_inv)
        area_light_shader.bind()
        area_light_shader.set_uniform_mat4("m_projection", projection_matrix)
    }

    set_projection_inv :: (&Self, projection_inv: mat4) {
        point_light_shader.bind()
        point_light_shader.set_uniform_mat4("m_projection_inv", &projection_inv)
    }

    push_proj   :: (&Self, projection_matrix: &mat4) {
        projection_matrix_stack.push(self.projection_matrix)
        set_projection_matrix(projection_matrix)
    }

    pop_proj    :: (&Self) {
        projection_matrix = projection_matrix_stack.pop()
        set_projection_matrix(&projection_matrix)
    }

    begin_scene :: (&Self, projection_matrix: &mat4, viewport_size: vec2) {
        // @todo: *& is a hack
        self.projection_matrix = *projection_matrix
        self.projection_matrix_stack.clear()

        set_projection_matrix(projection_matrix)
        self.viewport_size = viewport_size
    }

    set_lights_enabled :: (&Self, enabled: bool) {
        self.enable_lights = enabled
    }

    push_render_target :: (&Self) {
        if current_target >= 0 {
            // flush()
        }
        current_target += 1
        if current_target >= render_targets.count() {
            render_targets.add(RenderTargets(
                color_map = FrameBuffer.new(max_size.x, max_size.y, unclamped_color = true).unwrap()
                light_map = FrameBuffer.new(max_size.x, max_size.y, unclamped_color = true).unwrap()
            ))
        }
    }

    pop_render_target :: (&Self) {
        @assert(current_target >= 0)
        current_target -= 1
    }

    reset_render_targets :: (&Self) {
        current_target = -1
    }

    targets :: (&Self, offset: int = 0) -> &RenderTargets {
        @assert(current_target - offset >= 0)
        return render_targets[current_target - offset]
    }

    clear :: (&Self, color: vec4 = vec4(0, 0, 0, 0)) {
        targets().color_map.get().bind()
        glClearColor(color.x, color.y, color.z, color.w)
        glClear(GL_COLOR_BUFFER_BIT)

        targets().light_map.get().bind()
        glClearColor(0, 0, 0, 0)
        glClear(GL_COLOR_BUFFER_BIT)

        FrameBuffer.unbind()
    }

    add_point_light :: (&Self, pos: vec2, color: vec3, radius: float, angle: float, direction: float, smoothness: float, attenuation: vec3) {
        if !enable_lights {
            return
        }

        if point_light_cache.get_length() + 4 >= point_light_cache_size * 4 {
            flush_point_lights()
        }

        // emit vertices into buffer
        point_light_cache.add(PointLightVertex(
            position    = vec2(-1, -1)
            light_pos   = pos
            color       = color
            params      = vec4(radius, smoothness, angle, direction)
            attenuation = attenuation
        ))
        point_light_cache.add(PointLightVertex(
            position    = vec2(1, -1)
            light_pos   = pos
            color       = color
            params      = vec4(radius, smoothness, angle, direction)
            attenuation = attenuation
        ))
        point_light_cache.add(PointLightVertex(
            position    = vec2(1, 1)
            light_pos   = pos
            color       = color
            params      = vec4(radius, smoothness, angle, direction)
            attenuation = attenuation
        ))
        point_light_cache.add(PointLightVertex(
            position    = vec2(-1, 1)
            light_pos   = pos
            color       = color
            params      = vec4(radius, smoothness, angle, direction)
            attenuation = attenuation
        ))
    }

    flush_point_lights :: (&Self) {
        targets().light_map.get().bind()
        glViewport(0, 0, i32(viewport_size.x), i32(viewport_size.y))

        // upload data
        vb := point_light_va.vertex_buffers[0]
        vb.sub_data(0, point_light_cache.count() * @sizeof(PointLightVertex), point_light_cache.get_raw())

        // bind stuff
        point_light_shader.bind()
        point_light_va.bind()
        point_light_va.index_buffer.bind()

        // setup additive blending
        glEnable(GL_BLEND)
        glBlendFunc(GL_ONE, GL_ONE)

        // draw buffer
        glDrawElements(GL_TRIANGLES, cast point_light_cache.count() * 6, GL_UNSIGNED_INT, null)
        glBindVertexArray(0)

        glDisable(GL_BLEND)

        point_light_cache.clear()
    }

    add_area_light :: (&Self, pos: vec2, size: vec2, angle: float = 0, color: vec3 = vec3(1, 1, 1), smooth: float = 0.0f) {
        if !enable_lights {
            return
        }

        if area_light_cache.count() + 4 >= area_light_cache_size * 4 {
            flush_area_lights()
        }

        // calculate rotation
        offset_x, offset_y := {
            sa := sinf(angle)
            ca := cosf(angle)
            vec2(ca, sa) * size.x * 0.5f, vec2(-sa, ca) * size.y * 0.5f
        }

        // emit vertices into buffer
        area_light_cache.add(AreaLightVertex(
            position    = pos - offset_x - offset_y
            uv          = vec2(0, 0)
            color       = color
            smooth      = smooth
        ))
        area_light_cache.add(AreaLightVertex(
            position    = pos + offset_x - offset_y
            uv          = vec2(1, 0)
            color       = color
            smooth      = smooth
        ))
        area_light_cache.add(AreaLightVertex(
            position    = pos + offset_x + offset_y
            uv          = vec2(1, 1)
            color       = color
            smooth      = smooth
        ))
        area_light_cache.add(AreaLightVertex(
            position    = pos - offset_x + offset_y
            uv          = vec2(0, 1)
            color       = color
            smooth      = smooth
        ))
    }

    flush_area_lights :: (&Self) {
        // targets().light_map.get().bind()
        // glViewport(0, 0, i32(viewport_size.x), i32(viewport_size.y))

        // // upload data
        // vb := area_light_va.vertex_buffers[0]
        // vb.sub_data(0, area_light_cache.get_length() * @sizeof(AreaLightVertex), area_light_cache.get_raw())

        // // bind stuff
        // area_light_shader.bind()
        // area_light_va.bind()
        // area_light_va.index_buffer.bind()

        // // setup additive blending
        // glEnable(GL_BLEND)
        // glBlendFunc(GL_ONE, GL_ONE)

        // // draw buffer
        // glDrawElements(GL_TRIANGLES, cast area_light_cache.get_length() * 6, GL_UNSIGNED_INT, null)
        // glBindVertexArray(0)

        // glDisable(GL_BLEND)

        // area_light_cache.clear()
    }

    clear_lights :: (&Self) {
        point_light_cache.clear()
        area_light_cache.clear()
    }

    flush_lights :: (&Self) {
        flush_point_lights()
        flush_area_lights()
    }

    render_effect :: (&Self, shader: ^Shader) {
        flush_lights()

        tmp_target.get().bind()

        // bind stuff
        shader.bind()
        single_quad_va.bind()
        single_quad_va.index_buffer.bind()

        // bind textures
        targets(1).color_map.get().render_texture.get().bind(0)
        targets(1).light_map.get().render_texture.get().bind(1)

        // draw buffer
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, null)
        glBindVertexArray(0)

        tmp_target.get().copy_to(targets().color_map.get())

        FrameBuffer.unbind()
    }

    fill_quad :: (&Self, pos: vec3, size: vec3,
                    angle: float = 0,
                    color: vec3 = vec3(1, 1, 1),
                    texture: Option[Rc[Texture]] = None,
                    uv: vec4 = vec4(0, 0, 1, 1)) {

        if quad_cache.get_length() + 4 >= quad_cache_size * 4 {
            flush_quads()
        }

        // calculate texture index
        tex_index : i32 = match texture {
            Some($tex) -> match texture_map.get(int(^*tex.get())) {
                Some($idx) -> *idx
                None -> {
                    if used_textures.get_length() >= max_texture_slots {
                        flush_quads()
                    }
                    idx := i32(used_textures.get_length())
                    texture_map[int(^*tex.get())] = idx
                    used_textures.add(tex.clone())
                    idx
                }
            }

            None -> 0
        }

        // calculate rotation
        offset_x, offset_y := {
            sa := sinf(angle)
            ca := cosf(angle)
            vec3(ca, sa) * size.x * 0.5f, vec3(-sa, ca) * size.y * 0.5f
        }

        // emit vertices into buffer
        quad_cache.add(QuadVertex(
            position    = pos - offset_x - offset_y
            color       = vec4(color.x, color.y, color.z, 1.0f)
            uv          = vec2(uv.x, uv.y)
            tex_index   = tex_index
        ))
        quad_cache.add(QuadVertex(
            position    = pos + offset_x - offset_y
            color       = vec4(color.x, color.y, color.z, 1.0f)
            uv          = vec2(uv.z, uv.y)
            tex_index   = tex_index
        ))
        quad_cache.add(QuadVertex(
            position    = pos + offset_x + offset_y
            color       = vec4(color.x, color.y, color.z, 1.0f)
            uv          = vec2(uv.z, uv.w)
            tex_index   = tex_index
        ))
        quad_cache.add(QuadVertex(
            position    = pos - offset_x + offset_y
            color       = vec4(color.x, color.y, color.z, 1.0f)
            uv          = vec2(uv.x, uv.w)
            tex_index   = tex_index
        ))
    }

    draw_line :: (&Self, pos0: vec3, pos1: vec3, color: vec3 = vec3(1, 1, 1), thickness: float = 0.0f) {
        if thickness == 0.0f {
            // 0 thickness means draw line 1 pixel wide
            if line_cache.get_length() + 2 >= line_cache_size {
                flush_lines()
            }

            line_cache.add(LineVertex(
                position    = pos0
                color       = vec4(color.x, color.y, color.z, 1.0f)
            ))
            line_cache.add(LineVertex(
                position    = pos1
                color       = vec4(color.x, color.y, color.z, 1.0f)
            ))
        } else {
            // non zero thickness means draw lines as quads with specified thickness
            if quad_cache.get_length() + 4 >= quad_cache_size {
                flush_quads()
            }

            dir := pos1 - pos0
            right := vec3(dir.y, -dir.x).normalized() * thickness * 0.5f

            quad_cache.add(QuadVertex(
                position    = pos0 - right
                color       = vec4(color.x, color.y, color.z, 1.0f)
                uv          = vec2(0, 0)
                tex_index   = 0
            ))
            quad_cache.add(QuadVertex(
                position    = pos0 + right
                color       = vec4(color.x, color.y, color.z, 1.0f)
                uv          = vec2(1, 0)
                tex_index   = 0
            ))
            quad_cache.add(QuadVertex(
                position    = pos1 + right
                color       = vec4(color.x, color.y, color.z, 1.0f)
                uv          = vec2(1, 1)
                tex_index   = 0
            ))
            quad_cache.add(QuadVertex(
                position    = pos1 - right
                color       = vec4(color.x, color.y, color.z, 1.0f)
                uv          = vec2(0, 1)
                tex_index   = 0
            ))
        }
    }

    draw_quad :: (&Self, pos: vec3, size: vec3, angle: float = 0.0f, thickness: float = 0.0f, color: vec3 = vec3(1, 1, 1)) {
        offset_x, offset_y := {
            sa := sinf(angle)
            ca := cosf(angle)
            vec3(ca, sa) * size.x * 0.5f, vec3(-sa, ca) * size.y * 0.5f
        }

        draw_line(pos - offset_x - offset_y, pos + offset_x - offset_y, color, thickness)
        draw_line(pos + offset_x - offset_y, pos + offset_x + offset_y, color, thickness)
        draw_line(pos + offset_x + offset_y, pos - offset_x + offset_y, color, thickness)
        draw_line(pos - offset_x + offset_y, pos - offset_x - offset_y, color, thickness)
    }

    draw_text :: (&Self, pos: vec3, text: string, color: vec3 = vec3(1, 1, 1), size: float = 16) {
        pos : ImGui.ImVec2 = pos.into()
        font := ImGui.GetFont()
        ImGui.GetForegroundDrawList().AddText_2(font, size, &pos, color.to_color32(), text)
    }

    flush_quads :: (&Self) {
        targets().color_map.get().bind()
        glViewport(0, 0, i32(viewport_size.x), i32(viewport_size.y))

        // upload data
        vb := quad_va.vertex_buffers[0]
        vb.sub_data(0, quad_cache.get_length() * @sizeof(QuadVertex), quad_cache.get_raw())

        // bind stuff
        color_shader.bind()
        quad_va.bind()
        quad_va.index_buffer.bind()

        for tex in &used_textures {
            tex.get().bind(it_index)
        }

        // draw buffer
        glDrawElements(GL_TRIANGLES, cast quad_cache.get_length() * 6, GL_UNSIGNED_INT, null)
        glBindVertexArray(0)

        // clear textures
        texture_map.clear()
        used_textures.clear()

        // set white tex as texture 0
        texture_map[int(^*white_tex.get())] = 0i32
        used_textures.add(white_tex.clone())

        quad_cache.clear()
    }

    flush_lines :: (&Self) {
        glViewport(0, 0, i32(viewport_size.x), i32(viewport_size.y))

        vb := line_va.vertex_buffers[0]
        vb.sub_data(0, line_cache.get_length() * @sizeof(LineVertex), line_cache.get_raw())

        line_shader.bind()
        line_va.bind()
        line_va.index_buffer.bind()
        glDrawElements(GL_LINES, cast line_cache.get_length() * 2, GL_UNSIGNED_INT, null)
        glBindVertexArray(0)

        line_cache.clear()
    }

    flush :: (&Self) {
        flush_quads()
        flush_lines()
        flush_lights()
    }
}
