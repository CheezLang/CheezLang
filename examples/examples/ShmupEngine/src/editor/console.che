use import std.array
use import std.string
use import std.rc
use import std.math
use import std.ring_queue
mem  :: import std.mem.allocator
util :: import std.util
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c

use import glfw.glfw_binding
clap  :: import clap.clap
ImGui :: import imgui.imgui_binding

use import "../math"
use import "../layer"
use import "../components"
use import "../input"
use import "../renderer"
use import "../command"
use import "../shmup_engine"

#export_scope

MessageType :: enum #copy {
    Log
    Error
    Command
}

ConsoleEntry :: struct {
    typ     : MessageType
    message : String
}

Console :: struct {
    m_buffer         : []char8
    items            : RingQueue[ConsoleEntry]
    on_command       : Fn(ref Command)

    // history stuff
    history          : RingQueue[String]
    current_command  : Option[String] = None
    history_pos      : int  = -1

    //
    scroll_to_bottom : bool = true
    auto_scroll      : bool = true
}

impl Drop for Console {
    drop :: (ref Self) {
        mem.free_n(m_buffer)
    }
}

impl Console {
    new :: (on_command: Fn(ref Command)) -> Console {
        buff := mem.alloc_n(char8, 1024)
        buff[0] = char8(0)

        return Console(
            m_buffer   = buff
            items      = RingQueue[ConsoleEntry].new(1024)
            history    = RingQueue[String].new(1024)
            on_command = on_command
        )
    }

    log :: (ref Self, format: string, args: []&any = []) {
        add_entry(MessageType.Log, fmt.format(format, args))
    }

    log_error :: (ref Self, format: string, args: []&any = []) {
        add_entry(MessageType.Error, fmt.format(format, args))
    }

    add_entry :: (ref Self, typ: MessageType, log: String) {
        if items.count() == items.get_capacity() - 1 {
            items.pop()
        }

        items.push(ConsoleEntry(typ, log))
    }

    execute_command :: (ref Self, cmd_string: String) {
        scroll_to_bottom = true

        cmd := clap.parse_arguments_from_string(Command, cmd_string.slice())

        if cmd == null {
            add_entry(MessageType.Error, fmt.format("> Failed to execute command '{}'. Enter 'help' to get a list of commands", [cmd_string.slice()]))
        } else {
            defer mem.free(cmd)

            add_entry(MessageType.Command, fmt.format("> {}", [cmd_string.slice()]))
            match ref <<cmd {
                Command.Help -> {
                    add_entry(MessageType.Log, clap.get_help_message(@type_info(Command)))
                }

                $c -> {
                    on_command(c)
                }
            }
        }

        // add command to history
        current_command  = None
        history_pos = -1
        if history.count() == history.get_capacity() - 1 {
            history.pop()
        }
        history.push(cmd_string)
    }

    auto_complete :: (ref Self, data: &ImGui.ImGuiInputTextCallbackData) -> i32 {
        // scroll_to_bottom = true

        match ImGui.ImGuiInputTextFlags_(data.EventFlag) {
            ImGui.ImGuiInputTextFlags_.CallbackCompletion -> {
                log_error("auto complete not implemented yet")
            }
            ImGui.ImGuiInputTextFlags_.CallbackHistory -> {
                prev_history_pos := history_pos

                match ImGui.ImGuiKey_(data.EventKey) {
                    ImGui.ImGuiKey_.UpArrow -> {
                        if history_pos < 0 {
                            text := string(cast m_buffer.data, cast C.strlen(m_buffer.data))
                            current_command = Some(String.from_string(text))
                            history_pos = history.get_length() - 1
                        } else if history_pos > 0 {
                            history_pos -= 1
                        }
                    }
                    ImGui.ImGuiKey_.DownArrow -> {
                        if history_pos >= 0 {
                            history_pos += 1
                            if history_pos >= history.get_length() {
                                history_pos = -1
                            }
                        }
                    }
                }

                if prev_history_pos != history_pos {
                    cmd := if history_pos == -1 {
                        match ref current_command {
                            Some($cmd) -> cmd.slice()
                            None -> ""
                        }
                    } else {
                        history.at(history_pos).slice()
                    }

                    // C.memcpy(m_buffer.data, cmd.bytes.data, cast cmd.bytes.length)
                    // m_buffer[cmd.bytes.length] = char8(0)
                    data.DeleteChars(0, data.BufTextLen)
                    data.InsertChars(0, cast cmd.bytes.data, cast util.pointer_add(cmd.bytes.data, cmd.bytes.length))
                }
            }

            $event -> {
                log_error("command text callback: {} not implemented yet", [event])
            }
        }

        return 0
    }

    render :: (ref Self) {
        {
            initial_size := ImGui.ImVec2(520, 600)
            ImGui.SetNextWindowSize(initial_size, ImGui.ImGuiCond_.FirstUseEver)
        }

        defer ImGui.End()
        if !ImGui.Begin("Console") {
            return
        }

        { // text area
            footer_height_to_reserve := ImGui.GetStyle().ItemSpacing.y + ImGui.GetFrameHeightWithSpacing() // 1 separator, 1 input text
            size := ImGui.ImVec2(0, -footer_height_to_reserve)
            ImGui.BeginChildStr("ScrollingRegion", size, false, ImGui.ImGuiWindowFlags_.HorizontalScrollbar)

            line_spacing := ImGui.ImVec2(4,1)
            ImGui.PushStyleVarVec(ImGui.ImGuiStyleVar_.ItemSpacing, line_spacing)
            for i : 0 .. items.count() {
                item := ref items.at(i)

                color, has_color := match item.typ {
                    MessageType.Log     -> ImGui.ImVec4(1, 1, 1, 1), true
                    MessageType.Error   -> ImGui.ImVec4(1, 0.4, 0.4, 1), true
                    MessageType.Command -> ImGui.ImVec4(1, 0.8, 0.6, 1), true
                    _ -> ImGui.ImVec4(1, 1, 1, 1), false
                }
                if has_color then ImGui.PushStyleColorVec(ImGui.ImGuiCol_.Text, color)
                ImGui.Text(item.message.as_cstring())
                if has_color then ImGui.PopStyleColor()
            }

            // scroll to last line
            if scroll_to_bottom or (auto_scroll and ImGui.GetScrollY() >= ImGui.GetScrollMaxY())
            then ImGui.SetScrollHereY(1.0f)
            scroll_to_bottom = false

            ImGui.PopStyleVar()
            ImGui.EndChild()
        }

        //
        ImGui.Separator()

        // input area
        auto_complete_callback :: (data: &ImGui.ImGuiInputTextCallbackData) -> i32 {
            console := cast(&Console) data.UserData
            return console.auto_complete(data)
        }

        input_flags := @bin_or(
            ImGui.ImGuiInputTextFlags_.EnterReturnsTrue,
            ImGui.ImGuiInputTextFlags_.CallbackCompletion,
            ImGui.ImGuiInputTextFlags_.CallbackHistory)
        reclaim_focus := false
        if ImGui.InputText("Input", m_buffer.data, cast m_buffer.length, input_flags, auto_complete_callback, &self) {
            text := string(cast m_buffer.data, cast C.strlen(m_buffer.data))
            text = text.trim()
            if text.bytes.length > 0 {
                execute_command(String.from_string(text))
            }
            m_buffer[0] = char8(0)
            reclaim_focus = true
        }

        // set focus
        ImGui.SetItemDefaultFocus()
        if reclaim_focus then ImGui.SetKeyboardFocusHere(-1)
    }

}

#file_scope
