use import std.array
use import std.string
use import std.rc
use import std.math
mem  :: import std.mem.allocator
util :: import std.util
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c

use import glfw.glfw3
ImGui :: import imgui.imgui_binding

use import "../math"
use import "../entity"
use import "../components"
use import "../input"
use import "../renderer"
use import "../shmup_engine"

#export_scope

EntityInspector :: struct {
    entity                      := Rc[Entity].empty()
    component_infos             := Array[ComponentInfo].create()
    current_selected_component  : i32 = 0
}

impl EntityInspector {
    set_entity :: (ref Self, e: Rc[Entity]) {
        if !e.is_null() and e.get().dead {
            e = Rc[Entity].empty()
        }
        Memory.drop(entity <- e)
    }

    render :: (ref Self) {
        ImGui.Begin("Inspector")
        ImGui.End()

        
        if !entity.is_null() {
            if entity.get().dead {
                // entity wants to be destroyed but we're still holding a reference to it, preventing it
                // from being deleted, so remove the reference
                set_entity(Rc[Entity].empty())
            } else {
                render_entity_inspector(entity.get())
            }
        }
    }

    register_component_info :: (ref Self, default_value: $T) {
        ptr := mem.alloc(T)
        <<ptr = default_value
        component_infos.add(ComponentInfo(@type_info(T), ptr))
    }

    render_entity_inspector :: (ref Self, entity: ref Entity) {
        if ImGui.Begin("Inspector") {
            {
                id_str := fmt.format_any(entity.id)
                ImGui.LabelText("ID", id_str.as_cstring())
            }
            {
                rc_count_str := fmt.format_any(self.entity.count())
                ImGui.LabelText("RC count", rc_count_str.as_cstring())
            }

            ImGui.Separator()

            // transform
            ImGui.InputFloat3("Position", &entity.position.x)
            ImGui.InputFloat3("Size", &entity.size.x)
            ImGui.InputFloat("angle", &entity.angle, 1, 5)

            ImGui.Separator()

            // render component ui and remove component
            while i := 0, i < entity.components.get_length() {
                index := i

                ImGui.PushIDInt(i32(i))
                it := ref entity.components[i]
                if !render_component_inspector(it) {
                    ImGui.OpenPopup("Delete Component")
                } else {
                    i += 1
                }

                if ImGui.BeginPopupModal("Delete Component") {
                    ImGui.Text("Are you sure you want to remove this component?")
                    ImGui.Separator()
                    button_size := ImGui.ImVec2(120, 0)
                    if ImGui.Button("Yes", button_size) {
                        ImGui.CloseCurrentPopup()
                        // remove current component
                        // move all following components one slot down
                        for k : index .. entity.components.get_length() - 1 {
                            entity.components[k] = entity.components[k + 1].clone()
                        }
                        // pop last component which is now in the second last slot
                        last := entity.components.pop()
                        io.println(last.value.count())
                    }
                    ImGui.SameLine()
                    if ImGui.Button("Cancel", button_size) {
                        ImGui.CloseCurrentPopup()
                    }
                    ImGui.EndPopup()
                }
                ImGui.PopID()
                ImGui.Separator()
            }

            { // add component
                button_size := ImGui.ImVec2(0, 0)
                if ImGui.Button("Add Component", button_size) {
                    ImGui.OpenPopup("Add Component")
                }

                popup_size := ImGui.ImVec2(500, 440)
                ImGui.SetNextWindowSize(popup_size, ImGui.ImGuiCond_.FirstUseEver)
                if ImGui.BeginPopupModal("Add Component") {
                    { // list of components
                        list_size := ImGui.ImVec2(150, 0)
                        list_entry_size := ImGui.ImVec2(0, 0)
                        ImGui.BeginChildStr("component list", list_size, true)
                        for bi : component_infos {
                            ImGui.PushIDInt(i32(it_index))
                            name := String.from_string(bi.type_info.kind.Struct.name)

                            if ImGui.Selectable(name.as_cstring(), i32(it_index) == current_selected_component, 0, list_entry_size) {
                                current_selected_component = i32(it_index)
                            }
                            ImGui.PopID()
                        }
                        ImGui.EndChild()
                    }

                    ImGui.SameLine()

                    ImGui.BeginGroup()
                    { // info about selected component
                        info_size := ImGui.ImVec2(0, -ImGui.GetFrameHeightWithSpacing())
                        ImGui.BeginChildStr("component info", info_size, true)

                        if current_selected_component >= 0 and current_selected_component < i32(component_infos.get_length()) {
                            bi := ref component_infos.access(current_selected_component)
                            name := String.from_string(bi.type_info.kind.Struct.name)
                            ImGui.Text(name.as_cstring())
                            ImGui.Separator()

                            for(by_ref=true) m : bi.type_info.kind.Struct.members {
                                name := String.with_capacity(m.name.bytes.length + 1)
                                name.append_string(m.name)
                                imgui_input_property(name, util.pointer_add(bi.value, m.offset), m.typ, &m)
                            }
                        }

                        ImGui.EndChild()
                    }

                    { // ok - cancel - buttons
                        button_size := ImGui.ImVec2(120, 0)
                        if ImGui.Button("Ok", button_size) {
                            if current_selected_component >= 0 and current_selected_component < i32(component_infos.get_length()) {
                                // add component
                                bi := ref component_infos.access(current_selected_component)
                                ptr := cast(&void) mem.alloc_raw(u8, cast bi.type_info.size)
                                C.memcpy(ptr, bi.value, cast bi.type_info.size)

                                Trait :: struct {
                                    v_table : &void
                                    value   : &void
                                }
                                b := Trait(bi.type_info.kind.Struct.get_trait_impl(Component).vtable, ptr)

                                entity.add_component2(<<cast(&Component)&b)
                            }

                            ImGui.CloseCurrentPopup()
                        }
                        ImGui.SameLine()
                        if ImGui.Button("Cancel", button_size) {
                            ImGui.CloseCurrentPopup()
                        }
                    }
                    ImGui.EndGroup()
                    ImGui.EndPopup()
                }
            }
        }
        ImGui.End()
    }

    render_component_inspector :: (ref Self, component_data: ref ComponentData) -> bool {
        ti := component_data.type_info

        // name of component
        name := String.with_capacity(ti.kind.Struct.name.bytes.length + 1)
        name.append_string(ti.kind.Struct.name)

        open := true
        ImGui.SetNextItemOpen(true, ImGui.ImGuiCond_.Once)
        if ImGui.CollapsingHeader_2(name.as_cstring(), &open) {
            {
                rc_count_str := fmt.format_any(component_data.value.count())
                ImGui.LabelText("RC count", rc_count_str.as_cstring())
            }

            // io.println("==")
            for(by_ref=true) m : ti.kind.Struct.members {
                name := String.with_capacity(m.name.bytes.length + 1)
                name.append_string(m.name)
                ptr := util.pointer_add(&component_data.value.get(), m.offset)
                imgui_input_property(name, ptr, m.typ, &m)
            }
        }

        if !open {
            return false
        }

        return true
    }

    imgui_input_property :: (ref Self, name: ref String, ptr: &void, typ: &TypeInfo, m: &TypeInfoStructMember) {
        match typ.kind {
            TypeInfoKind.Float -> {
                match typ.size {
                    4 -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.Float, cast ptr)
                    8 -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.Double, cast ptr)
                }
            }
            TypeInfoKind.Int($ti) -> {
                match (typ.size, ti.signed) {
                    (1, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S8, ptr)
                    (2, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S16, ptr)
                    (4, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S32, ptr)
                    (8, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S64, ptr)
                    (1, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U8, ptr)
                    (2, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U16, ptr)
                    (4, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U32, ptr)
                    (8, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U64, ptr)
                }
            }

            TypeInfoKind.Bool -> {
                ptr := cast(&bool) ptr
                ImGui.Checkbox(name.as_cstring(), ptr)
            }

            _ if typ == @type_info(vec3) -> {
                if m.has_attribute("color") {
                    ImGui.ColorEdit3(name.as_cstring(), cast ptr)
                } else {
                    ImGui.InputFloat3(name.as_cstring(), cast ptr)
                }
            }

            _ if typ == @type_info(Array[vec3]) -> {
                arr := ref <<cast(&Array[vec3]) ptr
                open := true
                ImGui.Text(name.as_cstring())
                ImGui.SameLine()
                if ImGui.CollapsingHeader_2(name.as_cstring(), &open) {
                    while i := 0, i < arr.get_length(), i += 1 {
                        v := ref arr[i]
                        str := String.empty()
                        str.appendf("{}", i)
                        ImGui.PushIDPtr(&v)
                        imgui_input_property(str, &v, @type_info(vec3), m)
                        ImGui.SameLine()

                        if ImGui.SmallButton("-") {
                            io.println("remove")
                            arr.remove_at(i)
                            i -= 1
                        }

                        ImGui.PopID()
                    }

                    if ImGui.SmallButton("+") {
                        arr.add(vec3())
                    }
                }
            }
        }
    }
}
