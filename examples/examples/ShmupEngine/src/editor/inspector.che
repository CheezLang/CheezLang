use import std.array
use import std.string
use import std.rc
use import std.math
mem  :: import std.mem.allocator
util :: import std.util
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c

use import glfw.glfw_binding
ImGui :: import imgui.imgui_binding

use import "../math"
use import "../entity"
use import "../components"
use import "../layer"
use import "../input"
use import "../renderer"
use import "../shmup_engine"

#export_scope

EntityInspector :: struct {
    entity                      := Rc[Entity].empty()
    component_infos             := Array[ComponentInfo].create()
    current_selected_component  : i32 = 0
}

impl EntityInspector {
    set_entity :: (&Self, e: Rc[Entity]) {
        if !e.is_null() and e.get().dead {
            e = Rc[Entity].empty()
        }
        Memory.drop(entity <- e)
    }

    render :: (&Self) {
        ImGui.Begin("Inspector")
        ImGui.End()

        
        if !entity.is_null() {
            if entity.get().dead {
                // entity wants to be destroyed but we're still holding a reference to it, preventing it
                // from being deleted, so remove the reference
                set_entity(Rc[Entity].empty())
            } else {
                render_entity_inspector(entity.get())
            }
        }
    }

    register_component_info :: (&Self, default_value: $T) {
        ptr := mem.alloc(T)
        *ptr = default_value
        component_infos.add(ComponentInfo(@type_info(T), ptr))
    }

    render_entity_inspector :: (&Self, entity: &Entity) {
        if ImGui.Begin("Inspector") {
            {
                id_str := fmt.format_any(entity.id)
                ImGui.LabelText("ID", id_str.as_cstring())
            }
            {
                rc_count_str := fmt.format_any(self.entity.count())
                ImGui.LabelText("RC count", rc_count_str.as_cstring())
            }

            ImGui.Separator()

            // name
            {
                buff : [256] char8 = default
                buff[0] = char8(0)
                C.memcpy(buff.data, entity.name.get_raw(), cast entity.name.get_length())
                ImGui.InputText("Name", buff.data, cast buff.length)
                entity.name.clear()
                entity.name.append_cstring(buff.data)
            }

            // transform
            ImGui.InputFloat3("Position", ^entity.position.x)
            ImGui.InputFloat3("Size", ^entity.size.x)
            ImGui.InputFloat("angle", ^entity.angle, 1, 5)

            ImGui.Separator()

            // render component ui and remove component
            while i := 0, i < entity.components.get_length() {
                index := i

                ImGui.PushIDInt(i32(i))
                component := entity.components[i].clone()
                if !render_component_inspector(component) {
                    ImGui.OpenPopup("Delete Component")
                } else {
                    i += 1
                }

                if ImGui.BeginPopupModal("Delete Component") {
                    ImGui.Text("Are you sure you want to remove this component?")
                    ImGui.Separator()
                    button_size := ImGui.ImVec2(120, 0)
                    if ImGui.Button("Yes", &button_size) {
                        ImGui.CloseCurrentPopup()
                        // remove current component
                        // move all following components one slot down
                        for k in index .. entity.components.get_length() - 1 {
                            entity.components[k] = entity.components[k + 1].clone()
                        }
                        // pop last component which is now in the second last slot
                        last := entity.components.pop()
                        io.println(last.count())
                    }
                    ImGui.SameLine()
                    if ImGui.Button("Cancel", &button_size) {
                        ImGui.CloseCurrentPopup()
                    }
                    ImGui.EndPopup()
                }
                ImGui.PopID()
                ImGui.Separator()
            }

            { // add component
                button_size := ImGui.ImVec2(0, 0)
                if ImGui.Button("Add Component", &button_size) {
                    ImGui.OpenPopup("Add Component")
                }

                popup_size := ImGui.ImVec2(500, 440)
                ImGui.SetNextWindowSize(&popup_size, ImGui.ImGuiCond_.FirstUseEver)
                if ImGui.BeginPopupModal("Add Component") {
                    { // list of components
                        list_size := ImGui.ImVec2(150, 0)
                        list_entry_size := ImGui.ImVec2(0, 0)
                        ImGui.BeginChildStr("component list", &list_size, true)
                        for bi in &component_infos {
                            ImGui.PushIDInt(i32(it_index))
                            type_info := cast(^TypeInfoStruct) bi.type_info
                            name := String.from_string(type_info.name)

                            if ImGui.Selectable(name.as_cstring(), i32(it_index) == current_selected_component, 0, &list_entry_size) {
                                current_selected_component = i32(it_index)
                            }
                            ImGui.PopID()
                        }
                        ImGui.EndChild()
                    }

                    ImGui.SameLine()

                    ImGui.BeginGroup()
                    { // info about selected component
                        info_size := ImGui.ImVec2(0, -ImGui.GetFrameHeightWithSpacing())
                        ImGui.BeginChildStr("component info", &info_size, true)

                        if current_selected_component >= 0 and current_selected_component < i32(component_infos.get_length()) {
                            bi := &component_infos.access(current_selected_component)
                            name := String.from_string(@cast(^TypeInfoStruct, bi.type_info).name)
                            ImGui.Text(name.as_cstring())
                            ImGui.Separator()

                            for(by_ref=true) m in @cast(^TypeInfoStruct, bi.type_info).members {
                                name := String.with_capacity(m.name.bytes.length + 1)
                                name.append_string(m.name)
                                imgui_input_property(&name, util.pointer_add(@ptr_of_trait(bi.value), m.offset), m.typ, ^m)
                            }
                        }

                        ImGui.EndChild()
                    }

                    { // ok - cancel - buttons
                        button_size := ImGui.ImVec2(120, 0)
                        if ImGui.Button("Ok", &button_size) {
                            if current_selected_component >= 0 and current_selected_component < i32(component_infos.get_length()) {
                                // add component
                                bi := &component_infos[int(current_selected_component)]
                                component := EntityLayer.alloc_component(bi.type_info, @vtable_of_trait(bi.value))
                                C.memcpy(@ptr_of_trait(component.get()), @ptr_of_trait(bi.value), cast bi.type_info.size)
                                entity.add_component(component)
                            }

                            ImGui.CloseCurrentPopup()
                        }
                        ImGui.SameLine()
                        if ImGui.Button("Cancel", &button_size) {
                            ImGui.CloseCurrentPopup()
                        }
                    }
                    ImGui.EndGroup()
                    ImGui.EndPopup()
                }
            }
        }
        ImGui.End()
    }

    render_component_inspector :: (&Self, component: Rc[Component]) -> bool {
        ti := component.get().get_type_info()

        // name of component
        name := String.with_capacity(@cast(^TypeInfoStruct, ti).name.bytes.length + 1)
        name.append_string(@cast(^TypeInfoStruct, ti).name)

        open := true
        ImGui.SetNextItemOpen(true, ImGui.ImGuiCond_.Once)
        if ImGui.CollapsingHeader_2(name.as_cstring(), ^open) {
            {
                rc_count_str := fmt.format_any(component.count())
                ImGui.LabelText("RC count", rc_count_str.as_cstring())
            }

            // io.println("==")
            for(by_ref=true) m in @cast(^TypeInfoStruct, ti).members {
                name := String.with_capacity(m.name.bytes.length + 1)
                name.append_string(m.name)
                ptr := util.pointer_add(@ptr_of_trait(component.get()), m.offset)
                imgui_input_property(&name, ptr, m.typ, ^m)
            }
        }

        return true
    }

    imgui_input_property :: (&Self, name: &String, ptr: ^void, typ: ^TypeInfo, m: ^TypeInfoStructMember) {
        match &*typ {
            TypeInfoFloat(_) -> {
                match typ.size {
                    4 -> {
                        ptr := cast(^f32) ptr
                        if m.has_attribute("range") {
                            range := m.get_attribute("range")
                            min := range.get_arg(0, f32)
                            max := range.get_arg(1, f32)
                            ImGui.SliderFloat(name.as_cstring(), ptr, min, max)
                        } else if m.has_attribute("angle") {
                            angle := m.get_attribute("angle")
                            min := angle.get_arg(0, f32)
                            max := angle.get_arg(1, f32)

                            rad := *ptr / 180.0f * 3.1415f
                            ImGui.SliderAngle(name.as_cstring(), ^rad, min, max)
                            *ptr = rad * 180.0f / 3.1415f
                        } else if m.has_attribute("min") and m.has_attribute("max") {
                            min := m.get_attribute("min")
                            max := m.get_attribute("max")

                            ImGui.DragFloat(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = max.get_arg(0, f32))
                        } else if m.has_attribute("min") {
                            min := m.get_attribute("min")
                            ImGui.DragFloat(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = f32.max)
                        } else if m.has_attribute("max") {
                            max := m.get_attribute("max")
                            ImGui.DragFloat(name.as_cstring(), ptr, _v_min = f32.min, _v_max = max.get_arg(0, f32))
                        } else {
                            ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.Float, cast ptr)
                        }
                    }
                    8 -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.Double, cast ptr)
                }
            }
            TypeInfoInt($ti) -> {
                match (typ.size, ti.signed) {
                    (1, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S8, ptr)
                    (2, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S16, ptr)
                    (4, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S32, ptr)
                    (8, true) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.S64, ptr)
                    (1, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U8, ptr)
                    (2, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U16, ptr)
                    (4, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U32, ptr)
                    (8, false) -> ImGui.InputScalar(name.as_cstring(), ImGui.ImGuiDataType_.U64, ptr)
                }
            }

            TypeInfoBool(_) -> {
                ptr := cast(^bool) ptr
                ImGui.Checkbox(name.as_cstring(), ptr)
            }

            _ if typ == @type_info(vec3) -> {
                ptr := cast(^f32) ptr
                if m.has_attribute("color") {
                    ImGui.ColorEdit3(name.as_cstring(), ptr)
                } else if m.has_attribute("range") {
                    range := m.get_attribute("range")
                    min := range.get_arg(0, f32)
                    max := range.get_arg(1, f32)
                    ImGui.SliderFloat3(name.as_cstring(), ptr, min, max)
                } else if m.has_attribute("min") and m.has_attribute("max") {
                    min := m.get_attribute("min")
                    max := m.get_attribute("max")

                    ImGui.DragFloat3(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = max.get_arg(0, f32))
                } else if m.has_attribute("min") {
                    min := m.get_attribute("min")
                    ImGui.DragFloat3(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = f32.max)
                } else if m.has_attribute("max") {
                    max := m.get_attribute("max")
                    ImGui.DragFloat3(name.as_cstring(), ptr, _v_min = f32.min, _v_max = max.get_arg(0, f32))
                } else {
                    ImGui.InputFloat3(name.as_cstring(), ptr)
                }
            }

            _ if typ == @type_info(vec2) -> {
                ptr := cast(^f32) ptr
                if m.has_attribute("range") {
                    range := m.get_attribute("range")
                    min := range.get_arg(0, f32)
                    max := range.get_arg(1, f32)
                    ImGui.SliderFloat2(name.as_cstring(), ptr, min, max)
                } else if m.has_attribute("min") and m.has_attribute("max") {
                    min := m.get_attribute("min")
                    max := m.get_attribute("max")

                    ImGui.DragFloat2(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = max.get_arg(0, f32))
                } else if m.has_attribute("min") {
                    min := m.get_attribute("min")
                    ImGui.DragFloat2(name.as_cstring(), ptr, _v_min = min.get_arg(0, f32), _v_max = f32.max)
                } else if m.has_attribute("max") {
                    max := m.get_attribute("max")
                    ImGui.DragFloat2(name.as_cstring(), ptr, _v_min = f32.min, _v_max = max.get_arg(0, f32))
                } else {
                    ImGui.InputFloat2(name.as_cstring(), ptr)
                }
            }

            _ if typ == @type_info(Array[vec3]) -> {
                arr := &*cast(^Array[vec3]) ptr
                open := true
                ImGui.Text(name.as_cstring())
                ImGui.SameLine()
                if ImGui.CollapsingHeader_2(name.as_cstring(), ^open) {
                    while i := 0, i < arr.get_length(), i += 1 {
                        v := &arr[i]
                        str := String.empty()
                        str.appendf("{}", i)
                        ImGui.PushIDPtr(^v)
                        imgui_input_property(&str, ^v, @type_info(vec3), m)
                        ImGui.SameLine()

                        if ImGui.SmallButton("-") {
                            io.println("remove")
                            arr.remove_at(i)
                            i -= 1
                        }

                        ImGui.PopID()
                    }

                    if ImGui.SmallButton("+") {
                        arr.add(vec3())
                    }
                }
            }
        }
    }
}
