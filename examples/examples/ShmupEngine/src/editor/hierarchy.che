use import std.array
use import std.string
use import std.rc
use import std.math
mem  :: import std.mem.allocator
util :: import std.util
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c

use import glfw.glfw3
ImGui :: import imgui.imgui_binding

use import "../math"
use import "../layer"
use import "../components"
use import "../input"
use import "../renderer"
use import "../shmup_engine"

#export_scope

Hierarchy :: struct {
    engine                  : &ShmupEngine = null
    layer                   : Layer = null
    current_entity_index    : i32 = 0
}

impl Hierarchy {
    set_layer :: (ref Self, l: Layer) {
        layer = l
    }

    render :: (ref Self) {
        if layer == null {
            ImGui.Begin("Hierarchy")
            ImGui.End()
            return
        }
        match layer.get_base() {
            EntityLayer($el) -> render_entity_list(el)
        }
    }

    render_entity_list :: (ref Self, layer: ref EntityLayer) {
        // render list of entities
        if ImGui.Begin("Hierarchy") {
            ImGui.LabelText("Entity Layer", layer.name.as_cstring())
            ImGui.Separator()

            entity_index := current_entity_index
            for e, i : layer.entities {
                ImGui.PushIDInt(i32(i))
                name := fmt.format("Entity {} ({})", [e.get().id, e.count()])

                list_entry_size := ImGui.ImVec2(0, 0)
                if ImGui.Selectable(name.as_cstring(), i32(i) == entity_index, 0, list_entry_size) {
                    entity_index = i32(i)
                }

                if !e.get().active {
                    ImGui.SameLine()
                    ImGui.Text(" - inactive")
                }

                ImGui.PopID()
            }

            entity_index = clamp(entity_index, 0i32, i32(layer.entities.get_length() - 1))

            if entity_index >= 0 and entity_index < i32(layer.entities.get_length()) {
                current_entity_index = entity_index
                current_entity := layer.entities[int(current_entity_index)].clone()
                engine.inspector.set_entity(current_entity)
            }
        }
        ImGui.End()
    }
}
