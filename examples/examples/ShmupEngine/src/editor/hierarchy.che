use import std.array
use import std.string
use import std.rc
use import std.math
mem  :: import std.mem.allocator
util :: import std.util
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c

use import std.os.windows_types
use import std.os.windows_functions

use import glfw.glfw_binding
ImGui :: import imgui.imgui_binding

use import "../math"
use import "../layer"
use import "../components"
use import "../input"
use import "../renderer"
use import "../shmup_engine"

#export_scope

Hierarchy :: struct {
    engine                  : &ShmupEngine = null
    layer                   : &Layer = null
    current_entity_index    : i32 = 0
}

impl Hierarchy {
    set_layer :: (ref Self, l: &Layer) {
        layer = l
    }

    get_layer :: (ref Self) -> Option[&Layer] {
        return if layer == null then None else Some(layer)
    }

    render :: (ref Self) {
        if layer == null {
            ImGui.Begin("Hierarchy")
            ImGui.End()
            return
        }
        match layer.get_base() {
            EntityLayer($el) -> {
                render_entity_list(el)

                el.remove_dead_entities()
            }

            LightingLayer($ll) -> {
                render_lighting_layer(ll)
            }

            DebugLayer($ll) -> {
                render_debug_layer(ll)
            }
        }
    }

    render_debug_layer :: (ref Self, layer: ref DebugLayer) {
        defer ImGui.End()
        if !ImGui.Begin("Hierarchy") {
            return
        }

        data := engine.current_mode_data()
        if data != null {
            ImGui.Checkbox("Show Layer Output", &layer.show_layer_output)

            ImGui.Checkbox("Play", &layer.playing)

            for v : layer.uiae {
                str := fmt.format("u{}", [it_index])
                ImGui.DragFloat(str.as_cstring(), &layer.uiae[it_index], 0.01f)
            }

            for l : data.layer_stack {
                if l == &layer then break
                ImGui.PushIDPtr(l)
                defer ImGui.PopID()

                ImGui.Text(l.get_name())
                ImGui.SameLine(ImGui.GetWindowContentRegionMax().x - 100)

                {
                    defer ImGui.PopStyleColor()
                    if layer.layer_index == it_index and !layer.show_light_map
                    then ImGui.PushStyleColorInt(ImGui.ImGuiCol_.Button, ImGui.Color32(200, 200, 200))
                    else ImGui.PushStyleColorInt(ImGui.ImGuiCol_.Button, ImGui.Color32(50, 50, 50))
                    if ImGui.SmallButton("Color") {
                        layer.layer_index = it_index
                        layer.show_light_map = false
                        break
                    }
                }
                ImGui.SameLine()
                {
                    defer ImGui.PopStyleColor()
                    if layer.layer_index == it_index and layer.show_light_map
                    then ImGui.PushStyleColorInt(ImGui.ImGuiCol_.Button, ImGui.Color32(200, 200, 200))
                    else ImGui.PushStyleColorInt(ImGui.ImGuiCol_.Button, ImGui.Color32(50, 50, 50))
                    if ImGui.SmallButton("Light") {
                        layer.layer_index = it_index
                        layer.show_light_map = true
                        break
                    }
                }
            }

        }
    }

    render_lighting_layer :: (ref Self, layer: ref LightingLayer) {
        defer ImGui.End()
        if !ImGui.Begin("Hierarchy") {
            return
        }

        ImGui.Checkbox("Disabled", &layer.disabled)
        ImGui.DragFloat("Exposure", &layer.exposure, 0.01f, 0.0f, f32.max)
    }

    render_entity_list :: (ref Self, layer: ref EntityLayer) {
        // render list of entities
        if ImGui.Begin("Hierarchy") {
            ImGui.LabelText("Entity Layer", layer.name.as_cstring())
            ImGui.Separator()

            entity_index := current_entity_index
            for e, i : layer.entities {
                ImGui.PushIDInt(i32(i))
                ImGui.BeginGroup()

                list_entry_size := ImGui.ImVec2(0, 0)
                if ImGui.Selectable(e.get().name.as_cstring(), i32(i) == entity_index, 0, list_entry_size) {
                    entity_index = i32(i)
                }

                if !e.get().active {
                    ImGui.SameLine()
                    ImGui.Text(" - inactive")
                }
                
                {
                    rmin := ImGui.GetItemRectMin()
                    rmax := ImGui.GetItemRectMax()
                    height := i32(rmax.y - rmin.y)
                    if ImGui.IsMouseHoveringRect(rmin, rmax) {
                        cursor_pos := POINT()
                        GetCursorPos(&cursor_pos)

                        if i > 0 and ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.ImGuiKey_.UpArrow)) {
                            layer.swap_entities(i, i - 1)
                            SetCursorPos(cursor_pos.x, cursor_pos.y - height)

                            if entity_index == i32(i) {
                                entity_index = entity_index - 1
                            } else if entity_index == i32(i) - 1 {
                                entity_index = entity_index + 1
                            }
                        }
                        if i < layer.entities.get_length() - 1 and ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.ImGuiKey_.DownArrow)) {
                            layer.swap_entities(i, i + 1)
                            SetCursorPos(cursor_pos.x, cursor_pos.y + height)
                            if entity_index == i32(i) {
                                entity_index = entity_index + 1
                            } else if entity_index == i32(i) + 1 {
                                entity_index = entity_index - 1
                            }
                        }
                    }   
                }
                ImGui.EndGroup()
                ImGui.PopID()

                if ImGui.BeginPopupContextItem(e.get().name.as_cstring()) {
                    defer ImGui.EndPopup()
                    if ImGui.MenuItem("Active", null, e.get().active, true) {
                        e.get().active = !e.get().active
                    }
                    if ImGui.MenuItem("Clone Entity", null, false, true) {
                        layer.clone_entity(e.clone())
                    }

                    ImGui.Separator()

                    if ImGui.MenuItem("Delete", null, false, true) {
                        e.get().active = false
                        e.get().dead = true
                    }
                }
            }

            entity_index = clamp(entity_index, 0i32, i32(layer.entities.get_length() - 1))

            if entity_index >= 0 and entity_index < i32(layer.entities.get_length()) {
                current_entity_index = entity_index
                current_entity := layer.entities[int(current_entity_index)].clone()
                engine.inspector.set_entity(current_entity)
            }

            if ImGui.BeginPopupContextWindow("test", _also_over_items = false) {
                defer ImGui.EndPopup()
                if ImGui.MenuItem("Create Entity", null, false, true) {
                    layer.new_entity()
                }
            }
        }
        ImGui.End()
    }
}
