mem :: import std.mem.allocator
io  :: import std.io

use import glfw.glfw_binding

#export_scope

Input :: struct {
    keys_pressed  : [GLFW_KEY_LAST + 1]bool = default
    keys_released : [GLFW_KEY_LAST + 1]bool = default
    keys_down     : [GLFW_KEY_LAST + 1]bool = default
}

impl Input {
    new :: () -> ^Input {

        input := mem.alloc(Input)
        *input = Input()
        return input
    }

    set_key_state :: (&Self, key: int, state: bool) {
        if state {
            *keys_pressed[key] = true
            *keys_down[key] = true
        } else {
            *keys_released[key] = true
            *keys_down[key] = false
        }
    }

    release_all_keys :: (&Self) {
        for key in 0 ..= GLFW_KEY_LAST {
            *keys_released[key] = false
            *keys_pressed[key] = false
            *keys_down[key] = false
        }
    }

    reset :: (&Self) {
        for key in 0 ..= GLFW_KEY_LAST {
            *keys_pressed[key] = false
            *keys_released[key] = false
        }
    }

    key_down :: (&Self, key: int) -> bool {
        return *keys_down[key]
    }
    key_pressed :: (&Self, key: int) -> bool {
        return *keys_pressed[key]
    }
    key_released :: (&Self, key: int) -> bool {
        return *keys_released[key]
    }
}