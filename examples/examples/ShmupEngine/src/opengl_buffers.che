use import std.array
use import std.rc
use import std.string
mem :: import std.mem.allocator
io  :: import std.io

use import opengl.glad_binding
use import stb.stb_binding

use import opengl_utils
use import math

#export_scope

ShaderDataType :: enum #copy {
    None = 0, Float, Float2, Float3, Float4, Mat3, Mat4, Int, Int2, Int3, Int4, Bool
}

BufferElement :: struct #copy {
    name        : string
    typ         : ShaderDataType
    normalized  : bool = false
    offset      : int  = 0
}

impl BufferElement {
    get_component_count :: (ref Self) -> i32 {
        return match typ {
            ShaderDataType.Float  -> 1
            ShaderDataType.Float2 -> 2
            ShaderDataType.Float3 -> 3
            ShaderDataType.Float4 -> 4
            ShaderDataType.Mat3   -> 3 * 3
            ShaderDataType.Mat4   -> 4 * 4
            ShaderDataType.Int    -> 1
            ShaderDataType.Int2   -> 2
            ShaderDataType.Int3   -> 3
            ShaderDataType.Int4   -> 4
            ShaderDataType.Bool   -> 1

            _ -> {@assert(false); 0}
        }
    }

    get_size :: (ref Self) -> i32 {
        return match typ {
            ShaderDataType.Float  -> 4
            ShaderDataType.Float2 -> 4 * 2
            ShaderDataType.Float3 -> 4 * 3
            ShaderDataType.Float4 -> 4 * 4
            ShaderDataType.Mat3   -> 4 * 3 * 3
            ShaderDataType.Mat4   -> 4 * 4 * 4
            ShaderDataType.Int    -> 4
            ShaderDataType.Int2   -> 4 * 2
            ShaderDataType.Int3   -> 4 * 3
            ShaderDataType.Int4   -> 4 * 4
            ShaderDataType.Bool   -> 1

            _ -> {@assert(false); 0}
        }
    }
}

BufferLayout :: struct {
    stride : i32 = 0
    elements := Array[BufferElement].create()
}

impl BufferLayout {
    new :: (elements: []BufferElement) -> BufferLayout {
        arr     := Array[BufferElement].create(elements.length)
        stride  : i32 = 0

        for e : elements {
            arr.add(e)
        }

        { // calculate offsets and stride
            offset := 0
            for e : arr {
                size := e.get_size()
                e.offset = offset
                offset += int(size)
                stride += size
            }
        }

        return BufferLayout(stride, arr)
    }
}

//////////////////////////////////////////////

VertexBuffer :: struct {
    vbo    : u32
    layout : BufferLayout
}

impl VertexBuffer {
    create :: (vertices: []f32) -> &VertexBuffer {
        vbo : u32 = 0
        GL(glGenBuffers(1, &vbo))
        GL(glBindBuffer(GL_ARRAY_BUFFER, vbo))
        GL(glBufferData(GL_ARRAY_BUFFER, @sizeof(f32) * vertices.length, vertices.data, GL_STATIC_DRAW))
        GL(glBindBuffer(GL_ARRAY_BUFFER, 0))

        buff := mem.alloc(VertexBuffer)
        <<buff = VertexBuffer(vbo, BufferLayout())
        return buff
    }

    dynamic :: (size_in_bytes: int) -> &VertexBuffer {
        vbo : u32 = 0
        GL(glGenBuffers(1, &vbo))
        GL(glBindBuffer(GL_ARRAY_BUFFER, vbo))
        GL(glBufferData(GL_ARRAY_BUFFER, cast size_in_bytes, null, GL_DYNAMIC_DRAW))
        GL(glBindBuffer(GL_ARRAY_BUFFER, 0))

        buff := mem.alloc(VertexBuffer)
        <<buff = VertexBuffer(vbo, BufferLayout())
        return buff
    }

    sub_data :: (ref Self, offset: int, bytes: int, data: &void) {
        GL(glBindBuffer(GL_ARRAY_BUFFER, vbo))
        GL(glBufferSubData(GL_ARRAY_BUFFER, cast offset, cast bytes, data))
        GL(glBindBuffer(GL_ARRAY_BUFFER, 0))
    }

    bind :: (ref Self) {
        GL(glBindBuffer(GL_ARRAY_BUFFER, vbo))
    }

    unbind :: (ref Self) {
        GL(glBindBuffer(GL_ARRAY_BUFFER, 0))
    }
}

impl Drop for VertexBuffer {
    drop :: (ref Self) {
        glDeleteBuffers(1, &vbo)
    }
}

IndexBuffer :: struct {
    vbo   : u32
    count : i32
}

impl IndexBuffer {
    create :: (indices: []u32) -> &IndexBuffer {
        vbo : u32 = 0
        glGenBuffers(1, &vbo)
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo)
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, @sizeof(u32) * indices.length, indices.data, GL_STATIC_DRAW)
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)

        buff := mem.alloc(IndexBuffer)
        <<buff = IndexBuffer(vbo, i32(indices.length))
        return buff
    }

    bind :: (ref Self) {
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo)
    }

    unbind :: (ref Self) {
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
    }
}

impl Drop for IndexBuffer {
    drop :: (ref Self) {
        glDeleteBuffers(1, &vbo)
    }
}

////////////////////////////////

VertexArray :: struct {
    vao                       : u32
    index_buffer              : &IndexBuffer = null
    vertex_buffers            := Array[&VertexBuffer].create()
    vertex_attrib_array_index : u32 = 0
}

impl VertexArray {
    new :: () -> &VertexArray {
        vao : u32 = 0
        glGenVertexArrays(1, &vao)

        buff := mem.alloc(VertexArray)
        <<buff = VertexArray(vao)
        return buff
    }

    bind :: (ref Self) {
        glBindVertexArray(vao)
    }

    unbind :: (ref Self) {
        glBindVertexArray(0)
    }

    set_index_buffer :: (ref Self, ib: &IndexBuffer) {
        glBindVertexArray(vao)
        ib.bind()
        index_buffer = ib
    }

    add_vertex_buffer :: (ref Self, vb: &VertexBuffer) {
        glBindVertexArray(vao)
        vb.bind()

        for element : vb.layout.elements {
            glEnableVertexAttribArray(vertex_attrib_array_index)
            glVertexAttribPointer(
                vertex_attrib_array_index
                element.get_component_count()
                GL_FLOAT
                if element.normalized then GL_TRUE else GL_FALSE
                vb.layout.stride
                cast(&void) element.offset)

            vertex_attrib_array_index += 1
        }

        vertex_buffers.add(vb)
    }
}

impl Drop for VertexArray {
    drop :: (ref Self) {
        glDeleteVertexArrays(1, &vao)
    }
}

///////////////////////////////////////////////
Texture :: struct {
    id      : u32
    width   : int
    height  : int
    internal_format : GLint
    data_format     : GLenum
}

TextureChannels :: enum {
    RGB
    RGBA
}

TextureFormat :: enum {
    U8
    F32
}

impl Texture {
    from_file :: (path: string, format: TextureFormat = .U8) -> Result[Rc[Texture], ()] {
        io.println("creating texture from file")
        // load data from file
        width    : i32 = 0
        height   : i32 = 0
        channels : i32 = 0
        stbi_set_flip_vertically_on_load(1)
        data : &stbi_uc = null
        {
            str := String.from_string(path)
            data = stbi_load(str.as_cstring(), &width, &height, &channels, 0)
        }

        if data == null {
            return Err(())
        }

        defer stbi_image_free(data)

        internal_format, data_format, format := channels_to_formats(if channels == 3 then .RGB else .RGBA, format)

        id : u32 = 0
        GL(glGenTextures(1, &id))
        GL(glBindTexture(GL_TEXTURE_2D, id))

        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT))
        GL(glTexImage2D(GL_TEXTURE_2D, 0, internal_format, width, height, 0, data_format, format, data))

        return Ok(Rc[Texture].new(Texture(id, cast width, cast height, internal_format, data_format)))
    }

    from_bytes :: (width: int, height: int, channels: TextureChannels, pixels: []u8, format: TextureFormat = .U8) -> Rc[Texture] {
        internal_format, data_format, format := channels_to_formats(channels, format)

        id : u32 = 0
        GL(glGenTextures(1, &id))
        GL(glBindTexture(GL_TEXTURE_2D, id))

        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT))
        GL(glTexImage2D(GL_TEXTURE_2D, 0, internal_format, cast width, cast height, 0, data_format, format, pixels.data))

        return Rc[Texture].new(Texture(id, width, height, internal_format, data_format))
    }

    empty :: (width: int, height: int, channels: TextureChannels, format: TextureFormat = .U8) -> Rc[Texture] {
        internal_format, data_format, format := channels_to_formats(channels, format)

        id : u32 = 0
        GL(glGenTextures(1, &id))
        GL(glBindTexture(GL_TEXTURE_2D, id))

        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT))
        GL(glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT))
        GL(glTexImage2D(GL_TEXTURE_2D, 0, internal_format, cast width, cast height, 0, data_format, format, null))

        return Rc[Texture].new(Texture(id, width, height, internal_format, data_format))
    }

    channels_to_formats :: (channels: TextureChannels, format: TextureFormat) -> (GLint, GLenum, GLenum) {
        return match channels, format {
            use TextureChannels
            use TextureFormat

            (RGB, U8) -> (GL_RGB8, GL_RGB, GL_UNSIGNED_BYTE)
            (RGBA, U8) -> (GL_RGBA8, GL_RGBA, GL_UNSIGNED_BYTE)
            (RGB, F32) -> (GL_RGB16F, GL_RGB, GL_FLOAT)
            (RGBA, F32) -> (GL_RGBA16F, GL_RGBA, GL_FLOAT)

            // (RGB, _) -> (GL_RGB32F, GL_RGB, GL_FLOAT)
            // (RGBA, _) -> (GL_RGBA32F, GL_RGBA, GL_FLOAT)

            _ -> @assert(false)
        }
    }

    bind :: (ref Self, slot: int) {
        GL(glActiveTexture(cast GL_TEXTURE0 + slot))
        GL(glBindTexture(GL_TEXTURE_2D, id))
    }
}

impl Drop for Texture {
    drop :: (ref Self) {
        glDeleteTextures(1, &id)
    }
}

FrameBuffer :: struct {
    id              : u32
    render_texture  : Rc[Texture]
    depth_texture   : u32
    size            : vec2i
}

impl FrameBuffer {
    new :: (width: int, height: int, unclamped_color: bool = false) -> Result[Rc[FrameBuffer], ()] {
        // The framebuffer, which regroups 0, 1, or more textures, and 0 or 1 depth buffer.
        frame_buffer := 0u32
        GL(glGenFramebuffers(1, &frame_buffer))
        GL(glBindFramebuffer(GL_FRAMEBUFFER, frame_buffer))

        render_texture := Texture.empty(width, height, .RGB, if unclamped_color then .F32 else .U8)
        
        // The depth buffer
        depth_texture := 0u32
        GL(glGenRenderbuffers(1, &depth_texture))
        GL(glBindRenderbuffer(GL_RENDERBUFFER, depth_texture))
        GL(glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT, i32(width), i32(height)))
        GL(glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depth_texture))

        // Set "render_texture" as our colour attachement #0
        GL(glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, render_texture.get().id, 0))

        // Set the list of draw buffers.
        draw_buffers := [u32(GL_COLOR_ATTACHMENT0)]
        GL(glDrawBuffers(1, draw_buffers.data)) // "1" is the size of draw_buffers

        // Always check that our framebuffer is ok
        if glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE {
            return Err(())
        }

        GL(glBindTexture(GL_TEXTURE_2D, 0))
        GL(glBindRenderbuffer(GL_RENDERBUFFER, 0))
        GL(glBindFramebuffer(GL_FRAMEBUFFER, 0))

        return Ok(Rc[FrameBuffer].new(FrameBuffer(
            id              = frame_buffer
            render_texture  = render_texture
            depth_texture   = depth_texture
            size            = vec2i(width, height)
        )))
    }

    bind :: (ref Self) {
        GL(glBindFramebuffer(GL_FRAMEBUFFER, id))
        glViewport(0, 0, i32(size.x), i32(size.y))
    }

    unbind :: () {
        GL(glBindFramebuffer(GL_FRAMEBUFFER, 0))
    }

    bind_read :: (ref Self) {
        GL(glBindFramebuffer(GL_READ_FRAMEBUFFER, id))
    }

    bind_write :: (ref Self) {
        GL(glBindFramebuffer(GL_DRAW_FRAMEBUFFER, id))
    }

    unbind_read :: () {
        GL(glBindFramebuffer(GL_READ_FRAMEBUFFER, 0))
    }

    unbind_write :: () {
        GL(glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0))
    }

    copy_to :: (ref Self, target: ref FrameBuffer, bit: enum #flags { Color, Depth, Stencil } = .Color) {
        mask := match bit {
            .Color      -> GL_COLOR_BUFFER_BIT
            .Depth      -> GL_DEPTH_BUFFER_BIT
            .Stencil    -> GL_STENCIL_BUFFER_BIT
        }

        GL(glBindFramebuffer(GL_READ_FRAMEBUFFER, self.id))
        GL(glBindFramebuffer(GL_DRAW_FRAMEBUFFER, target.id))
        GL(glBlitFramebuffer(0, 0, i32(self.size.x), i32(self.size.y), 0, 0, i32(target.size.x), i32(target.size.y), u32(mask), GL_NEAREST))
        GL(glBindFramebuffer(GL_READ_FRAMEBUFFER, 0))
        GL(glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0))
    }
}