use import std.string
use import std.array
use import std.math
use import std.time
use import std.rc
use import std.mem.std_heap_allocator
mem :: import std.mem.allocator
fmt :: import std.fmt
io  :: import std.io
fs  :: import std.io.fs
C   :: import std.c

use import glfw.glfw_binding
use import opengl.glad_binding
ImGui :: import imgui.imgui_binding

use import opengl_utils
use import layer
use import matrix
use import math
use import renderer
use import input
use import entity
use import components
use import command
use import viewport
use import post_vfx
use import editor.inspector
use import editor.hierarchy
use import editor.console

#export_scope
Event :: enum {
    EngineModeChanged : EngineMode
}

EnabledEditors :: struct {
    editor      := true
    stats       := false
    demo_window := true
}

PropertyEdit :: enum #copy {
    EditInt     : (ptr: ^int, name: c_string)
    EditFloat   : (ptr: ^float, name: c_string, step: float)
    EditVec3    : (ptr: ^vec3, name: c_string)
    EditVec4    : (ptr: ^vec4, name: c_string)
    EditColor3  : (ptr: ^vec3, name: c_string)
}

// impl PlayMode {
//     initialize :: (&Self, edit_mode: &EditMode) {
//         layer_stack.clear()
//         for l in edit_mode.layer_stack {
//             match l.clone() {
//                 Some($l) -> {
//                     layer_stack.add(l)
//                 }
//             }
//         }
//         self.init()
//     }
// }


Editor :: struct {
}

EngineModeData :: struct {
    layer_stack := Array[^Layer].create()
}

EngineMode :: enum #copy {
    None
    Edit    : ^EngineModeData
    Play    : ^EngineModeData
    Pause   : ^EngineModeData
}

ShmupEngine :: struct {
    // engine stuff
    world_size              := vec3(10, 10, 0)

    current_mode            := EngineMode.None
    edit_mode               := EngineModeData()
    play_mode               := EngineModeData()

    // io stuff
    global_input            : ^Input = null
    game_input              : ^Input = null

    // editor stuff
    editor                  : Editor = default
    enabled_editors         : EnabledEditors = default
    current_fps             := 0
    current_frame_time      := 0.0
    properties_to_edit      := Array[PropertyEdit].create()
    inspector               : EntityInspector = default
    hierarchy               : Hierarchy = default
    current_layer_index     : i32 = 0
    console                 := Rc[Console].empty()
    editor_edit_mode_color  := vec3()
    editor_play_mode_color  := vec3(0.027f, 0.2f, 0.047f)
    save_file               := Option[String].None

    editor_windows          := Array[Rc[GameView]].create()
    active_editor_window    := Rc[GameView].empty()

    // window stuff
    glfw_window             : ^GLFWwindow = null
    vsync_enabled           := true
    window_size             := vec2i(0, 0)

    // rendering stuff
    renderer                : ^Renderer = null

    viewport_size_max       : vec2i = default
}

impl ShmupEngine {
    new :: () -> ^ShmupEngine {
        ptr := mem.alloc(ShmupEngine)
        *ptr = ShmupEngine()

        // setup modes
        ptr.current_mode = EngineMode.Edit(^ptr.edit_mode)

        return ptr
    }

    start :: (&Self) {
        on_framebuffer_resize :: (window: ^GLFWwindow, w: i32, h: i32) {
            engine := cast(^ShmupEngine) glfwGetWindowUserPointer(window)
            engine.window_size = vec2i(int(w), int(h))
            glViewport(0, 0, w, h)
        }

        glfwSetErrorCallback(glfw_error_callback)

        // initialize glfw
        io.println("[LOG] Initializing GLFW")
        if glfwInit() == 0 {
            io.println("[ERROR] Failed to initialize GLFW")
            return
        }
        defer glfwTerminate()

        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)
        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE)
        glfwWindowHint(GLFW_VISIBLE, 0)
        glfwWindowHint(GLFW_MAXIMIZED, 0)
        glfwWindowHint(GLFW_RESIZABLE, 1)

        monitor, monitor_pos := {
            count := 0i32
            monitors := glfwGetMonitors(^count)
            if count == 0 {
                io.println("[ERROR] No monitors found")
                return
            }

            // use last monitor
            monitor := monitors[count - 1]

            // use primary monitor
            // monitor := monitors[0]

            monitor_pos := Vector2[i32]()
            glfwGetMonitorPos(monitor, ^monitor_pos.x, ^monitor_pos.y)

            monitor, monitor_pos
        }
        vidmode := glfwGetVideoMode(monitor)
        io.printfln("[LOG] primary monitor size: {} x {}", (vidmode.width, vidmode.height))
        glfw_window = glfwCreateWindow(vidmode.width, vidmode.height, "Hello World", null, null)
        // glfw_window = glfwCreateWindow(100, 100, "Hello World", null, null)
        if glfw_window == null {
            io.println("[ERROR] Failed to create window")
            return
        }
        defer glfwDestroyWindow(glfw_window)

        glfwSetWindowPos(glfw_window, monitor_pos.x + 100, monitor_pos.y + 100)
        glfwMakeContextCurrent(glfw_window)
        glfwSetWindowUserPointer(glfw_window, ^self)
        glfwSwapInterval(if vsync_enabled then 1 else 0)

        // initialize glad
        io.println("[LOG] Initializing GLAD")
        if gladLoadGL() != 1 {
            io.println("[ERROR] Failed to initialize GLAD")
            return
        }
        { // get opengl version
            opengl_version := glGetString(GL_VERSION)
            io.printfln("[LOG] OpenGL version: {}", string(opengl_version, cast C.strlen(cast opengl_version)))
        }

        glfwShowWindow(glfw_window)
        glfwMaximizeWindow(glfw_window)

        // get initial size
        {
            w : i32 = 0
            h : i32 = 0
            glfwGetFramebufferSize(glfw_window, ^w, ^h)
            window_size = vec2i(int(w), int(h))
            glViewport(0, 0, w, h)
        }

        // register callbacks
        glfwSetKeyCallback(glfw_window, glfw_key_callback)
        glfwSetFramebufferSizeCallback(glfw_window, on_framebuffer_resize)

        // initialize imgui
        io.println("[LOG] Initializing ImGui")
        if !init_imgui(glfw_window) {
            io.println("[ERROR] Failed to initialize ImGui")
            return
        }
        defer shutdown_imgui()

        viewport_size_max.x = int(vidmode.width)
        viewport_size_max.y = int(vidmode.height)
        viewport_size_max.x = 1920
        viewport_size_max.y = 1080
        io.println("[LOG] Initializing viewports")
        if !initialize_viewport() {
            io.println("[ERROR] Failed to create frame buffer for viewport")
            return
        }

        // setup renderer
        global_input = Input.new()
        game_input   = Input.new()
        renderer     = Renderer.create(viewport_size_max)

        // setup editors
        hierarchy.engine = ^self
        console = Rc[Console].new(Console.new(cast self.on_command))
        
        {
            bg := ImGui.GetStyle().Colors[int(ImGui.ImGuiCol_.WindowBg)]
            editor_edit_mode_color = vec3(bg.x, bg.y, bg.z)
            self.set_editor_background_color(editor_edit_mode_color)
        }

        render_loop()
    }

    initialize_viewport :: (&Self) -> bool {
        editor_windows.add(WindowBase.new(EditorWindow, ^self))
        editor_windows.add(WindowBase.new(GameWindow, ^self))
        editor_windows.add(WindowBase.new(GameAndEditorWindow, ^self))
        editor_windows[2].get().base().enabled = false
        active_editor_window = editor_windows[0].clone()

        for window in editor_windows {
            if !window.get().initialize(viewport_size_max) {
            }
        }

        return true
    }

    glfw_key_callback :: (window: ^GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {
        engine := cast(^ShmupEngine) glfwGetWindowUserPointer(window)

        match (action, key, mods) {
            (GLFW_PRESS, GLFW_KEY_F12, _) -> {
                engine.enabled_editors.editor = !engine.enabled_editors.editor
                return
            }

            (GLFW_PRESS, GLFW_KEY_F5, _) -> {
                engine.toggle_play_mode()
                return
            }
            (GLFW_PRESS, GLFW_KEY_F9, GLFW_MOD_CONTROL) -> {
                io.println("[LOG] Reloading shaders")
                engine.renderer.reload_shaders()
                return
            }
            
            (GLFW_PRESS, GLFW_KEY_L, GLFW_MOD_CONTROL) -> {
                match &engine.save_file {
                    Some($file) -> {
                        match engine.current_mode {
                            EngineMode.Edit($data) -> {
                                engine.console.get().log("Loading layers")
                                for layer in data.layer_stack {
                                    layer.load_from_file(file.slice())
                                }
                            }
                        }
                    }

                    None -> {
                        engine.console.get().log_error("[ERROR] Trying to load layers from file but no file name was specified")
                        io.println("[ERROR] Trying to load layers from file but no file name was specified")
                    }
                }
                return
            }
            (GLFW_PRESS, GLFW_KEY_S, GLFW_MOD_CONTROL) -> {
                match &engine.save_file {
                    Some($file_name) -> {
                        match engine.current_mode {
                            EngineMode.Edit($data) -> {
                                engine.console.get().log("Saving layers")
                                file_content := String.empty()
                                for layer in data.layer_stack {
                                    layer.save_to_file(&file_content)
                                }
                                fs.write_file(file_name.slice(), file_content.slice())
                            }
                        }
                    }

                    None -> {
                        engine.console.get().log_error("[ERROR] Trying to save layers to file but no file name was specified")
                        io.println("[ERROR] Trying to save layers to file but no file name was specified")
                    }
                }
                return
            }

            (GLFW_PRESS, $keycode, _) -> {
                engine.global_input.set_key_state(keycode, true)
            }
            (GLFW_RELEASE, $keycode, _) -> {
                engine.global_input.set_key_state(keycode, false)
            }
        }

        match (action, key) {
            ($action, $keycode) -> {
                engine.active_editor_window.get().on_key_event(key, scancode, action, mods)
            }
        }
    }

    render_loop :: (&Self) {
        // @temp
        save_file = Some(String.from_string("D:/Programming/CheezLang/data/example_layer.txt"))

        self.register_builtin_components()
        
        { // initialize edit mode
            for layer in edit_mode.layer_stack {
                if !layer.init() {
                    io.formatln("[ERROR] Failed to initialize layer {} when starting engine", [it_index])
                }
            }
        }

        last_frame_time := get_time_microseconds()

        frame_timer := 0.0
        fps_counter := 0

        loop {
            if glfwWindowShouldClose(glfw_window) != 0 then break
            // handle time
            this_frame_time     := get_time_microseconds()
            last_frame_duration := this_frame_time - last_frame_time
            last_frame_time = this_frame_time

            // convert time from microseconds to seconds
            delta_time := float(double(last_frame_duration) * 0.000001)
            current_frame_time = delta_time
            frame_timer += delta_time
            fps_counter += 1

            if frame_timer >= 1 {
                current_fps = fps_counter
                frame_timer -= 1
                fps_counter = 0
            }

            // start rendering
            if enabled_editors.editor {
                frame_with_editor(delta_time)
            } else {
                frame_without_editor(delta_time)
            }
            
            glfwSwapBuffers(glfw_window)
        }
    }

    frame_without_editor :: (&Self, delta_time: float) {
        // // handle events and input
        // global_input.reset()
        // game_input.reset()
        // current_mode.reset_input()
        // glfwPollEvents()

        // viewport_size = window_size
        // GL(glViewport(0, 0, cast viewport_size.x, cast viewport_size.y))

        // glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w)
        // glClear(GL_COLOR_BUFFER_BIT)

        // self.update_projection_matrix(viewport_size.change_type(f32))
        
        // // update mode
        // current_mode.update(delta_time)

        // // render mode
        // renderer.begin_scene(projection_matrix)
        // current_mode.render(*renderer)
        // renderer.draw_quad(vec3(0, 0, 0), world_size, 0, 0.1)
        // // renderer.end_scene()
    }

    frame_with_editor :: (&Self, delta_time: float) {
        glClearColor(1, 0, 1, 1)
        glClear(GL_COLOR_BUFFER_BIT)
        imgui_begin_frame()

        create_dock_space()

        // handle events and input
        global_input.reset()
        game_input.reset()
        active_editor_window.get().base().input.reset()
        glfwPollEvents()

        // render imgui gui
        render_menu_bar()
        render_editor()

        update(delta_time)
        for window in editor_windows {
            if !window.get().base().enabled then continue
            window.get().render(world_size, *renderer)
        }

        // end frame
        imgui_end_frame()
    }

    update :: (&Self, dt: f32) {
        for window in editor_windows {
            if !window.get().base().enabled then continue
            window.get().update(world_size)

            if window.get().base().viewport.lost_focus {
                window.get().base().input.release_all_keys()
            }

            if window.get().is_focused() {
                active_editor_window = window.clone()
            }
        }

        match current_mode {
            EngineMode.Pause($data) -> {
                if global_input.key_pressed(GLFW_KEY_F6) {
                    current_mode = EngineMode.Play(data)
                }
            }
            EngineMode.Play($data) -> {
                if global_input.key_pressed(GLFW_KEY_F6) {
                    current_mode = EngineMode.Pause(data)
                }

                for layer in data.layer_stack {
                    layer.update(dt)
                }
            }
        }
    }

    render_menu_bar :: (&Self) {
        if ImGui.BeginMainMenuBar() {
            if ImGui.BeginMenu("File") {
                // ShowExampleMenuFile()
                ImGui.EndMenu()
            }
            if ImGui.BeginMenu("Edit") {
                if (ImGui.MenuItem("Undo", "CTRL+Z")) {}
                if (ImGui.MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item
                ImGui.Separator()
                if (ImGui.MenuItem("Cut", "CTRL+X")) {}
                if (ImGui.MenuItem("Copy", "CTRL+C")) {}
                if (ImGui.MenuItem("Paste", "CTRL+V")) {}
                ImGui.EndMenu()
            }

            if ImGui.BeginMenu("Debug") {
                if ImGui.MenuItem_2("Show Stats", null, ^enabled_editors.stats, true) {}
                if ImGui.MenuItem_2("Show Demo Menu", null, ^enabled_editors.demo_window, true) {}
                ImGui.EndMenu()
            }

            ImGui.EndMainMenuBar()
        }
    }

    render_editor :: (&Self) {
        if enabled_editors.demo_window {
            ImGui.ShowDemoWindow(^enabled_editors.demo_window)
        }

        if enabled_editors.stats {
            ImGui.SetNextWindowBgAlpha(0.35f) // Transparent background
            overlay_flags := @bin_or(
                // ImGui.ImGuiWindowFlags_.NoTitleBar,
                // ImGui.ImGuiWindowFlags_.NoSavedSettings,
                ImGui.ImGuiWindowFlags_.NoCollapse,
                ImGui.ImGuiWindowFlags_.NoDocking,
                ImGui.ImGuiWindowFlags_.NoResize,
                ImGui.ImGuiWindowFlags_.AlwaysAutoResize,
                ImGui.ImGuiWindowFlags_.NoFocusOnAppearing,
                ImGui.ImGuiWindowFlags_.NoNav)
            if ImGui.Begin("Stats", ^enabled_editors.stats, overlay_flags) {
                // viewport dimensions
                dimensions := fmt.format("{} x {}", [active_editor_window.get().base().viewport.size.x, active_editor_window.get().base().viewport.size.y])
                ImGui.LabelText("Active Editor Dimensions", dimensions.as_cstring())
                ImGui.Separator()

                // show fps
                delta_time_str := fmt.format_any(current_frame_time)
                ImGui.LabelText("Frame duration", delta_time_str.as_cstring())
                fps_counted_str := fmt.format_any(current_fps)
                ImGui.LabelText("FPS", fps_counted_str.as_cstring())

            }
            ImGui.End()
        }

        { // general game properties
            if ImGui.Begin("Game Settings") {
                // render settings
                ImGui.Text("Render Settings")
                if ImGui.Checkbox("VSync", ^vsync_enabled) {
                    glfwSwapInterval(if vsync_enabled then 1 else 0)
                }
                ImGui.ColorEdit3("play mode editor background", ^editor_play_mode_color.x, 0)
                ImGui.Separator()

                // camera settings
                ImGui.Text("Camera Settings")
                ImGui.InputFloat2("World Size", ^world_size.x)
            }
            ImGui.End()
        }

        { // values
            if ImGui.Begin("Values") {
                for p in properties_to_edit {
                    match p {
                        PropertyEdit.EditInt($e) -> {
                            ImGui.InputScalar(e.name, ImGui.ImGuiDataType_.S64, e.ptr)
                        }
                        PropertyEdit.EditFloat($e) -> {
                            ImGui.InputFloat(e.name, e.ptr, e.step, e.step * 5)
                        }
                        PropertyEdit.EditVec3($e) -> {
                            ImGui.InputFloat3(e.name, cast e.ptr)
                        }
                        PropertyEdit.EditVec4($e) -> {
                            ImGui.InputFloat4(e.name, cast e.ptr)
                        }
                        PropertyEdit.EditColor3($e) -> {
                            ImGui.ColorEdit3(e.name, cast e.ptr)
                        }
                    }
                }
            }
            ImGui.End()

            properties_to_edit.clear()
        }

        data := self.current_mode_data()

        if data != null {
            { // layers
                if ImGui.Begin("Layers") {
                    for l in data.layer_stack {
                        list_entry_size := ImGui.ImVec2(0, 0)
                        if ImGui.Selectable(l.get_name(), current_layer_index == i32(it_index), 0, list_entry_size) {
                            current_layer_index = i32(it_index)
                        }
                    }
                }
                ImGui.End()
            }

            if current_layer_index >= 0 and current_layer_index < i32(data.layer_stack.get_length()) {
                hierarchy.set_layer(data.layer_stack[int(current_layer_index)])
            }
        }

        inspector.render()
        hierarchy.render()
        console.get().render()
    }

    edit_property :: (&Self, edit: PropertyEdit) {
        properties_to_edit.add(edit)
    }
}

impl ShmupEngine {
    register_builtin_components :: (&Self) {
        self.inspector.register_component_info(PathFollowComponent(null))
        self.inspector.register_component_info(BasicMoveComponent(null, vec3(), 0))
        self.inspector.register_component_info(QuadComponent(null, vec3(1, 1, 1)))
        self.inspector.register_component_info(PointLightComponent(null, vec3(1, 1, 1), 5, 360, 0, 0.5, vec3(1.0, 0.0, 0.1)))
        self.inspector.register_component_info(PlayerControlComponent(null, 1))
        self.inspector.register_component_info(Camera(null, vec2(10, 10)))
    }

    push_entity_layer :: (&Self, name: String, callbacks: ^EntityLayerCallbacks) {
        ptr := mem.alloc(EntityLayer)
        *ptr = EntityLayer.new(name, callbacks, self, *Input.new())
        self.current_mode_data().layer_stack.add(ptr)
    }

    push_lighting_layer :: (&Self, name: String) {
        ptr := mem.alloc(LightingLayer)
        *ptr = LightingLayer.new(name, self, *Input.new())
        self.current_mode_data().layer_stack.add(ptr)
    }

    push_debug_layer :: (&Self, name: String) {
        ptr := mem.alloc(DebugLayer)
        *ptr = DebugLayer.new(name, self, *Input.new())
        self.current_mode_data().layer_stack.add(ptr)
    }

    on_command :: (&Self, cmd: &Command) {
        match cmd {
            Command.Quit -> {
                glfwSetWindowShouldClose(glfw_window, 1)
            }

            Command.EnterPlayMode -> {
                enter_play_mode()
            }

            Command.StopPlayMode -> {
                exit_play_mode()
            }

            Command.SetEditorMode($m) -> {
                match m {
                    CommandEditorMode.Single -> {
                        editor_windows[0].get().base().enabled = false
                        editor_windows[1].get().base().enabled = false
                        editor_windows[2].get().base().enabled = true
                    }
                    CommandEditorMode.Double -> {
                        editor_windows[0].get().base().enabled = true
                        editor_windows[1].get().base().enabled = true
                        editor_windows[2].get().base().enabled = false
                    }
                }
            }

            Command.DeleteEntity($id) -> {
                match hierarchy.get_layer() {
                    Some($layer) -> match &*layer {
                        EntityLayer($layer) -> match layer.find_entity(id) {
                            Some($entity) -> {
                                T :: @typeof(layer)
                                entity.get().dead = true
                                layer.remove_dead_entities()
                            }
                        }
                    }
                }
            }

            Command.NewEntity -> match hierarchy.get_layer() {
                Some($layer) -> match &*layer {
                    EntityLayer($layer) -> {
                        e := layer.new_entity()
                    }
                }
            }

            $c -> {
                io.println(fmt.format("Can't execute command {}", [^c]))
            }
        }
    }

    toggle_play_mode :: (&Self) {
        match current_mode {
            EngineMode.Edit(_) -> enter_play_mode()
            EngineMode.Play(_) -> exit_play_mode()
            EngineMode.Pause(_) -> exit_play_mode()
        }
    }

    enter_play_mode :: (&Self) {
        match current_mode {
            EngineMode.Play(_) -> {
                console.get().log("Already in play mode")
                return
            }
            EngineMode.Pause(_) -> {
                console.get().log("Already in play mode")
                return
            }
        }
        console.get().log("Entering play mode")

        { // initialize play mode
            play_mode.layer_stack.clear()
            for l in edit_mode.layer_stack {
                match l.clone() {
                    Some($l) -> {
                        play_mode.layer_stack.add(l)
                    }
                }
            }
            for layer in play_mode.layer_stack {
                if !layer.init() {
                    io.formatln("[ERROR] Failed to initialize layer {} when entering play mode", [it_index])
                }
            }
        }
        current_mode = EngineMode.Play(^play_mode)

        set_editor_background_color(editor_play_mode_color)

        for window in editor_windows {
            if !window.get().base().enabled then continue
            window.get().on_event(Event.EngineModeChanged(current_mode))
        }
    }

    exit_play_mode :: (&Self) {
        match current_mode {
            EngineMode.Edit(_) -> {
                console.get().log("Already in edit mode")
                return
            }
        }

        console.get().log("Exiting play mode")
        current_mode = EngineMode.Edit(^edit_mode)

        set_editor_background_color(editor_edit_mode_color)

        for window in editor_windows {
            if !window.get().base().enabled then continue
            window.get().on_event(Event.EngineModeChanged(current_mode))
        }
    }

    set_editor_background_color :: (&Self, col: vec3) {
        ImGui.GetStyle().Colors[int(ImGui.ImGuiCol_.WindowBg)] = ImGui.ImVec4(col.x, col.y, col.z, 1)
    }

    current_mode_data :: (&Self) -> ^EngineModeData {
        return match current_mode {
            EngineMode.Edit($data) -> {data}
            EngineMode.Play($data) -> {data}
            EngineMode.Pause($data) -> {data}
            _ -> null
        }
    }

    current_viewport :: (&Self) -> &Viewport {
        return active_editor_window.get().base().viewport
    }
}

#file_scope

imgui_begin_frame :: () {
    ImGui.ImGui_ImplOpenGL3_NewFrame()
    ImGui.ImGui_ImplGlfw_NewFrame()
    ImGui.NewFrame()
}

imgui_end_frame :: () {
    io := ImGui.GetIO()

    // rendering
    ImGui.EndFrame()
    ImGui.Render()
    ImGui.ImGui_ImplOpenGL3_RenderDrawData(ImGui.GetDrawData())

    if @bin_and(io.ConfigFlags, i32(ImGui.ImGuiConfigFlags_.ViewportsEnable)) != 0 {	
        backup_current_context := glfwGetCurrentContext()
        ImGui.UpdatePlatformWindows()
        ImGui.RenderPlatformWindowsDefault()
        glfwMakeContextCurrent(backup_current_context)
    }
}

init_imgui :: (window: ^GLFWwindow) -> bool {
    context := ImGui.CreateContext(null)

    if context == null {
        io.println("[ERROR] ImGui.CreateContext failed")
        return false
    }

    imgui_io := &ImGui.GetIO()
    imgui_io.ConfigWindowsMoveFromTitleBarOnly = true
    imgui_io.ConfigFlags = @bin_or(
        imgui_io.ConfigFlags,
        i32(ImGui.ImGuiConfigFlags_.DockingEnable),
        i32(ImGui.ImGuiConfigFlags_.ViewportsEnable))

    ImGui.StyleColorsDark(null)

    // change corners so they are right angles instead of rounded
    style := &ImGui.GetStyle()
    style.WindowRounding = 0.0

    //
    if !ImGui.ImGui_ImplGlfw_InitForOpenGL(window, true) {
        io.println("[ERROR] ImGui.ImGui_ImplGlfw_InitForOpenGL failed")
        return false
    }
    if !ImGui.ImGui_ImplOpenGL3_Init("#version 330") {
        io.println("[ERROR] ImGui.ImGui_ImplOpenGL3_Init failed")
        return false
    }

    ImGui.SetColorEditOptions(ImGui.ImGuiColorEditFlags_.HDR)

    return true
}

shutdown_imgui :: () {
    ImGui.ImGui_ImplOpenGL3_Shutdown()
    ImGui.ImGui_ImplGlfw_Shutdown()
    ImGui.DestroyContext(null)
}

create_dock_space :: () {
    dockspace_flags := ImGui.ImGuiDockNodeFlags_.None
    window_flags    := @bin_or(ImGui.ImGuiWindowFlags_.MenuBar, ImGui.ImGuiWindowFlags_.NoDocking)

    opt_fullscreen := true
    if opt_fullscreen {
        pivot := ImGui.ImVec2(0, 0)

        viewport := ImGui.GetMainViewport()
        ImGui.SetNextWindowPos(viewport.Pos, 0, pivot)
        ImGui.SetNextWindowSize(viewport.Size)
        ImGui.SetNextWindowViewport(viewport.ID)
        ImGui.PushStyleVar(ImGui.ImGuiStyleVar_.WindowRounding, 0.0f)
        ImGui.PushStyleVar(ImGui.ImGuiStyleVar_.WindowBorderSize, 0.0f)
        window_flags = @bin_or(
            window_flags,
            ImGui.ImGuiWindowFlags_.NoTitleBar,
            ImGui.ImGuiWindowFlags_.NoCollapse,
            ImGui.ImGuiWindowFlags_.NoResize,
            ImGui.ImGuiWindowFlags_.NoMove,
            ImGui.ImGuiWindowFlags_.NoBringToFrontOnFocus,
            ImGui.ImGuiWindowFlags_.NoNavFocus
        )
    }

    // When using ImGuiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background 
    // and handle the pass-thru hole, so we ask Begin() to not render a background.
    if int(@bin_and(dockspace_flags, ImGui.ImGuiDockNodeFlags_.PassthruCentralNode)) != 0 {
        window_flags = @bin_or(window_flags, ImGui.ImGuiWindowFlags_.NoBackground)
    }

    // Important: note that we proceed even if Begin() returns false (aka window is collapsed).
    // This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,
    // all active windows docked into it will lose their parent and become undocked.
    // We cannot preserve the docking relationship between an active window and an inactive docking, otherwise
    // any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.
    window_padding := ImGui.ImVec2(0.0f, 0.0f)
    ImGui.PushStyleVarVec(ImGui.ImGuiStyleVar_.WindowPadding, window_padding)

    open := true
    ImGui.Begin("DockSpace Demo", ^open, window_flags)
    ImGui.PopStyleVar()

    if opt_fullscreen then ImGui.PopStyleVar(2)

    // DockSpace
    io := &ImGui.GetIO()
    if @bin_and(io.ConfigFlags, i32(ImGui.ImGuiConfigFlags_.DockingEnable)) != 0 {
        dockspace_id := ImGui.GetID("MyDockSpace")
        size := ImGui.ImVec2(0.0f, 0.0f)
        ImGui.DockSpace(dockspace_id, size, dockspace_flags)
    } else {
        @assert(false)
    }

    ImGui.End()
}

ShowExampleMenuFile :: () {
    //     ImGui.MenuItem("(dummy menu)", null, false, false)
    //     if ImGui.MenuItem("New") {}
    //     if ImGui.MenuItem("Open", "Ctrl+O") {}
    //     if ImGui.BeginMenu("Open Recent") {
    //         ImGui.MenuItem("fish_hat.c")
    //         ImGui.MenuItem("fish_hat.inl")
    //         ImGui.MenuItem("fish_hat.h")
    //         if ImGui.BeginMenu("More..") {
    //             ImGui.MenuItem("Hello")
    //             ImGui.MenuItem("Sailor")
    //             if ImGui.BeginMenu("Recurse..") {
    //                 ShowExampleMenuFile()
    //                 ImGui.EndMenu()
    //             }
    //             ImGui.EndMenu()
    //         }
    //         ImGui.EndMenu()
    //     }
    //     if (ImGui.MenuItem("Save", "Ctrl+S")) {}
    //     if (ImGui.MenuItem("Save As..")) {}
    //     ImGui.Separator()
    //     if ImGui.BeginMenu("Options") {
    //         enabled := true #static
    //         ImGui.MenuItem_2("Enabled", "", ^enabled)

    //         size := ImGui.ImVec2(0, 60)
    //         ImGui.BeginChild("child", size, true)

    //         for i in 0..10 {
    //             text := fmt.format("Scrolling Text {}", [i])
    //             ImGui.Text(text.as_cstring())
    //         }
    //         ImGui.EndChild()
    //         f := 0.5f #static
    //         n := 0i32 #static
    //         b := true #static
    //         ImGui.SliderFloat("Value", ^f, 0.0f, 1.0f)
    //         ImGui.InputFloat("Input", ^f, 0.1f)
    //         ImGui.Combo_2("Combo", ^n, "Yes\0No\0Maybe\0\0")
    //         ImGui.Checkbox("Check", ^b)
    //         ImGui.EndMenu()
    //     }
    //     if (ImGui.BeginMenu("Colors"))
    //     {
    //         sz := ImGui.GetTextLineHeight()
    //         for i in 0..int(ImGui.ImGuiCol_.COUNT) {
    //             name := ImGui.GetStyleColorName(cast i)
    //             p := ImGui.GetCursorScreenPos()
    //             // ImGui.GetWindowDrawList().AddRectFilled(p, ImVec2(p.x+sz, p.y+sz), ImGui.GetColorU32((ImGuiCol)i))
    //             size := ImGui.ImVec2(sz, sz)
    //             ImGui.Dummy(size)
    //             ImGui.SameLine()
    //             ImGui.MenuItem(name)
    //         }
    //         ImGui.EndMenu()
    //     }
    //     if (ImGui.BeginMenu("Disabled", false)) {
    //         @assert(false)
    //     }
    //     if (ImGui.MenuItem("Checked", null, true)) {}
    //     if (ImGui.MenuItem("Quit", "Alt+F4")) {}
}