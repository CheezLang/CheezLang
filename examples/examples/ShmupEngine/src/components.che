use import std.string
use import std.array
use import std.math
use import std.rc
rand :: import std.random
mem  :: import std.mem.allocator
io   :: import std.io
fmt  :: import std.fmt
C    :: import std.c

use import compiler.lexer
use import compiler.error_handler
serpa :: import serpa.serpa
glfw  :: import glfw.glfw3
ImGui :: import imgui.imgui_binding

use import main
use import shmup_engine
use import input
use import layer
use import renderer
use import entity
use import math

#export_scope

ComponentInfo :: struct {
    type_info   : &TypeInfo
    value       : &Component
}

Component :: trait {
    update          :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float);
    render          :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer);
    render_gizmos   :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer);
    get_type_info   :: (ref Self) -> &TypeInfo;
    serialize       :: (ref Self, stream: ref String);
}

PathFollowComponent :: struct {
    speed  := 1.0f
    loops  := true
    pos    := 0.0f
    points := Array[vec3].create()
    dirs   := Array[vec3].create()
}

g_handle : Handle = default
Handle :: struct {
    current         : &vec3 = null
    world_anchor    : vec3 = default
    mouse_anchor    : vec3 = default
}
impl Handle {
    mouse_pos :: () -> vec3 {
        window  := ImGui.GetWindowPos()
        mouse   := ImGui.GetMousePos()
        return vec3(mouse.x, mouse.y)
    }

    mouse_pressed :: () -> bool {
        return ImGui.IsMouseClicked(ImGui.ImGuiMouseButton_.Left)
    }

    mouse_released :: () -> bool {
        return ImGui.IsMouseReleased(ImGui.ImGuiMouseButton_.Left)
    }

    mouse_down :: () -> bool {
        return ImGui.IsMouseDown(ImGui.ImGuiMouseButton_.Left)
    }

    mouse_clicked :: (pos: vec3, size: vec3) -> bool {
        if !mouse_pressed() {
            return false
        }
        m := mouse_pos()

        min := pos - size * 0.5f
        max := pos + size * 0.5f
        return m.x >= min.x and m.x < max.x and m.y >= min.y and m.y < max.y
    }

    handle :: (id: &vec3, pos: vec3, size: vec3) -> Option[vec3] {
        if mouse_released() {
            g_handle.current = null
        }

        mouse := mouse_pos()

        if g_handle.current == null and mouse_clicked(pos, size) {
            g_handle.current = id
            g_handle.mouse_anchor = mouse
            g_handle.world_anchor = pos
        }

        if id != g_handle.current {
            return None
        }
        
        return Some(mouse - g_handle.mouse_anchor + g_handle.world_anchor)
    }
}

impl Component for PathFollowComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        eval :: (p0: vec3, p1: vec3, p2: vec3, p3: vec3, t: float) -> vec3 {
            k := 1 - t
            return (p0 * k * k * k) + (p1 * 3.0f * k * k * t) + (p2 * 3.0f * k * t * t) + (p3 * t * t * t)
        }

        curr    := int(pos)
        next    := (curr + 1) % points.get_length()
        pos_01  := pos % 1.0f

        p0 := points[curr]
        p3 := points[next]
        d0 := dirs[curr]
        d1 := dirs[next]
        p1 := p0 + d0
        p2 := p3 - d1

        dist_to_travel := speed * dt

        v1 := p0 * -3.0f + p1 * 9.0f - p2 * 9.0f + p3 * 3.0f
        v2 := p0 * 6.0f + p1 * -12.0f + p2 * 6.0f
        v3 := p0 * -3.0f + p1 * 3.0f

        x := (v1 * pos_01 * pos_01 + v2 * pos_01 + v3).mag()
        pos += dist_to_travel / x
        pos %= float(points.get_length())
        entity.position = eval(p0, p1, p2, p3, pos_01 + dist_to_travel / x)
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {
    }

    render_gizmos :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {
        if points.get_length() < 2 {
            return
        }

        num_points :: 20
        end := if loops then points.get_length() else points.get_length() - 1
        for i : 0 .. end {
            k := (i + 1) % points.get_length()
            p0 := points[i]
            p3 := points[k]

            d0 := dirs[i]
            d1 := dirs[k]

            p1 := p0 + d0
            p2 := p3 - d1
            
            prev := p0
            for(inclusive=true) i : 1..num_points {
                t := float(i) / num_points
                k := 1 - t
                curr := (p0 * k * k * k) + (p1 * 3.0f * k * k * t) + (p2 * 3.0f * k * t * t) + (p3 * t * t * t)
                renderer.draw_line(prev, curr, vec3(0, 1, 0))
                prev = curr
            }
        }


        ImGui.Begin("Scene")
        for i : 0 .. points.get_length() {
            p0 := points[i]
            d0 := dirs[i]
            renderer.draw_line(p0, p0 + d0, vec3(1, 0, 0))

            //
            if engine.editor_viewport.is_focused {
                draw_list := ImGui.GetWindowDrawList()
                screen_pos := engine.editor_viewport.world_to_screen(p0)
                match Handle.handle(&points[i], screen_pos, vec3(20, 20)) {
                    Some($screen_pos_new) -> {
                        world_pos_new := engine.editor_viewport.screen_to_world(screen_pos_new)
                        points[i] = world_pos_new
                    }
                }
                match Handle.handle(&dirs[i], engine.editor_viewport.world_to_screen(p0 + d0), vec3(10, 10)) {
                    Some($screen_pos_new) -> {
                        world_pos_new := engine.editor_viewport.screen_to_world(screen_pos_new)
                        dirs[i] = world_pos_new - p0
                    }
                }

                min := ImGui.ImVec2(screen_pos.x - 10, screen_pos.y - 10)
                max := ImGui.ImVec2(screen_pos.x + 10, screen_pos.y + 10)
                ImGui.GetForegroundDrawList().AddRectFilled(min, max, ImGui.Color32(255, 0, 255))
            }
        }
        ImGui.End()
    }

    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                speed  = {}`n", speed)
        stream.appendf("                loops  = {}`n", loops)
        stream.appendf("                pos    = {}`n", pos)
        stream.append_string("                points = [`n")
        for p : points {
            stream.appendf("                    ``{x={}, y={}, z={}}`n", (p.x, p.y, p.z))
        }
        stream.append_string("                ]`n", )
        stream.append_string("                dirs = [`n")
        for p : dirs {
            stream.appendf("                    ``{x={}, y={}, z={}}`n", (p.x, p.y, p.z))
        }
        stream.append_string("                ]`n", )
    }
}

BasicMoveComponent :: struct {
    velocity : vec3
    speed    : float
}

impl Component for BasicMoveComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        entity.position += velocity * speed * dt
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    
    render_gizmos :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                velocity = ``{x={}, y={}, z={}}`n", (self.velocity.x, self.velocity.y, self.velocity.z))
        stream.appendf("                speed = {}`n", self.speed)
    }
}

PlayerControlComponent :: struct {
    speed : float
}

impl Component for PlayerControlComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        // if layer.engine.global_input.key_down(glfw.GLFW_KEY_LEFT) {
        if layer.get_input().key_down(glfw.GLFW_KEY_LEFT) {
            entity.position += vec3(-1, 0) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_RIGHT) {
            entity.position += vec3(1, 0) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_UP) {
            entity.position += vec3(0, 1) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_DOWN) {
            entity.position += vec3(0, -1) * speed * dt
        }
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    render_gizmos :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                speed = {}`n", self.speed)
    }
}

QuadComponent :: struct {
    #color
    color : vec3
}

impl Component for QuadComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
    }
    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {
        renderer.fill_quad(entity.position, entity.size, entity.angle / 360.0f * (3.1415f * 2.0f), color)
    }
    render_gizmos :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                color = ``{x={}, y={}, z={}}`n", (self.color.x, self.color.y, self.color.z))
    }
}

impl serpa.IParser[Rc[Component]] for Rc[Component] {
    parse :: (parser: ref serpa.Parser, lexer: ref Lexer, error_handler: &ErrorHandler) -> Option[Self] {
        eat_token :: (typ: TokenType) #macro {
            if (ok, t) := @link(lexer).expect_token(typ), ok {
                t
            } else {
                @link(error_handler).report_errorf(t.location, "Expected '{}', got {}", [typ, t.ttype])
                return None
            }
        }

        name_token := eat_token(TokenType.Identifier)
        struct_name := name_token.data.String

        // io.printfln("parsing component {}", struct_name)
        @for_trait_impls(Component, (T) => {
            // io.printfln("trying with type {}", @typename(T))
            if streq(@typename(T), struct_name) {
                result := mem.alloc(T)
                if !parser.parse_struct_into(result, lexer, error_handler) {
                    mem.free(result)
                    return None
                }

                ptr := Rc[Component].from_pointer(result, true)
                return Some(ptr)
            }
        })

        error_handler.report_errorf(name_token.location, "'{}' is not a valid component", [struct_name])
        return None
    }
}