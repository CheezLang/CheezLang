use import std.string
use import std.array
use import std.math
use import std.rc
rand :: import std.random
mem  :: import std.mem.allocator
io   :: import std.io
fmt  :: import std.fmt
C    :: import std.c

use import compiler.lexer
use import compiler.error_handler
serpa :: import serpa.serpa
glfw :: import glfw.glfw3

use import main
use import shmup_engine
use import input
use import layer
use import renderer
use import entity
use import math

#export_scope

ComponentInfo :: struct {
    type_info   : &TypeInfo
    value       : &void
}

Component :: trait {
    update          :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float);
    render          :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer);
    get_type_info   :: (ref Self) -> &TypeInfo;
    serialize       :: (ref Self, stream: ref String);
}

ComponentData :: struct {
    component : Component
    value     : Rc[()]
    type_info : &TypeInfo
}

impl ComponentData {
    from_raw :: (type_info: &TypeInfo, vtable: &void, rc: Rc[()]) -> ComponentData {
        component := Traits.from_vtable_and_pointer(Component, vtable, &rc.get())
        return ComponentData(component, rc, type_info)
    }

    clone2 :: (ref Self, to: Rc[()]) -> ComponentData {
        vtable    := Traits.get_trait_object_vtable(component)
        value_ptr := Traits.get_trait_object_value(component, ())
        C.memcpy(&to.get(), &value_ptr, cast type_info.size)
        return ComponentData.from_raw(type_info, vtable, to)
    }

    clone :: (ref Self) -> ComponentData {
        return ComponentData(component, value.clone(), type_info)
    }
}

PathFollowComponent :: struct {
    speed  := 1.0f
    next   := 0
    loops  := true
    points := Array[vec3].create()
}

impl Component for PathFollowComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        if points.get_length() < 2 or next < 0 {
            return
        }
        if int(next) >= points.get_length() {
            if loops {
                next = 0
            } else {
                entity.active = false
                return
            }
        }

        target := points[int(next)]
        dir := target - entity.position
        if dir.mag() <= speed * dt {
            entity.position = target
            next += 1
        } else {
            dir.normalize()
            dir *= speed
            entity.position += dir * dt
        }
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {
        if points.get_length() < 2 {
            return
        }

        for i : 0 .. points.get_length() - 1 {
            p0 := points[i]
            p1 := points[i + 1]
            renderer.draw_line(p0, p1, vec3(0, 1, 0))
        }

        if loops {
            p0 := points[points.get_length() - 1]
            p1 := points[0]
            renderer.draw_line(p0, p1, vec3(0, 1, 0))
        }
    }

    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                speed  = {}`n", speed)
        stream.appendf("                next   = {}`n", next)
        stream.appendf("                loops  = {}`n", loops)
        stream.append_string("                points = [`n")
        for p : points {
            stream.appendf("                    ``{x={}, y={}, z={}}`n", (p.x, p.y, p.z))
        }
        stream.append_string("                ]`n", )
    }
}

BasicMoveComponent :: struct {
    velocity : vec3
    speed    : float
}

impl Component for BasicMoveComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        entity.position += velocity * speed * dt
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                velocity = ``{x={}, y={}, z={}}`n", (self.velocity.x, self.velocity.y, self.velocity.z))
        stream.appendf("                speed = {}`n", self.speed)
    }
}

PlayerControlComponent :: struct {
    speed : float
}

impl Component for PlayerControlComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
        // if layer.engine.global_input.key_down(glfw.GLFW_KEY_LEFT) {
        if layer.get_input().key_down(glfw.GLFW_KEY_LEFT) {
            entity.position += vec3(-1, 0) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_RIGHT) {
            entity.position += vec3(1, 0) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_UP) {
            entity.position += vec3(0, 1) * speed * dt
        }
        if layer.get_input().key_down(glfw.GLFW_KEY_DOWN) {
            entity.position += vec3(0, -1) * speed * dt
        }
    }

    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {}
    
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                speed = {}`n", self.speed)
    }
}

QuadComponent :: struct {
    #color
    color : vec3
}

impl Component for QuadComponent {
    update :: (ref Self, entity: ref Entity, layer: ref EntityLayer, dt: float) {
    }
    render :: (ref Self, entity: ref Entity, engine: ref ShmupEngine, renderer: ref Renderer) {
        renderer.fill_quad(entity.position, entity.size, entity.angle / 360.0f * (3.1415f * 2.0f), color)
    }
    get_type_info   :: (ref Self) -> &TypeInfo {
        return @type_info(Self)
    }

    serialize :: (ref Self, stream: ref String) {
        stream.appendf("                color = ``{x={}, y={}, z={}}`n", (self.color.x, self.color.y, self.color.z))
    }
}

impl serpa.IParser[ComponentData] for ComponentData {
    parse :: (parser: ref serpa.Parser, lexer: ref Lexer, error_handler: ErrorHandler) -> Option[ComponentData] {
        eat_token :: (typ: TokenType) #macro {
            if (ok, t) := @link(lexer).expect_token(typ), ok {
                t
            } else {
                @link(error_handler).report_errorf(t.location, "Expected '{}', got {}", [typ, t.ttype])
                return None
            }
        }

        name_token := eat_token(TokenType.Identifier)
        struct_name := name_token.data.String

        // io.printfln("parsing component {}", struct_name)
        @for_trait_impls(Component, (T) => {
            // io.printfln("trying with type {}", @typename(T))
            if streq(@typename(T), struct_name) {
                result := mem.alloc(T)
                if !parser.parse_struct_into(result, lexer, error_handler) {
                    mem.free(result)
                    return None
                }

                ptr := Rc[T].from_pointer(result, true)
                return Some(ComponentData(
                    ptr.get()
                    ptr.change_type(())
                    @type_info(T)
                ))
            }
        })

        error_handler.report_errorf(name_token.location, "'{}' is not a valid component", [struct_name])
        return None
    }
}