use import std.string
use import std.array
use import std.math
use import std.time
use import std.rc
use import std.box
use import std.mem.std_heap_allocator
mem :: import std.mem.allocator
fmt :: import std.fmt
io  :: import std.io
fs  :: import std.io.fs
C   :: import std.c

use import glfw.glfw_binding
use import opengl.glad_binding
ImGui :: import imgui.imgui_binding

use import opengl_utils
use import opengl_buffers
use import shader
use import matrix
use import renderer
use import math
use import layer
use import input
use import shmup_engine
use import components
use import post_vfx

#export_scope

GameView :: trait {
    initialize      :: (ref Self, max_size: vec2i) -> bool;
    base            :: (ref Self) -> ref WindowBase;
    update          :: (ref Self, world_size: vec3);
    render          :: (ref Self, world_size: vec3, renderer: ref Renderer);
    is_focused      :: (ref Self) -> bool;
    on_key_event    :: (ref Self, key: i32, scancode: i32, action: i32, mods: i32);

    on_event        :: (ref Self, event: Event);
}

WindowBase :: struct #extendable {
    engine      : &ShmupEngine  = null
    input       : &Input        = null
    viewport    : Viewport      = default
    clear_color : vec4          = default
    enabled     : bool          = true
}

impl WindowBase {
    new :: ($T: type, engine: &ShmupEngine) -> Rc[GameView] {
        return Rc[GameView].new(T(
            engine  = engine
            input   = Input.new()
        ))
    }
}

impl GameWindow {

}

GameWindow :: struct #extend(WindowBase) {
    camera          := Option[Ref[Camera]].None
    pp_vertex_array := Box[VertexArray].empty()
    max_size        := vec2i()
}

impl GameView for GameWindow {
    initialize :: (ref Self, max_size: vec2i) -> bool {
        self.max_size = max_size
        viewport.set_scale(1)
        viewport.set_translation(vec3())

        // vertex array
        pp_vertex_array = {
            vertex_array := VertexArray.new()

            vertex_buffer := VertexBuffer.create([
                -1.0f, -1.0f, 0.0f, 0.0f
                 1.0f, -1.0f, 1.0f, 0.0f
                 1.0f,  1.0f, 1.0f, 1.0f
                -1.0f,  1.0f, 0.0f, 1.0f
            ])
            vertex_buffer.layout = BufferLayout.new([
                BufferElement("aPos", ShaderDataType.Float2)
                BufferElement("aTexCoord", ShaderDataType.Float2)
            ])
            vertex_array.add_vertex_buffer(vertex_buffer)

            index_buffer := IndexBuffer.create([
                0, 1, 2, 2, 3, 0
            ])
            vertex_array.set_index_buffer(index_buffer)

            Box[VertexArray].from_pointer(vertex_array)
        }

        return viewport.initialize(max_size)
    }

    base :: (ref Self) -> ref WindowBase {
        return self
    }

    on_key_event :: (ref Self, key: i32, scancode: i32, action: i32, mods: i32) {
        match (action, key, mods) {
            (GLFW_PRESS, $keycode, _) -> {
                input.set_key_state(keycode, true)
            }
            (GLFW_RELEASE, $keycode, _) -> {
                input.set_key_state(keycode, false)
            }
        }

        data := engine.current_mode_data()

        if data != null {
            for(reverse=true) layer : data.layer_stack {
                if layer.on_key_event(int(key), int(action)) {
                    break
                }
            }
        }
    }

    on_event :: (ref Self, event: Event) {
        match event {
            Event.EngineModeChanged(_) -> {
                camera = None
            }
        }
    }

    is_focused :: (ref Self) -> bool {
        return viewport.is_focused
    }

    update :: (ref Self, world_size: vec3) {
        // set window properties of viewport
        ImGui.Begin("Game", null, @bin_or(
            ImGui.ImGuiWindowFlags_.NoScrollbar,
            ImGui.ImGuiWindowFlags_.NoScrollWithMouse,
            ImGui.ImGuiWindowFlags_.NoCollapse
        ))

        { // calculate focused state
            was_focused := viewport.is_focused
            viewport.is_focused = ImGui.IsWindowFocused()
            viewport.lost_focus = was_focused and !viewport.is_focused
            viewport.is_hovered = ImGui.IsWindowHovered()
            // @todo: send focus event to layer_stack
        }

        { // get size of viewport window
            min           := ImGui.GetWindowContentRegionMin()
            max           := ImGui.GetWindowContentRegionMax()
            size          := ImGui.ImVec2(max.x - min.x, max.y - min.y)
            viewport_size := vec2i(int(size.x), int(size.y)).clamped(0, int.max)

            window_min := ImGui.GetWindowPos()

            viewport.pos  = vec3(window_min.x + min.x, window_min.y + min.y, 0)
            viewport.size = vec3(cast viewport_size.x, cast viewport_size.y, 1)
            // io.println(fmt.format("+ {}", [viewport.size]))
        }

        ImGui.End()

        find_camera :: (data: &EngineModeData) -> Option[Ref[Camera]] {
            // io.println("Searching for camera...")
            if data != null {
                for layer : data.layer_stack {
                    match layer.get_base() {
                        EntityLayer($el) -> {
                            for entity : el.entities {
                                for component : entity.get().components {
                                    match ref component.get() {
                                        Camera($cam) -> {
                                            io.formatln("Found on entity ({}) {}", [entity.get().id, entity.get().name.slice()])
                                            return Some(component.borrow().change_type(Camera))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return None
        }

        match ref camera {
            Some($cam) -> {
                if cam.count() == 0 {
                    // camera was destroyed
                    camera = find_camera(engine.current_mode_data())
                }
            }

            None -> {
                camera = find_camera(engine.current_mode_data())
            }
        }
    }

    render :: (ref Self, world_size: vec3, renderer: ref Renderer) {
        begin_render(world_size, renderer)

        data := engine.current_mode_data()
        if data != null {
            for layer : data.layer_stack {
                renderer.push_render_target()
                renderer.clear()
                // renderer.clear(vec4(1, 0 ,0, 0))
                layer.render(renderer)
                renderer.flush()
            }
            renderer.targets(0).color_map.get().copy_to(viewport.frame_buffer.get())
        }


        // if layer_outputs.count() > 0 {
        //     layer_outputs.peek_last().get().copy_to(viewport.frame_buffer.get())
        // }
        renderer.reset_render_targets()

        end_render()
    }

    begin_render :: (ref Self, world_size: vec3, renderer: ref Renderer) -> bool {
        // draw viewport window
        ImGui.Begin("Game")
        if viewport.size.x > 0 and viewport.size.y > 0 {
            size    := ImGui.ImVec2(viewport.size.x, viewport.size.y)
            uv0     := ImGui.ImVec2(0, size.y / viewport.size_max.y)
            uv1     := ImGui.ImVec2(size.x / viewport.size_max.x, 0)
            tint    := ImGui.ImVec4(1, 1, 1, 1)
            border  := ImGui.ImVec4(0, 0, 0, 0)

            // uv0     = ImGui.ImVec2(0, 1)
            // uv1     = ImGui.ImVec2(1, 0)
            ImGui.Image(cast viewport.frame_buffer.get().render_texture.get().id, size, uv0, uv1, tint, border)
            // ImGui.Image(cast tmp_frame_buff1.get().render_texture.get().id, size, uv0, uv1, tint, border)
        }
        ImGui.End()

        // bind viewport
        viewport.bind()

        // set aspect_ratio_axis so that the game world always fits on screen
        viewport_ar := viewport.size.x / viewport.size.y
        world_ar    := world_size.x / world_size.y
        if viewport_ar > world_ar {
            viewport.aspect_ratio_axis = 1
        } else {
            viewport.aspect_ratio_axis = 0
        }

        // set projection matrix
        match ref camera {
            Some($cam) -> {
                viewport.set_translation(-cam.get().entity.position)
                viewport.set_scale(1)
                viewport.update_projection_matrix(vec3(cam.get().size.x, cam.get().size.y))
                view_proj := viewport.projection_matrix * viewport.view_matrix
                renderer.begin_scene(view_proj, viewport.size.xy())
                renderer.set_projection_inv(viewport.view_projection_inv)
            }

            None -> {
                viewport.update_projection_matrix(world_size)
                renderer.begin_scene(viewport.projection_matrix, viewport.size.xy())
            }
        }

        return false
    }

    end_render :: (ref Self) {
        // tmp_frame_buff1.get().bind()
        // glViewport(0, 0, i32(max_size.x), i32(max_size.y))
        // glClearColor(1.0f, 0.0f, 0.0f, 1.0f)
        // glClear(GL_COLOR_BUFFER_BIT)

        // shader.bind()
        // pp_vertex_array.get().bind()
        // pp_vertex_array.get().index_buffer.bind()

        // viewport.frame_buffer.get().render_texture.get().bind(0)

        // glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, null)
        // glBindVertexArray(0)

        // viewport.frame_buffer.get().copy_to(tmp_frame_buff1.get())

        glBindFramebuffer(GL_FRAMEBUFFER, 0)
        // renderer.end_scene()
    }

    begin_gizmos    :: (ref Self) {
    }
    end_gizmos      :: (ref Self) {
    }
}

EditorWindow :: struct #extend(WindowBase) {
    camera_pos  := vec3()
    zoom        := 1.0f

    last_mouse_pos_s := vec3()
}

impl GameView for EditorWindow {
    initialize :: (ref Self, max_size: vec2i) -> bool {
        viewport.set_scale(1)
        viewport.set_translation(vec3())
        return viewport.initialize(max_size)
    }

    base :: (ref Self) -> ref WindowBase {
        return self
    }

    on_key_event :: (ref Self, key: i32, scancode: i32, action: i32, mods: i32) {
        match (action, key, mods) {
            (GLFW_PRESS, $keycode, _) -> {
                input.set_key_state(keycode, true)
            }
            (GLFW_RELEASE, $keycode, _) -> {
                input.set_key_state(keycode, false)
            }
        }
    }

    on_event :: (ref Self, event: Event) {
        
    }

    is_focused :: (ref Self) -> bool {
        return viewport.is_focused
    }

    update :: (ref Self, world_size: vec3) {
        ImGui.Begin("Scene", null, @bin_or(
            ImGui.ImGuiWindowFlags_.NoScrollbar,
            ImGui.ImGuiWindowFlags_.NoScrollWithMouse,
            ImGui.ImGuiWindowFlags_.NoCollapse
        ))

        { // calculate focused state
            was_focused := viewport.is_focused
            viewport.is_focused = ImGui.IsWindowFocused()
            viewport.lost_focus = was_focused and !viewport.is_focused
            viewport.is_hovered = ImGui.IsWindowHovered()
            // @todo: send focus event to layer_stack
        }

        { // get size of viewport window
            min           := ImGui.GetWindowContentRegionMin()
            max           := ImGui.GetWindowContentRegionMax()
            size          := ImGui.ImVec2(max.x - min.x, max.y - min.y)
            viewport_size := vec2i(int(size.x), int(size.y)).clamped(0, int.max)

            window_min := ImGui.GetWindowPos()

            viewport.pos  = vec3(window_min.x + min.x, window_min.y + min.y, 0)
            viewport.size = vec3(cast viewport_size.x, cast viewport_size.y, 1)
        }

        ImGui.End()

        viewport.update_projection_matrix(world_size)

        // update projection matrices
        if viewport.is_hovered {
            mouse_pos_s := {
                im_pos := ImGui.GetMousePos()
                vec3(im_pos.x, im_pos.y, 0)
            }
            mouse_pos_w      := viewport.screen_to_world(mouse_pos_s)
            last_mouse_pos_w := viewport.screen_to_world(last_mouse_pos_s)
            last_mouse_pos_s = mouse_pos_s

            { // move with mouse
                if ImGui.IsMouseDown(ImGui.ImGuiMouseButton_.Middle) {
                    camera_pos -= mouse_pos_w - last_mouse_pos_w
                }
                viewport.set_translation(-camera_pos)
                last_mouse_pos_w = viewport.screen_to_world(mouse_pos_s)
            }

            { // zoom
                mouse_scroll := int(ImGui.GetIO().MouseWheel)
                while mouse_scroll > 0, mouse_scroll -= 1 {
                    zoom *= 1.1f
                }
                while mouse_scroll < 0, mouse_scroll += 1 {
                    zoom /= 1.1f
                }
                if zoom < 0.1f {
                    zoom = 0.1f
                }
                viewport.set_scale(zoom)
            }

            { // move camera after zoom so we zoom to the cursor
                mouse_pos_w = viewport.screen_to_world(mouse_pos_s)
                camera_pos -= mouse_pos_w - last_mouse_pos_w
                viewport.set_translation(-camera_pos)
            }
        }
    }

    render :: (ref Self, world_size: vec3, renderer: ref Renderer) {
        renderer.set_lights_enabled(false)
        defer renderer.set_lights_enabled(true)
        begin_render(world_size, renderer)

        // data := engine.current_mode_data()
        // if data != null {
        //     for layer : data.layer_stack {
        //         renderer.push_render_target()
        //         layer.render(renderer)
        //         layer.imgui_render()
        //         renderer.flush()
        //         renderer.clear_lights()
        //     }
        // }
        // // renderer.draw_quad(vec3(0, 0, 0), engine.world_size)
        // // renderer.flush()
        // renderer.reset_render_targets()
        end_render()
    }

    begin_render :: (ref Self, world_size: vec3, renderer: ref Renderer) -> bool {
        // draw viewport window
        ImGui.Begin("Scene")
        if viewport.size.x > 0 and viewport.size.y > 0 {
            size    := ImGui.ImVec2(viewport.size.x, viewport.size.y)
            uv0     := ImGui.ImVec2(0, size.y / viewport.size_max.y)
            uv1     := ImGui.ImVec2(size.x / viewport.size_max.x, 0)
            tint    := ImGui.ImVec4(1, 1, 1, 1)
            border  := ImGui.ImVec4(0, 0, 0, 0)
            ImGui.Image(cast viewport.frame_buffer.get().render_texture.get().id, size, uv0, uv1, tint, border)
        }
        ImGui.End()

        // bind viewport
        viewport.bind()

        // render mode
        view_projection := viewport.projection_matrix * viewport.view_matrix
        renderer.begin_scene(view_projection, viewport.size.xy())

        return true
    }

    end_render :: (ref Self) {
        glBindFramebuffer(GL_FRAMEBUFFER, 0)
        // renderer.end_scene()
    }

    begin_gizmos :: (ref Self) {
        ImGui.Begin("Scene")
    }
    end_gizmos :: (ref Self) {
        ImGui.End()
    }
}

GameAndEditorWindow :: struct #extend(WindowBase) {
    camera_pos  := vec3()
    zoom        := 1.0f

    last_mouse_pos_s := vec3()
}

impl GameView for GameAndEditorWindow {
    initialize :: (ref Self, max_size: vec2i) -> bool {
        viewport.set_scale(1)
        viewport.set_translation(vec3())
        return viewport.initialize(max_size)
    }

    base :: (ref Self) -> ref WindowBase {
        return self
    }

    on_key_event :: (ref Self, key: i32, scancode: i32, action: i32, mods: i32) {
        match (action, key, mods) {
            (GLFW_PRESS, $keycode, _) -> {
                input.set_key_state(keycode, true)
            }
            (GLFW_RELEASE, $keycode, _) -> {
                input.set_key_state(keycode, false)
            }
        }
    }

    on_event :: (ref Self, event: Event) {
        
    }

    is_focused :: (ref Self) -> bool {
        return viewport.is_focused
    }

    update :: (ref Self, world_size: vec3) {
        ImGui.Begin("GameScene", null, @bin_or(
            ImGui.ImGuiWindowFlags_.NoScrollbar,
            ImGui.ImGuiWindowFlags_.NoScrollWithMouse,
            ImGui.ImGuiWindowFlags_.NoCollapse
        ))

        { // calculate focused state
            was_focused := viewport.is_focused
            viewport.is_focused = ImGui.IsWindowFocused()
            viewport.lost_focus = was_focused and !viewport.is_focused
            viewport.is_hovered = ImGui.IsWindowHovered()
            // @todo: send focus event to layer_stack
        }

        { // get size of viewport window
            min           := ImGui.GetWindowContentRegionMin()
            max           := ImGui.GetWindowContentRegionMax()
            size          := ImGui.ImVec2(max.x - min.x, max.y - min.y)
            viewport_size := vec2i(int(size.x), int(size.y)).clamped(0, int.max)

            window_min := ImGui.GetWindowPos()

            viewport.pos  = vec3(window_min.x + min.x, window_min.y + min.y, 0)
            viewport.size = vec3(cast viewport_size.x, cast viewport_size.y, 1)
            // io.println(fmt.format("+ {}", [viewport.size]))
        }

        ImGui.End()

        viewport.update_projection_matrix(world_size)

        // movement
        is_playing := match engine.current_mode {
            EngineMode.Play(_) -> true
            _ -> false
        }
        if is_playing {
            viewport.set_translation(vec3())
            viewport.set_scale(1.0f)
        } else if viewport.is_hovered {
            viewport.set_scale(zoom)
            viewport.set_translation(-camera_pos)

            mouse_pos_s := {
                im_pos := ImGui.GetMousePos()
                vec3(im_pos.x, im_pos.y, 0)
            }
            mouse_pos_w      := viewport.screen_to_world(mouse_pos_s)
            last_mouse_pos_w := viewport.screen_to_world(last_mouse_pos_s)
            last_mouse_pos_s = mouse_pos_s

            { // move with mouse
                if ImGui.IsMouseDown(ImGui.ImGuiMouseButton_.Middle) {
                    camera_pos -= mouse_pos_w - last_mouse_pos_w
                }
                viewport.set_translation(-camera_pos)
                last_mouse_pos_w = viewport.screen_to_world(mouse_pos_s)
            }

            { // zoom
                mouse_scroll := int(ImGui.GetIO().MouseWheel)
                while mouse_scroll > 0, mouse_scroll -= 1 {
                    zoom *= 1.1f
                }
                while mouse_scroll < 0, mouse_scroll += 1 {
                    zoom /= 1.1f
                }
                if zoom < 0.1f {
                    zoom = 0.1f
                }
                viewport.set_scale(zoom)
            }

            { // move camera after zoom so we zoom to the cursor
                mouse_pos_w = viewport.screen_to_world(mouse_pos_s)
                camera_pos -= mouse_pos_w - last_mouse_pos_w
                viewport.set_translation(-camera_pos)
            }
        } else {
            viewport.set_scale(zoom)
            viewport.set_translation(-camera_pos)
        }
    }

    render :: (ref Self, world_size: vec3, renderer: ref Renderer) {
        // begin_render(world_size, renderer)
        // renderer.set_target(Some(viewport.frame_buffer.clone()))
        // data := engine.current_mode_data()
        // if data != null {
        //     for layer : data.layer_stack {
        //         layer.render(renderer)
        //     }
        // }
        // renderer.draw_quad(vec3(0, 0, 0), engine.world_size)
        // renderer.flush()
        // end_render()
    }

    begin_render :: (ref Self, world_size: vec3, renderer: ref Renderer) -> bool {
        // render game
        size := viewport.size.change_type(i32)
        viewport.frame_buffer.get().bind()
        glViewport(0, 0, size.x, size.y)

        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w)
        glClear(GL_COLOR_BUFFER_BIT)

        // set aspect_ratio_axis so that the game world always fits on screen
        is_playing := match engine.current_mode {
            EngineMode.Play(_) -> true
            _ -> false
        }
        if is_playing {
            viewport_ar := viewport.size.x / viewport.size.y
            world_ar    := world_size.x / world_size.y
            if viewport_ar > world_ar {
                viewport.aspect_ratio_axis = 1
            } else {
                viewport.aspect_ratio_axis = 0
            }
        } else {
            viewport.aspect_ratio_axis = 1.0f
        }

        // render mode
        view_projection := viewport.projection_matrix * viewport.view_matrix
        renderer.begin_scene(view_projection, viewport.size.xy())

        return false
    }

    end_render :: (ref Self) {
        glBindFramebuffer(GL_FRAMEBUFFER, 0)
        // renderer.end_scene()

        // draw viewport window
        ImGui.Begin("GameScene")
        if viewport.size.x > 0 and viewport.size.y > 0 {
            size    := ImGui.ImVec2(viewport.size.x, viewport.size.y)
            uv0     := ImGui.ImVec2(0, size.y / viewport.size_max.y)
            uv1     := ImGui.ImVec2(size.x / viewport.size_max.x, 0)
            tint    := ImGui.ImVec4(1, 1, 1, 1)
            border  := ImGui.ImVec4(0, 0, 0, 0)
            ImGui.Image(cast viewport.frame_buffer.get().render_texture.get().id, size, uv0, uv1, tint, border)
        }
        ImGui.End()
    }

    begin_gizmos    :: (ref Self) {
        ImGui.Begin("GameScene")
    }
    end_gizmos      :: (ref Self) {
        ImGui.End()
    }
}

Viewport :: struct {
    pos                     := vec3()
    size                    := vec3()
    size_max                := vec3()

    clear_color             := vec4()
    aspect_ratio_axis       := 1.0f

    translation_matrix      := mat4()
    translation_matrix_inv  := mat4()
    scale_matrix            := mat4()
    scale_matrix_inv        := mat4()
    view_matrix             := mat4()
    projection_matrix       := mat4()
    projection_inverse      := mat4()
    view_projection_inv     := mat4()

    // 
    is_focused      := false
    lost_focus      := false
    is_hovered      := false

    frame_buffer    := Rc[FrameBuffer].empty()
}

impl Viewport {
    initialize :: (ref Self, max_size: vec2i) -> bool {
        max_size := max_size.change_type(i32)
        self.size_max = vec3(float(max_size.x), float(max_size.y), 1)
        texture_width := i32(max_size.x)
        texture_height := i32(max_size.y)

        frame_buffer = try_with(FrameBuffer.new(max_size.x, max_size.y), {
            io.println("[ERROR] Failed to create frame buffer")
            return false
        })
        return true
    }

    bind :: (ref Self) {
        size := self.size.change_type(i32)
        self.frame_buffer.get().bind()
        glViewport(0, 0, size.x, size.y)

        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w)
        glClear(GL_COLOR_BUFFER_BIT)
    }

    set_translation :: (ref Self, offset: vec3) {
        translation_matrix     = mat4.from_translation(offset)
        translation_matrix_inv = mat4.from_translation(-offset)
        view_matrix            = scale_matrix * translation_matrix
        view_projection_inv    = translation_matrix_inv * scale_matrix_inv * projection_inverse
    }

    set_scale :: (ref Self, scale: float) {
        scale_matrix        = mat4.from_scales(scale)
        scale_matrix_inv    = mat4.from_scales(1 / scale)
        view_matrix         = scale_matrix * translation_matrix
        view_projection_inv = translation_matrix_inv * scale_matrix_inv * projection_inverse
    }

    screen_to_local :: (ref Self, pos: vec3) -> vec3 {
        return pos - self.pos
    }

    local_to_clip :: (ref Self, pos: vec3) -> vec3 {
        return (pos / size * 2.0f - vec3(1, 1, 0)) * vec3(1, -1, 0)
    }

    clip_to_world :: (ref Self, pos: vec3) -> vec3 {
        return view_projection_inv * pos
    }

    screen_to_world :: (ref Self, pos: vec3) -> vec3 {
        return view_projection_inv * (((pos - self.pos) / size * 2.0f - vec3(1, 1, 0)) * vec3(1, -1, 0))
    }

    world_to_screen :: (ref Self, pos: vec3) -> vec3 {
        clip_pos    := projection_matrix * view_matrix * pos
        ndc_pos     := clip_pos * vec3(1, -1) * 0.5f + 0.5f
        screen_pos  := ndc_pos * size + self.pos
        return screen_pos
    }

    project :: (ref Self, projection_matrix: mat4, pos: vec3) -> vec3 {
        clip_pos    := projection_matrix * pos
        ndc_pos     := clip_pos * vec3(1, -1) * 0.5f + 0.5f
        screen_pos  := ndc_pos * size + self.pos
        return screen_pos
    }

    project_dir :: (ref Self, projection_matrix: mat4, pos: vec2) -> vec2 {
        clip_pos    := mat4.mulv(projection_matrix, vec3(pos.x, pos.y, 0), 0)
        ndc_pos     := clip_pos * vec3(1, -1) * 0.5f
        screen_pos  := ndc_pos * size
        return screen_pos.xy()
    }

    update_projection_matrix :: (ref Self, world_size: vec3) {
        height1 := world_size.y
        width1  := height1 * size.x / size.y

        width2  := world_size.x
        height2 := width2 * size.y / size.x

        width   := aspect_ratio_axis * width1  + (1 - aspect_ratio_axis) * width2
        height  := aspect_ratio_axis * height1 + (1 - aspect_ratio_axis) * height2

        projection_matrix = mat4.orthographic(-width * 0.5, width * 0.5, -height * 0.5, height * 0.5, -10, 10)
        projection_inverse = projection_matrix.invert_orthographic()
    }
}