io :: import std.io

use import opengl.glad_binding

use import shmup_engine
use import opengl_utils

Test :: struct {
    vbo : u32 = 0
    vao : u32 = 0
    shaderProgram : u32 = 0
}

impl ShmupCallbacks for Test {
    init :: (ref Self) {
        gl_check_errors()

        GL(glClearColor(1, 0, 1, 1))

        GL(glGenVertexArrays(1, &vao))
        GL(glGenBuffers(1, &vbo))

        vertices := [
            50.0f, -50.0f, 0.0f
            -50.0f, -50.0f, 0.0f
            0.0f,  50.0f, 0.0f
        ]


        GL(glBindVertexArray(vao))
        GL(glBindBuffer(GL_ARRAY_BUFFER, vbo))
        GL(glBufferData(GL_ARRAY_BUFFER, @sizeof(@typeof(vertices)), vertices.data, GL_STATIC_DRAW))

        // todo: shader
        {
            vertex_shader := "
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
}
"c
            fragment_shader := "
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
} 
"c
            vertexShader := 0u32
            vertexShader = glCreateShader(GL_VERTEX_SHADER)
            GL(glShaderSource(vertexShader, 1, &vertex_shader, null))
            GL(glCompileShader(vertexShader))

            fragmentShader := 0u32
            fragmentShader = glCreateShader(GL_FRAGMENT_SHADER)
            GL(glShaderSource(fragmentShader, 1, &fragment_shader, null))
            GL(glCompileShader(fragmentShader))

            shaderProgram = glCreateProgram()

            GL(glAttachShader(shaderProgram, vertexShader))
            GL(glAttachShader(shaderProgram, fragmentShader))
            GL(glLinkProgram(shaderProgram))

            GL(glUseProgram(shaderProgram))

            // GL(glDeleteShader(vertexShader))
            // GL(glDeleteShader(fragmentShader))

        }

        GL(glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * @sizeof(f32), null))
        GL(glEnableVertexAttribArray(0))
    }

    update :: (ref Self) {
        // io.println("update")

        GL(glUseProgram(shaderProgram))
        GL(glBindVertexArray(vao))
        GL(glDrawArrays(GL_TRIANGLES, 0, 3))
    }
}

Main :: () {
    test := Test()

    shmup_engine := ShmupEngine.new(test)
    shmup_engine.start()
}
