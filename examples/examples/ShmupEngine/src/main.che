use import std.string
use import std.array
use import std.math
use import std.box
use import std.rc
use import std.hash_table
use import std.random.mt
rand :: import std.random
mem  :: import std.mem.allocator
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c
util :: import std.util

use import opengl.glad_binding
ImGui :: import imgui.imgui_binding
glfw  :: import glfw.glfw_binding
stb   :: import stb.stb_binding

use import shmup_engine
use import opengl_utils
use import shader
use import math
use import matrix
use import renderer
use import opengl_buffers
use import command
use import input
use import layer
use import entity
use import viewport
use import components

max_entities :: 1024

Light :: struct {
    pos : vec2
    col : vec3
    radius : float
    angle : float
    direction : float
    smoothness : float
}

Test :: struct {
    layer       : ^EntityLayer = null
    proj        := mat4()

    sub         := vec4(0, 0, 1, 1)

    tex         := Rc[Texture].empty()
    tex1        := Rc[Texture].empty()
    tex2        := Rc[Texture].empty()

    total       := 1000
    x_count     := 100
    size        := 1.0f
    thickness   := 0.1f

    time        := 0.0f

    lights      := Array[Light].create()

    area_light_pos      := vec2(4, 2)
    area_light_size     := vec2(2, 4)
    area_light_angle    := 0.0f
    area_light_color    := vec3(1, 1, 0)
    area_light_smooth   := 0.0f

    exposure : ^f32 = null
}

impl EntityLayerCallbacks for Test {
    init :: (&Self, layer: &EntityLayer) -> bool {
        self.layer = ^layer
        layer.engine.inspector.register_component_info(CameraController(null))
        layer.engine.inspector.register_component_info(TestComponent(null))

        layer.engine.save_file = Some(String.from_string("D:/Programming/CheezLang/data/example_layer.txt"))

        tex1 = match Texture.from_file("../data/RetroMenu.png") {
            Ok($tex) -> tex
            Err(_) -> {
                io.formatln("[ERROR] Failed to load image 1")
                return false
            }
        }
        tex2 = match Texture.from_file("../data/sdfr.bmp") {
            Ok($tex) -> tex
            Err(_) -> {
                io.formatln("[ERROR] Failed to load image 2")
                return false
            }
        }

        lights.clear()
        lights.add(Light(vec2(1, 1), vec3(1, 0.1, 0.1), 5, 270, 45, 0.5))

        return true
    }

    update :: (&Self, dt: float) {
        time += dt
    }

    render :: (&Self, renderer: &Renderer) {
        layer.engine.edit_property(PropertyEdit.EditInt(^total, "Quad Count"))
        layer.engine.edit_property(PropertyEdit.EditInt(^x_count, "X Count"))
        layer.engine.edit_property(PropertyEdit.EditFloat(^size, "Quad Size", 0.1f))
        layer.engine.edit_property(PropertyEdit.EditFloat(^thickness, "Line thickness", 0.01f))
        
        for 0..total {
            x := f32(it % x_count) * size
            y := f32(it / x_count) * size

            tex : Option[Rc[Texture]] = match it_index % 3 {
                1 -> Some(tex1.clone())
                2 -> Some(tex2.clone())
                _ -> None
            }

            renderer.fill_quad(vec3(x, y), vec3(size, size) * 0.9f, texture = tex)
        }

        // for l : lights {
        //     renderer.add_point_light(l.pos, l.col, l.radius, l.angle, l.direction, l.smoothness)
        // }

        // renderer.add_area_light(area_light_pos, area_light_size, area_light_angle, area_light_color, area_light_smooth)
    }

    imgui_render :: (&Self) {
        // defer ImGui.End()
        // if !ImGui.Begin("Lights") {
        //     return
        // }
        // ImGui.SliderFloat("Exposure", cast exposure, 0, 15)

        // for l : lights {
        //     ImGui.PushIDPtr(^l)
        //     ImGui.SliderFloat2("Position", cast ^l.pos, -10, 10)
        //     ImGui.ColorEdit3("Color", cast ^l.col, ImGui.ImGuiColorEditFlags_.HDR)
        //     ImGui.SliderFloat("Radius", cast ^l.radius, 0, 20)
        //     ImGui.SliderAngle("Angle", cast ^l.angle, 0, 360)
        //     ImGui.SliderAngle("Direction", cast ^l.direction, 0, 360)
        //     ImGui.SliderFloat("Smoothness", cast ^l.smoothness, 0, 1)
        //     ImGui.Separator()
        //     ImGui.PopID()
        // }

        // ImGui.PushIDPtr(^area_light_pos)
        // ImGui.SliderFloat2("Position", cast ^area_light_pos, -10, 10)
        // ImGui.SliderFloat2("Size", cast ^area_light_size, 0.1, 5)
        // ImGui.SliderAngle("Angle", cast ^area_light_angle)
        // ImGui.ColorEdit3("Color", cast ^area_light_color, ImGui.ImGuiColorEditFlags_.HDR)
        // ImGui.SliderFloat("Smooth", cast ^area_light_smooth, 0.0, 2)
        // ImGui.Separator()
        // ImGui.PopID()
    }
}

TestComponent :: struct ComponentBase {
    light := Option[Rc[PointLightComponent]].None
    cam   := Option[Rc[CameraController]].None
}

impl Component for TestComponent {
    init :: (&Self) {
        // _ :: Option[Rc[PointLightComponent]]
        // _ :: Option[Rc[CameraController]]
        // self.light = entity.get_component(PointLightComponent).unwrap()
        // self.cam = entity.get_component(CameraController).unwrap()
        self.light = entity.get_component(PointLightComponent)
        self.cam = entity.get_component(CameraController)
        // io.println("a")
        // self.light = Option[Rc[PointLightComponent]].unwrap(entity.get_component(PointLightComponent))
        // io.println("b")
        // self.cam = Option[Rc[CameraController]].unwrap(entity.get_component(CameraController))
        // io.println("c")
    }

    update :: (&Self, entity: &Entity, layer: &EntityLayer, dt: float) {
        match &cam {
            Some($cam) -> {
                vel := cam.get().velocity
                if vel.magsq() > 0.01 {
                    angle := f32(atan2(vel.y, vel.x))
                    match &light {
                        Some($light) -> {
                            light.get().direction = ((angle * 180.0f / 3.1415f) % 360.0f)// + 360.0f) % 360.0f
                        }
                    }
                }
            }
        }
        

    }
    render :: (&Self, entity: &Entity, engine: &ShmupEngine, renderer: &Renderer) {
    }
    render_gizmos :: (&Self, entity: &Entity, engine: &ShmupEngine, renderer: &Renderer) {}
    get_type_info :: (&Self) -> ^TypeInfo {
        return @type_info(Self)
    }
    base :: (&Self) -> &ComponentBase {
        return self
    }
    serialize :: (&Self, stream: &String) {
    }
}

CameraController :: struct ComponentBase {
    zoom_speed  := 0.0f
    cam         := Option[Rc[Camera]].None

    max_speed   := 5.0f
    acc_time    := 1.0f
    velocity    := vec3()
}

impl Component for CameraController {
    init :: (&Self) {
        cam = entity.get_component(Camera)
        velocity = vec3()
    }

    update :: (&Self, entity: &Entity, layer: &EntityLayer, dt: float) {
        input := &layer.get_input()

        move := vec3()

        if input.key_down(glfw.GLFW_KEY_UP) {
            move += vec3(0, 1, 0)
        }
        if input.key_down(glfw.GLFW_KEY_DOWN) {
            move += vec3(0, -1, 0)
        }
        if input.key_down(glfw.GLFW_KEY_LEFT) {
            move += vec3(-1, 0, 0)
        }
        if input.key_down(glfw.GLFW_KEY_RIGHT) {
            move += vec3(1, 0, 0)
        }

        if move.magsq() == 0 {
            move = -velocity.normalized()

            vel_change := move * (max_speed / acc_time) * dt
            if vel_change.magsq() > velocity.magsq() {
                velocity = vec3()
            } else {
                velocity += vel_change
            }
        } else {
            move = move.normalized()

            vel_change := move * (max_speed / acc_time) * dt
            velocity += vel_change
        }

        if velocity.magsq() > max_speed * max_speed {
            velocity = velocity.clamp_length(0, max_speed)
        }

        entity.position += velocity * dt
    }
    render :: (&Self, entity: &Entity, engine: &ShmupEngine, renderer: &Renderer) {
    }
    render_gizmos :: (&Self, entity: &Entity, engine: &ShmupEngine, renderer: &Renderer) {}
    get_type_info :: (&Self) -> ^TypeInfo {
        return @type_info(Self)
    }
    base :: (&Self) -> &ComponentBase {
        return self
    }
    serialize :: (&Self, stream: &String) {
        stream.appendf("                max_speed   = {}`n", (max_speed))
        stream.appendf("                acc_time    = {}`n", (acc_time))
    }
}

Main :: () {
    rand.PseudoRandom.init()

    test  := Test()

    shmup_engine := ShmupEngine.new()
    shmup_engine.push_entity_layer(String.from_string("Test Layer"), ^test)
    shmup_engine.push_lighting_layer(String.from_string("Lighting"))
    shmup_engine.push_debug_layer(String.from_string("Debug"))
    shmup_engine.start()
}
