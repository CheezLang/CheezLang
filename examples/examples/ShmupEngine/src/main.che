use import std.string
use import std.array
use import std.math
use import std.rc
rand :: import std.random
mem  :: import std.mem.allocator
fmt  :: import std.fmt
io   :: import std.io
C    :: import std.c
util :: import std.util

use import opengl.glad_binding
ImGui :: import imgui.imgui_binding
glfw  :: import glfw.glfw_binding

use import shmup_engine
use import opengl_utils
use import shader
use import math
use import matrix
use import renderer
use import opengl_buffers
use import input
use import layer
use import entity
use import components

max_entities :: 1024

Test :: struct {
    layer : &EntityLayer = null

    e               := Option[Rc[Entity]].None
    mouse_pos_world := vec3()
}

impl EntityLayerCallbacks for Test {
    init :: (ref Self, layer: ref EntityLayer) -> bool {
        self.layer = &layer

        layer.engine.save_file = Some(String.from_string("D:/Programming/CheezLang/data/example_layer.txt"))

        return true
    }

    update :: (ref Self, dt: float) {
        mouse_pos := {
            im_pos := ImGui.GetMousePos()
            vec3(im_pos.x, im_pos.y, 0)
        }

        mouse_pos_world = layer.engine.game_viewport.screen_to_world(mouse_pos)


        mouse_pos_screen := layer.engine.game_viewport.world_to_screen(mouse_pos_world)
        // io.println(fmt.format_any(mouse_pos_screen))
    }

    render :: (ref Self, renderer: ref Renderer) {
        // set aspect_ratio_axis so that the game world always fits on screen
        viewport_ar := float(layer.engine.game_viewport.size.x) / float(layer.engine.game_viewport.size.y)
        world_ar    := layer.engine.world_size.x / layer.engine.world_size.y
        if viewport_ar > world_ar {
            layer.engine.aspect_ratio_axis = 1
        } else {
            layer.engine.aspect_ratio_axis = 0
        }

        line_start_pos := match ref e {
            Some($e) -> e.get().position
            None -> vec3(-5, 0, 0)
        }

        renderer.draw_line(line_start_pos, mouse_pos_world, color = vec3(0, 1, 0), thickness = 2)
    }

    imgui_render :: (ref Self) {
    }
}

Main :: () {
    rand.PseudoRandom.init()

    test  := Test()

    shmup_engine := ShmupEngine.new()
    shmup_engine.push_entity_layer(String.from_string("test layer"), &test)
    shmup_engine.start()
}
