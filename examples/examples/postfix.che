use import std.stack
use import std.array
use import std.string
use import std.printable
use import std.mem.std_heap_allocator
use import std.mem.allocator
use import std.os.windows_functions
io :: import std.io

use import compiler.lexer
use import compiler.string_database

impl TokenType {
    get_precedence :: (Self) -> int {
        return match self {
            use TokenType
            Plus        -> 5
            Minus       -> 5
            Asterisk    -> 10
            ForwardSlash -> 10
            OpenParen   -> 2

            $_          -> {
                @panic("called with non operator")
                -1
            }
        }
    }
}

impl Token {
    get_text :: (ref Self) -> String {
        return match self.ttype {
            use TokenType
            Plus        -> String.from_string("+")
            Minus       -> String.from_string("-")
            Asterisk    -> String.from_string("*")
            ForwardSlash -> String.from_string("/")

            NumberLiteral -> {
                match data {
                    use TokenData
                    Integer($val) -> String.format("{}", val)
                    Double($val) -> String.format("{}", val)
                    $_ -> {
                        @panic("TokenData was neither Integer nor Double")
                        String.empty()
                    }
                }
            }

            $_          -> String.from_string("?")
        }
    }
}

pop_ops_while :: (new_order: ref Array[Token], stack: ref Stack[Token], precedence: int = -1) {
    while !stack.empty() and TokenType.get_precedence(stack.peek().ttype) >= precedence {
        new_order.add(stack.pop())
    }
}

infix_to_postfix :: (str: String, calculate: bool) -> (postfix: String, result: double) {
    string_db := StringDatabase.new()
    lexer := Lexer.from_string(str, string_db)

    stack := Stack[Token].create()
    new_order := Array[Token].create()

    while true {
        token := lexer.next_token()

        match token.ttype {
            use TokenType

            NumberLiteral -> {
                new_order.add(token)
            }

            Plus -> {
                pop_ops_while(new_order, stack, TokenType.get_precedence(token.ttype))
                stack.push(token)
            }

            Minus -> {
                pop_ops_while(new_order, stack, TokenType.get_precedence(token.ttype))
                stack.push(token)
            }

            Asterisk -> {
                pop_ops_while(new_order, stack, TokenType.get_precedence(token.ttype))
                stack.push(token)
            }

            ForwardSlash -> {
                pop_ops_while(new_order, stack, TokenType.get_precedence(token.ttype))
                stack.push(token)
            }

            OpenParen -> {
                stack.push(token)
            }

            ClosingParen -> {
                while !stack.empty() and int(stack.peek().ttype) != int(OpenParen) {
                    new_order.add(stack.pop())
                }
                stack.pop()
            }

            EOF -> { 
                break
            }
        }
    }
    pop_ops_while(new_order, stack)

    postfix = String.empty()
    for i : 0..new_order.length {
        tok := new_order[i]
        txt := tok.get_text()
        postfix.appendf("{} ", txt)
    }

    result = 0

    if calculate {
        numbers := Stack[double].create()
        //foreach! t in new_order.iterator() {
        for t : new_order {
            match t.ttype {
                use TokenType

                NumberLiteral -> match t.data {
                    use TokenData

                    Integer($val) -> numbers.push(double(val))
                    Double($val) -> numbers.push(val)
                    $_ -> @panic("not a number")
                }

                Plus -> {
                    b := numbers.pop()
                    a := numbers.pop()
                    numbers.push(a + b)
                }

                Minus -> {
                    b := numbers.pop()
                    a := numbers.pop()
                    numbers.push(a - b)
                }

                Asterisk -> {
                    b := numbers.pop()
                    a := numbers.pop()
                    numbers.push(a * b)
                }

                ForwardSlash -> {
                    b := numbers.pop()
                    a := numbers.pop()
                    numbers.push(a / b)
                }
            }
        }

        result = numbers.peek()
    }
}

impl Printable for &u16 {
    print :: (ref Self, str: ref String, format: string) {
        while i := 0, self[i] != 0, i += 1 {
            str += char(self[i])
        }
    }
}

to_ascii_strings :: (argv: &&u16, argc: int) -> Array[String] {
    array := Array[String].create(argc)
    for i : 0..argc {
        str := String.empty()
        while k := 0, argv[i][k] != 0, k += 1 {
            str += char(argv[i][k])
        }

        array.add(str)
    }
    return array
}

get_cmd_args :: () -> Array[String] {
    cmdLineArgs := GetCommandLineW()
    count := 0i32
    args := CommandLineToArgvW(cmdLineArgs, &count)
    return to_ascii_strings(args, int(count))
}

Main :: () {
    args := get_cmd_args()

    if args.get_length() <= 1 {
        return
    }

    (start_index, calculate) := if streq(args[1], "-e") { (2, true) } else { (1, false) }

    for infix : args {
        if it_index < start_index then continue
        io.print(infix.slice())
        (postfix, result) := infix_to_postfix(infix.clone(), calculate)
        io.printf(" -> {}", postfix)
        if calculate {
            io.printfln(" = {}", result)
        } else {
            io.println("")
        }
    }

    // io.printfln("argc: {:x}, argv: {}", (int(args), count))


    // io.println(infix_to_postfix(String.from_string("1 + 2 * 3"))
    // io.println(infix_to_postfix(String.from_string("(1 + 2) * 3"))
    // io.println(infix_to_postfix(String.from_string("1 * (2 + 3)"))
    // io.println(infix_to_postfix(String.from_string("1 * 2 + 3"))
}