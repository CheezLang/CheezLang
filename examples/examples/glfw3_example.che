// #load("compiler/main.che")

#load("std:io/io")
#load("glfw:glfw3")
#load("opengl:opengl")

struct Quad {
    pos: Vec2f
    size: Vec2f
    col: Color3f
}

impl Quad {
    fn draw(ref Self) {
        glBegin(GL_TRIANGLES)

        {
            // v1
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y)

            // v2
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y)

            // v3
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y + size.y)
        }

        {
            // v1
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y)

            // v3
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x + size.x, pos.y + size.y)

            // v4
            glColor3f(col.r, col.g, col.b)
            glVertex2f(pos.x, pos.y + size.y)
        }

        glEnd()
    }
}

let q = new Quad {
    pos = new Vec2f { -0.5f, -0.5f }
    size = new Vec2f { 1, 1 }
    col = new Color3f { 1, 0, 1 }
}

fn onKeyDown(window: *GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {
    if action == GLFW_PRESS {
        if key == 86 { q.pos.y += 0.1 }
        if key == 73 { q.pos.y -= 0.1 }
        if key == 85 { q.pos.x -= 0.1 }
        if key == 65 { q.pos.x += 0.1 }
        // match key {
        //     86 -> q.pos.y += 0.1
        //     73 -> q.pos.y -= 0.1
        //     85 -> q.pos.x -= 0.1
        //     65 -> q.pos.x += 0.1
        // }
    }
}

fn onResize(window: *GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

fn glfw3_example()
{
    if !glfwInit() {
        println("Failed to initialize GLFW")
        return
    }
    // defer glfwTerminate()

    let window = glfwCreateWindow(640, 480, "Hello World", null, null)
    if window == null {
        println("Failed to create window")
        glfwTerminate()
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    glfwMakeContextCurrent(window)
    glViewport(0, 0, 640, 480)

    glClearColor(0, 0, 0, 1)

    while !glfwWindowShouldClose(window) {
        glClear(GL_COLOR_BUFFER_BIT)

        //
        q.draw()

        // present image
        glfwSwapBuffers(window)
        //
        glfwPollEvents()
    }
    
    glfwTerminate()
}
