use import std.mem.allocator
use import std.string
use import std.array
use import std.math
use import std.time
fmt :: import std.fmt
io  :: import std.io
C   :: import std.c

use import glfw.glfw3
use import opengl.glad_binding
// use import opengl.opengl
// use import opengl.constants
// use import opengl.types
// use import opengl.functions


ImGui :: import imgui.imgui_binding
// use import ImGui.cimgui_binding
// use import ImGui.cimgui_glfw_binding
// use import ImGui.cimgui_opengl3_binding

#export_scope

vec2 :: Vector2[float]
vec3 :: Vector3[float]
vec4 :: Vector4[float]

for_extension_vec4 :: (vec: ref vec4, code: Code) #for {
    { #label _block_all
        { #label _block_x
            it_index := 0
            it := ref vec.x
            @insert(code, _continue={break _block_x}, _break={break _block_all})
        }
        { #label _block_y
            it_index := 1
            it := ref vec.y
            @insert(code, _continue={break _block_y}, _break={break _block_all})
        }
        { #label _block_z
            it_index := 2
            it := ref vec.z
            @insert(code, _continue={break _block_z}, _break={break _block_all})
        }
        { #label _block_w
            it_index := 3
            it := ref vec.w
            @insert(code, _continue={break _block_w}, _break={break _block_all})
        }
    }
}

gladLoadGL :: () -> i32;

onKeyDown :: (window: &GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {
}

on_framebuffer_resize :: (window: &GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)

    width  = cast w
    height = cast h
}

glfw_error_callback :: (error: i32, description: c_string) {
    C.printf("Glfw Error %d: %s\n", error, description)
}

gl_check_errors :: () {
    loop {
        err := glGetError()
        if int(err) == int(GL_NO_ERROR) then break
        io.printfln("[OpenGL] Error: {}", err)
    }
}

igListBoxStringArray :: (label: c_string, current_index: &i32, arr: ref Array[String]) -> bool {
    array_string_getter :: (data: &void, idx: i32, out_text: &c_string) -> bool {
        arr := ref <<cast(&Array[String]) data
        if idx < 0 or int(idx) >= arr.get_length() {
            return false
        }

        <<out_text = arr.access(idx).as_cstring()

        return true
    }

    if arr.get_length() == 0 {
        return false
    }

    return ImGui.ListBoxFnPtr(label, current_index, array_string_getter, cast &arr, cast arr.get_length())
}

width  := 0
height := 0

Main :: () {
    glfwSetErrorCallback(glfw_error_callback)

    if !glfwInit() {
        io.println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)
    glfwWindowHint(GLFW_VISIBLE, 0)
    glfwWindowHint(GLFW_MAXIMIZED, 1)
    glfwWindowHint(GLFW_RESIZABLE, 1)

    vidmode := glfwGetVideoMode(glfwGetPrimaryMonitor())

    window := glfwCreateWindow(vidmode.width, vidmode.height, "Hello World", null, null)
    if window == null {
        io.println("Failed to create window")
        return
    }
    defer glfwDestroyWindow(window)

    glfwMakeContextCurrent(window)
    glfwSwapInterval(0)
    if gladLoadGL() != 1 {
        return
    }

    glfwShowWindow(window)

    {
        w := 0i32
        h := 0i32
        glfwGetFramebufferSize(window, &w, &h)
        width = cast w
        height = cast h
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetFramebufferSizeCallback(window, on_framebuffer_resize)

    // imgui setup
    if !init_imgui(window) {
        return
    }
    defer shutdown_imgui()

    // opengl
    clear_color := vec4(1, 0, 1, 1)

    strings := Array[String].create()
    strings.add(String.from_string("Hello"))
    strings.add(String.from_string("World"))
    strings_selected := 0i32

    show_demo_window := true

    buff := alloc_n(char8, 256)
    C.memset(buff.data, 0, cast buff.length)
    defer free_n(buff)

    last_frame_time := get_time_microseconds()

    frame_timer := 0.0
    fps_counter := 0
    current_fps := 0

    while !glfwWindowShouldClose(window) {
        this_frame_time     := get_time_microseconds()
        last_frame_duration := this_frame_time - last_frame_time
        last_frame_time = this_frame_time

        // convert time from microseconds to seconds
        delta_time := double(last_frame_duration) * 0.000001

        frame_timer += delta_time
        if frame_timer >= 1 {
            current_fps = fps_counter
            frame_timer -= 1
            fps_counter = 0
        }


        glfwPollEvents()
        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w)
        glClear(GL_COLOR_BUFFER_BIT)

        //
        begin_frame()

        // 
        // create_dock_space()

        // {
        //     if ImGui.BeginMainMenuBar() {
        //         if ImGui.BeginMenu("File") {
        //             ShowExampleMenuFile()
        //             ImGui.EndMenu()
        //         }
        //         if ImGui.BeginMenu("Edit") {
        //             if (ImGui.MenuItem("Undo", "CTRL+Z")) {}
        //             if (ImGui.MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item
        //             ImGui.Separator()
        //             if (ImGui.MenuItem("Cut", "CTRL+X")) {}
        //             if (ImGui.MenuItem("Copy", "CTRL+C")) {}
        //             if (ImGui.MenuItem("Paste", "CTRL+V")) {}
        //             ImGui.EndMenu()
        //         }
        //         ImGui.EndMainMenuBar()
        //     }
        // }

        {
            open := true

            ImGui.Begin("Settings", &open, ImGui.ImGuiWindowFlags_.None)

            {
                delta_time_str := fmt.format_any(delta_time)
                ImGui.LabelText("Frame duration", delta_time_str.as_cstring())
                fps_str := fmt.format_any(1 / delta_time)
                ImGui.LabelText("Fps", fps_str.as_cstring())
                fps_counted_str := fmt.format_any(current_fps)
                ImGui.LabelText("Fps", fps_counted_str.as_cstring())
            }

            ImGui.ColorPicker3("clear color", cast(&float)&clear_color, 0)
            ImGui.Separator()
            
            for component : clear_color {
                ImGui.PushIDInt(i32(it_index))
                ImGui.InputFloat("##", &component)
                ImGui.PopID()
            }

            ImGui.Separator()
            ImGui.InputText("String to add", buff.data, cast buff.length)
            if ImGui.SmallButton("Add String") {
                strings.add(String.from_cstring(buff.data))
                buff[0] = cast 0
            }
            ImGui.Separator()

            igListBoxStringArray("strings", &strings_selected, strings)
            ImGui.End()
        }

        // if show_demo_window then
        //     ImGui.ShowDemoWindow(&show_demo_window)

        end_frame()

        // present image
        glfwSwapBuffers(window)

        fps_counter += 1
    }
}

dockspace_flags := ImGui.ImGuiDockNodeFlags_.None

create_dock_space :: () {
    window_flags := @bin_or(ImGui.ImGuiWindowFlags_.MenuBar, ImGui.ImGuiWindowFlags_.NoDocking)

    opt_fullscreen := true
    if opt_fullscreen {
        pivot := ImGui.ImVec2(0, 0)

        viewport := ImGui.GetMainViewport()
        ImGui.SetNextWindowPos(viewport.Pos, 0, pivot)
        ImGui.SetNextWindowSize(viewport.Size)
        ImGui.SetNextWindowViewport(viewport.ID)
        ImGui.PushStyleVar(ImGui.ImGuiStyleVar_.WindowRounding, 0.0f)
        ImGui.PushStyleVar(ImGui.ImGuiStyleVar_.WindowBorderSize, 0.0f)
        window_flags = @bin_or(
            window_flags,
            ImGui.ImGuiWindowFlags_.NoTitleBar,
            ImGui.ImGuiWindowFlags_.NoCollapse,
            ImGui.ImGuiWindowFlags_.NoResize,
            ImGui.ImGuiWindowFlags_.NoMove,
            ImGui.ImGuiWindowFlags_.NoBringToFrontOnFocus,
            ImGui.ImGuiWindowFlags_.NoNavFocus
        )
    }

    // When using ImGuiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background 
    // and handle the pass-thru hole, so we ask Begin() to not render a background.
    if int(@bin_and(dockspace_flags, ImGui.ImGuiDockNodeFlags_.PassthruCentralNode)) != 0 {
        window_flags = @bin_or(window_flags, ImGui.ImGuiWindowFlags_.NoBackground)
    }

    // Important: note that we proceed even if Begin() returns false (aka window is collapsed).
    // This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,
    // all active windows docked into it will lose their parent and become undocked.
    // We cannot preserve the docking relationship between an active window and an inactive docking, otherwise
    // any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.
    window_padding := ImGui.ImVec2(0.0f, 0.0f)
    ImGui.PushStyleVarVec(ImGui.ImGuiStyleVar_.WindowPadding, window_padding)

    open := true
    ImGui.Begin("DockSpace Demo", &open, window_flags)
    ImGui.PopStyleVar()

    if opt_fullscreen then ImGui.PopStyleVar(2)

    // DockSpace
    io := ref ImGui.GetIO()
    if @bin_and(io.ConfigFlags, i32(ImGui.ImGuiConfigFlags_.DockingEnable)) != 0 {
        dockspace_id := ImGui.GetID("MyDockSpace")
        size := ImGui.ImVec2(0.0f, 0.0f)
        ImGui.DockSpace(dockspace_id, size, dockspace_flags)
    } else {
        @assert(false)
    }

    /*
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Docking"))
        {
            // Disabling fullscreen would allow the window to be moved to the front of other windows,
            // which we can't undo at the moment without finer window depth/z control.
            //ImGui::MenuItem("Fullscreen", NULL, &opt_fullscreen_persistant);

            if (ImGui::MenuItem("Flag: NoSplit",                "", (dockspace_flags & ImGuiDockNodeFlags_NoSplit) != 0))                 dockspace_flags ^= ImGuiDockNodeFlags_NoSplit;
            if (ImGui::MenuItem("Flag: NoResize",               "", (dockspace_flags & ImGuiDockNodeFlags_NoResize) != 0))                dockspace_flags ^= ImGuiDockNodeFlags_NoResize;
            if (ImGui::MenuItem("Flag: NoDockingInCentralNode", "", (dockspace_flags & ImGuiDockNodeFlags_NoDockingInCentralNode) != 0))  dockspace_flags ^= ImGuiDockNodeFlags_NoDockingInCentralNode;
            if (ImGui::MenuItem("Flag: PassthruCentralNode",    "", (dockspace_flags & ImGuiDockNodeFlags_PassthruCentralNode) != 0))     dockspace_flags ^= ImGuiDockNodeFlags_PassthruCentralNode;
            if (ImGui::MenuItem("Flag: AutoHideTabBar",         "", (dockspace_flags & ImGuiDockNodeFlags_AutoHideTabBar) != 0))          dockspace_flags ^= ImGuiDockNodeFlags_AutoHideTabBar;
            ImGui::Separator();
            if (ImGui::MenuItem("Close DockSpace", NULL, false, p_open != NULL))
                *p_open = false;
            ImGui::EndMenu();
        }
        HelpMarker(
            "When docking is enabled, you can ALWAYS dock MOST window into another! Try it now!" "\n\n"
            " > if io.ConfigDockingWithShift==false (default):" "\n"
            "   drag windows from title bar to dock" "\n"
            " > if io.ConfigDockingWithShift==true:" "\n"
            "   drag windows from anywhere and hold Shift to dock" "\n\n"
            "This demo app has nothing to do with it!" "\n\n"
            "This demo app only demonstrate the use of ImGui::DockSpace() which allows you to manually create a docking node _within_ another window. This is useful so you can decorate your main application window (e.g. with a menu bar)." "\n\n"
            "ImGui::DockSpace() comes with one hard constraint: it needs to be submitted _before_ any window which may be docked into it. Therefore, if you use a dock spot as the central point of your application, you'll probably want it to be part of the very first window you are submitting to imgui every frame." "\n\n"
            "(NB: because of this constraint, the implicit \"Debug\" window can not be docked into an explicit DockSpace() node, because that window is submitted as part of the NewFrame() call. An easy workaround is that you can create your own implicit \"Debug##2\" window after calling DockSpace() and leave it in the window stack for anyone to use.)"
        );

        ImGui::EndMenuBar();
    }
    */

    ImGui.End()
}

ShowExampleMenuFile :: () {
    ImGui.MenuItem("(dummy menu)", null, false, false)
    if ImGui.MenuItem("New") {}
    if ImGui.MenuItem("Open", "Ctrl+O") {}
    if ImGui.BeginMenu("Open Recent") {
        ImGui.MenuItem("fish_hat.c")
        ImGui.MenuItem("fish_hat.inl")
        ImGui.MenuItem("fish_hat.h")
        if ImGui.BeginMenu("More..") {
            ImGui.MenuItem("Hello")
            ImGui.MenuItem("Sailor")
            if ImGui.BeginMenu("Recurse..") {
                ShowExampleMenuFile()
                ImGui.EndMenu()
            }
            ImGui.EndMenu()
        }
        ImGui.EndMenu()
    }
    if (ImGui.MenuItem("Save", "Ctrl+S")) {}
    if (ImGui.MenuItem("Save As..")) {}
    ImGui.Separator()
    if ImGui.BeginMenu("Options") {
        enabled := true #static
        ImGui.MenuItem_2("Enabled", "", &enabled)

        size := ImGui.ImVec2(0, 60)
        ImGui.BeginChild("child", size, true)

        for i : 0..10 {
            text := fmt.format("Scrolling Text {}", [i])
            ImGui.Text(text.as_cstring())
        }
        ImGui.EndChild()
        f := 0.5f #static
        n := 0i32 #static
        b := true #static
        ImGui.SliderFloat("Value", &f, 0.0f, 1.0f)
        ImGui.InputFloat("Input", &f, 0.1f)
        ImGui.Combo_2("Combo", &n, "Yes\0No\0Maybe\0\0")
        ImGui.Checkbox("Check", &b)
        ImGui.EndMenu()
    }
    if (ImGui.BeginMenu("Colors"))
    {
        sz := ImGui.GetTextLineHeight()
        for i : 0..int(ImGui.ImGuiCol_.COUNT) {
            name := ImGui.GetStyleColorName(cast i)
            p := ImGui.GetCursorScreenPos()
            // ImGui.GetWindowDrawList().AddRectFilled(p, ImVec2(p.x+sz, p.y+sz), ImGui.GetColorU32((ImGuiCol)i))
            size := ImGui.ImVec2(sz, sz)
            ImGui.Dummy(size)
            ImGui.SameLine()
            ImGui.MenuItem(name)
        }
        ImGui.EndMenu()
    }
    if (ImGui.BeginMenu("Disabled", false)) {
        @assert(false)
    }
    if (ImGui.MenuItem("Checked", null, true)) {}
    if (ImGui.MenuItem("Quit", "Alt+F4")) {}
}


begin_frame :: () {
    ImGui.ImGui_ImplOpenGL3_NewFrame()
    ImGui.ImGui_ImplGlfw_NewFrame()
    ImGui.NewFrame()
}

end_frame :: () {
    io := ImGui.GetIO()

    // rendering
    ImGui.EndFrame()
    ImGui.Render()
    ImGui.ImGui_ImplOpenGL3_RenderDrawData(ImGui.GetDrawData())

    if @bin_and(io.ConfigFlags, i32(ImGui.ImGuiConfigFlags_.ViewportsEnable)) != 0 {	
        backup_current_context := glfwGetCurrentContext()
        ImGui.UpdatePlatformWindows()
        ImGui.RenderPlatformWindowsDefault()
        glfwMakeContextCurrent(backup_current_context)
    }
}

init_imgui :: (window: &GLFWwindow) -> bool {
    context := ImGui.CreateContext(null)

    if context == null {
        io.println("[ERROR] ImGui.CreateContext failed")
        return false
    }

    imgui_io := ref ImGui.GetIO()
    imgui_io.ConfigFlags = @bin_or(
        imgui_io.ConfigFlags,
        i32(ImGui.ImGuiConfigFlags_.DockingEnable),
        i32(ImGui.ImGuiConfigFlags_.ViewportsEnable))

    ImGui.StyleColorsDark(null)

    // change corners so they are right angles instead of rounded
    style := ref ImGui.GetStyle()	
    style.WindowRounding = 0.0	

    //
    if !ImGui.ImGui_ImplGlfw_InitForOpenGL(window, true) {
        io.println("[ERROR] ImGui.ImGui_ImplGlfw_InitForOpenGL failed")
        return false
    }
    if !ImGui.ImGui_ImplOpenGL3_Init("#version 130") {
        io.println("[ERROR] ImGui.ImGui_ImplOpenGL3_Init failed")
        return false
    }

    return true
}

shutdown_imgui :: () {
    ImGui.ImGui_ImplOpenGL3_Shutdown()
    ImGui.ImGui_ImplGlfw_Shutdown()
    ImGui.DestroyContext(null)
}