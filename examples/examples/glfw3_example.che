// #load("compiler/main.che")

#load("std:io/io")
#load("glfw:glfw3")
#load("std:math")
#load("opengl:opengl")
#load("../libraries/imgui/imgui")

vec2 :: Vector2[float]
vec3 :: Vector3[float]

gladLoadGL :: () -> i32;

onKeyDown :: (window: &GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {

}

onResize :: (window: &GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

glfw_error_callback :: (error: i32, description: c_string) {
    c_printf("Glfw Error %d: %s\n", error, description)
}

Main :: () {
    glfwSetErrorCallback(glfw_error_callback)

    if !glfwInit() {
        println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0)

    window := glfwCreateWindow(1280, 720, "Hello World", null, null)
    if window == null {
        println("Failed to create window")
        return
    }
    defer glfwDestroyWindow(window)

    glfwMakeContextCurrent(window)
    glfwSwapInterval(1)
    if gladLoadGL() != 1 {
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    // imgui setup
    context := igCreateContext(null)
    igStyleColorsDark(null)
    if !ImGui_ImplGlfw_InitForOpenGL(window, true) {
        println("[ERROR] ImGui_ImplGlfw_InitForOpenGL failed")
        return
    }
    if !ImGui_ImplOpenGL3_Init("#version 130") {
        println("[ERROR] ImGui_ImplOpenGL3_Init failed")
        return
    }

    // opengl
    glViewport(0, 0, 1080, 720)
    glClearColor(0, 0, 0, 1)

    show_demo_window := true

    while !glfwWindowShouldClose(window) {
        glfwPollEvents()

        //
        ImGui_ImplOpenGL3_NewFrame()
        ImGui_ImplGlfw_NewFrame()
        igNewFrame()

        if show_demo_window then
            igShowDemoWindow(&show_demo_window)
        igRender()

        // present image
        glClear(GL_COLOR_BUFFER_BIT)
        ImGui_ImplOpenGL3_RenderDrawData(igGetDrawData())
        glfwSwapBuffers(window)
    }
}
