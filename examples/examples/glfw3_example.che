use import std.math
io :: import std.io
C :: import std.c

use import glfw.glfw3
use import opengl.opengl
use import opengl.constants
use import opengl.types
use import opengl.functions
use import imgui.imgui
use import imgui.types
use import imgui.functions

#export_scope

vec2 :: Vector2[float]
vec3 :: Vector3[float]

gladLoadGL :: () -> i32;

onKeyDown :: (window: &GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {

}

onResize :: (window: &GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

glfw_error_callback :: (error: i32, description: c_string) {
    C.printf("Glfw Error %d: %s\n", error, description)
}

Main :: () {
    glfwSetErrorCallback(glfw_error_callback)

    if !glfwInit() {
        io.println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0)

    window := glfwCreateWindow(1280, 720, "Hello World", null, null)
    if window == null {
        io.println("Failed to create window")
        return
    }
    defer glfwDestroyWindow(window)

    glfwMakeContextCurrent(window)
    glfwSwapInterval(1)
    if gladLoadGL() != 1 {
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    // imgui setup
    if !init_imgui(window) {
        return
    }
    defer shutdown_imgui()

    // opengl
    glViewport(0, 0, 1080, 720)
    glClearColor(0, 0, 0, 1)

    show_demo_window := true

    while !glfwWindowShouldClose(window) {
        glfwPollEvents()
        glClear(GL_COLOR_BUFFER_BIT)

        //
        begin_frame()

        if show_demo_window then
            igShowDemoWindow(&show_demo_window)

        end_frame()

        // present image
        glfwSwapBuffers(window)
    }
}

begin_frame :: () {
    ImGui_ImplOpenGL3_NewFrame()
    ImGui_ImplGlfw_NewFrame()
    igNewFrame()
}

end_frame :: () {
    io := igGetIO()

    // rendering
    igEndFrame()
    igRender()
    ImGui_ImplOpenGL3_RenderDrawData(igGetDrawData())

    if @bin_and(io.ConfigFlags, i32(ImGuiConfigFlags_.ImGuiConfigFlags_ViewportsEnable)) != 0 {
        backup_current_context := glfwGetCurrentContext()
        igUpdatePlatformWindows()
        igRenderPlatformWindowsDefault()
        glfwMakeContextCurrent(backup_current_context)
    }
}

init_imgui :: (window: &GLFWwindow) -> bool {
    context := igCreateContext(null)

    if context == null {
        io.println("[ERROR] igCreateContext failed")
        return false
    }

    use ImGuiConfigFlags_
    imgui_io := igGetIO()
    imgui_io.ConfigFlags = @bin_or(imgui_io.ConfigFlags,
        i32(ImGuiConfigFlags_DockingEnable),
        i32(ImGuiConfigFlags_ViewportsEnable))

    igStyleColorsDark(null)

    if @bin_and(imgui_io.ConfigFlags, i32(ImGuiConfigFlags_ViewportsEnable)) != 0 {
        style := igGetStyle()
        style.WindowRounding = 0.0
        style.Colors[int(ImGuiCol_.ImGuiCol_WindowBg)].w = 1.0
    }

    //
    if !ImGui_ImplGlfw_InitForOpenGL(window, true) {
        io.println("[ERROR] ImGui_ImplGlfw_InitForOpenGL failed")
        return false
    }
    if !ImGui_ImplOpenGL3_Init("#version 130") {
        io.println("[ERROR] ImGui_ImplOpenGL3_Init failed")
        return false
    }

    return true
}

shutdown_imgui :: () {
    ImGui_ImplOpenGL3_Shutdown()
    ImGui_ImplGlfw_Shutdown()
    igDestroyContext(null)
}