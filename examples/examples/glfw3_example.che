use import std.mem.allocator
use import std.string
use import std.array
use import std.math
io :: import std.io
C  :: import std.c

use import glfw.glfw3
use import opengl.opengl
use import opengl.constants
use import opengl.types
use import opengl.functions


imgui :: import imgui.imgui_binding
// use import imgui.cimgui_binding
// use import imgui.cimgui_glfw_binding
// use import imgui.cimgui_opengl3_binding

#export_scope

vec2 :: Vector2[float]
vec3 :: Vector3[float]
vec4 :: Vector4[float]

for_extension_vec4 :: (vec: ref vec4, code: Code) #for {
    { #label _block_all
        { #label _block_x
            it_index := 0
            it := ref vec.x
            @insert(code, _continue={break _block_x}, _break={break _block_all})
        }
        { #label _block_y
            it_index := 1
            it := ref vec.y
            @insert(code, _continue={break _block_y}, _break={break _block_all})
        }
        { #label _block_z
            it_index := 2
            it := ref vec.z
            @insert(code, _continue={break _block_z}, _break={break _block_all})
        }
        { #label _block_w
            it_index := 3
            it := ref vec.w
            @insert(code, _continue={break _block_w}, _break={break _block_all})
        }
    }
}

gladLoadGL :: () -> i32;

onKeyDown :: (window: &GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) {

}

onResize :: (window: &GLFWwindow, w: i32, h: i32) {
    glViewport(0, 0, w, h)
}

glfw_error_callback :: (error: i32, description: c_string) {
    C.printf("Glfw Error %d: %s\n", error, description)
}

gl_check_errors :: () {
    loop {
        err := glGetError()
        if int(err) == int(GL_NO_ERROR) then break
        io.printfln("[OpenGL] Error: {}", err)
    }
}

igListBoxStringArray :: (label: c_string, current_index: &i32, arr: ref Array[String]) -> bool {
    array_string_getter :: (data: &void, idx: i32, out_text: &c_string) -> bool {
        arr := ref <<cast(&Array[String]) data
        if idx < 0 or int(idx) >= arr.get_length() {
            return false
        }

        <<out_text = arr.access(idx).as_cstring()

        return true
    }

    if arr.get_length() == 0 {
        return false
    }

    return imgui.ListBoxFnPtr(label, current_index, array_string_getter, cast &arr, cast arr.get_length())
}

Main :: () {
    glfwSetErrorCallback(glfw_error_callback)

    if !glfwInit() {
        io.println("Failed to initialize GLFW")
        return
    }
    defer glfwTerminate()

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3)

    window := glfwCreateWindow(1280, 720, "Hello World", null, null)
    if window == null {
        io.println("Failed to create window")
        return
    }
    defer glfwDestroyWindow(window)

    glfwMakeContextCurrent(window)
    glfwSwapInterval(1)
    if gladLoadGL() != 1 {
        return
    }

    glfwSetKeyCallback(window, onKeyDown)
    glfwSetWindowSizeCallback(window, onResize)

    // imgui setup
    if !init_imgui(window) {
        return
    }
    defer shutdown_imgui()

    // opengl
    glViewport(0, 0, 1080, 720)

    clear_color := vec4(1, 0, 1, 1)

    strings := Array[String].create()
    strings.add(String.from_string("Hello"))
    strings.add(String.from_string("World"))
    strings_selected := 0i32

    show_demo_window := false

    buff := alloc_n(char8, 256)
    C.memset(buff.data, 0, cast buff.length)
    defer free_n(buff)

    while !glfwWindowShouldClose(window) {
        glfwPollEvents()
        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w)
        glClear(GL_COLOR_BUFFER_BIT)

        //
        begin_frame()

        {
            open := true
            imgui.Begin("Settings", &open, cast imgui.ImGuiWindowFlags_.None)

            imgui.ColorPicker3("clear color", cast(&float)&clear_color, 0)
            imgui.Separator()
            
            for component : clear_color {
                imgui.PushIDInt(i32(it_index))
                imgui.InputFloat("##", &component)
                imgui.PopID()
            }

            imgui.Separator()
            imgui.InputText("String to add", buff.data, cast buff.length)
            if imgui.SmallButton("Add String") {
                strings.add(String.from_cstring(buff.data))
                buff[0] = cast 0
            }
            imgui.Separator()

            igListBoxStringArray("strings", &strings_selected, strings)
            imgui.End()
        }

        if show_demo_window then
            imgui.ShowDemoWindow(&show_demo_window)

        end_frame()

        // present image
        glfwSwapBuffers(window)
    }
}

begin_frame :: () {
    imgui.ImGui_ImplOpenGL3_NewFrame()
    imgui.ImGui_ImplGlfw_NewFrame()
    imgui.NewFrame()
}

end_frame :: () {
    io := imgui.GetIO()

    // rendering
    imgui.EndFrame()
    imgui.Render()
    imgui.ImGui_ImplOpenGL3_RenderDrawData(imgui.GetDrawData())
}

init_imgui :: (window: &GLFWwindow) -> bool {
    context := imgui.CreateContext(null)

    if context == null {
        io.println("[ERROR] imgui.CreateContext failed")
        return false
    }

    imgui.StyleColorsDark(null)

    //
    if !imgui.ImGui_ImplGlfw_InitForOpenGL(window, true) {
        io.println("[ERROR] imgui.ImGui_ImplGlfw_InitForOpenGL failed")
        return false
    }
    if !imgui.ImGui_ImplOpenGL3_Init("#version 130") {
        io.println("[ERROR] imgui.ImGui_ImplOpenGL3_Init failed")
        return false
    }

    return true
}

shutdown_imgui :: () {
    imgui.ImGui_ImplOpenGL3_Shutdown()
    imgui.ImGui_ImplGlfw_Shutdown()
    imgui.DestroyContext(null)
}