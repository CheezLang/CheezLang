// #load("tests/language/match")
#load("std:io/io")
#load("../libraries/lua/lua.che")
#load("../libraries/lua/lauxlib.che")
#load("../libraries/lua/lualib.che")

check_lua :: (L: &lua_State, r: i32) -> bool {
    if r != LUA_OK {
        errormsg := lua_tostring(L, -1)
        printf("[LUA ERROR] {}`n", errormsg)
        return false
    }

    return true
}

lua_HostFunction :: (L: &lua_State) -> i32 {
    a := lua_tonumber(L, 1)
    b := lua_tonumber(L, 2)
    printf("[CHEEZ] HostFunction({}, {}) has been called`n", (a, b))
    c := a * b
    lua_pushnumber(L, c)
    return 1
}

Main :: () {
    L := luaL_newstate()
    luaL_openlibs(L)

    lua_register(L, "HostFunction", lua_HostFunction)

    if check_lua(L, luaL_dofile(L, "test.lua")) {
        lua_getglobal(L, "DoAThing")
        if lua_isfunction(L, -1) {
            lua_pushnumber(L, 5)
            lua_pushnumber(L, 6)

            if check_lua(L, lua_pcall(L, 2, 1, 0)) {
                result := lua_tonumber(L, -1)
                printf("[CHEEZ] got {}`n", result)
            }
        }
    }

    lua_close(L)
}