#load("value")
#load("common")

Chunk :: struct {
    code: Array(u8)
    lines: Array(int)
    constants: Array(Value)
}

impl Chunk {
    create :: () -> Chunk {
        return Chunk(
            code        = Array(u8).create()
            lines       = Array(int).create()
            constants   = Array(Value).create()
        )
    }

    dispose :: (ref Self) {
        code.dispose()
        lines.dispose()
        constants.dispose()
    }

    write :: (ref Self, byte: u8, line: int) {
        code.add(byte)
        lines.add(line)
    }

    add_constant :: (ref Self, value: Value) {
        // gc
        // push(value)
        constants.add(value)
        // gc
        // pop()
    }
}

OpCode :: enum {
    Constant
    Nil
    True
    False
    Pop
    GetLocal
    SetLocal
    GetGlobal
    DefineGlobal
    SetGlobal
    GetUpvalue
    SetUpvalue
    GetProperty
    SetProperty
    GetSuper
    Equal
    Greater
    Less
    Add
    Subtract
    Multiply
    Divide
    Not
    Negate
    Print
    Jump
    JumpIfFalse
    Loop
    Call
    Invoke
    Super
    Closure
    CloseUpvalue
    Return
    Class
    Inherit
    Method
}
