use import compiler
use import std.array
use import std.string
use import std.io.file
use import std.os.windows_functions
io :: import std.io

to_ascii_strings :: (argv: ^^u16, argc: int) -> Array[String] {
    array := Array[String].create(argc)
    for i in0..argc {
        str := String.empty()
        while k := 0, argv[i][k] != 0, k += 1 {
            str += char(argv[i][k])
        }

        array.add(str)
    }
    return array
}

get_cmd_args :: () -> Array[String] {
    cmdLineArgs := GetCommandLineW()
    count := 0i32
    args := CommandLineToArgvW(cmdLineArgs, ^count)
    return to_ascii_strings(args, int(count))
}

repl :: () -> int {
    io.println("Repl not implemented yet.")
    return -1
}

run_file :: (file_name: &String) -> int {
    return match load_file(file_name.slice()) {
        Ok($text) -> {
            use InterpretResult
            result := match interpret(text.slice()) {
                Ok           -> 0
                CompileError -> 65
                RuntimeError -> 70
            }

            result
        }

        Err($msg) -> {
            io.printfln("[RUN FILE] {}", msg)
            60
        }
    }
}

Main :: () -> int {
    args := get_cmd_args()

    return match args.get_length() {
        1 -> repl()
        2 -> run_file(args[1])
        $_-> {
            io.println("Usage: clox [path]")
            0
        }
    }
}