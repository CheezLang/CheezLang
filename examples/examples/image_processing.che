use import std.math
use import std.mem.allocator
use import std.iterator
io :: import std.io
C  :: import std.c

use import olc_pge.pixel_game_engine
use import olc_pge.pixel
use import opencv.opencv

image_width   : int : 320
image_height  : int : 240
num_images_x  : int : 3
num_images_y  : int : 1
border_width  : int : 10

Color :: (x: double, y: double, z: double)

impl Color {
    add :: (a: Color, b: Color) -> Color #operator("+") {
        return (a.x + b.x, a.y + b.y, a.z + b.z)
    }

    sub :: (a: Color, b: Color) -> Color #operator("-") {
        return (a.x - b.x, a.y - b.y, a.z - b.z)
    }

    mul :: (a: Color, b: Color) -> Color #operator("*") {
        return (a.x * b.x, a.y * b.y, a.z * b.z)
    }
    
    mul_s :: (a: Color, b: double) -> Color #operator("*") {
        return (a.x * b, a.y * b, a.z * b)
    }
    
    div :: (a: Color, b: Color) -> Color #operator("/") {
        return (a.x / b.x, a.y / b.y, a.z / b.z)
    }
    
    div_s :: (a: Color, b: double) -> Color #operator("/") {
        return (a.x / b, a.y / b, a.z / b)
    }
    
    neg :: (a: Color) -> Color #operator("-") {
        return (-a.x, -a.y, -a.z)
    }
}

absolute :: (self: Color) -> Color {
    return (abs(self.x), abs(self.y), abs(self.z))
}

Frame :: struct {
    pixels: [image_width * image_height]Color
}

impl Frame {
    get :: (ref Self, x: int, y: int) -> double {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return 0
        }

        p := pixels[x + y * image_width]
        return (p.x + p.y + p.z) * 0.3333333333
    }

    get_rgb :: (ref Self, x: int, y: int) -> Color {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return (0, 0, 0)
        }

        return pixels[x + y * image_width]
    }

    set :: (ref Self, x: int, y: int, value: double) {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return
        }

        pixels[x + y * image_width] = (value, value, value)
    }

    set_rgb :: (ref Self, x: int, y: int, value: Color) {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return
        }

        pixels[x + y * image_width] = value
    }

    copy_to :: (ref Self, target: ref Frame) {
        C.memcpy(cast &target.pixels, cast &pixels, cast @sizeof(@typeof(pixels)))
    }
}

ImageProcessingGame :: struct {
    pge     : &PixelGameEngine
    frames  : [num_images_x * num_images_y]Frame
    last_frame : Frame
    capture : &CvCapture
    primer  : bool = false
}

impl Game for ImageProcessingGame {
    on_create :: (ref Self, pge: &PixelGameEngine) -> bool {
        self.pge = pge

        // clear images to black
        for i : 0..num_images_x * num_images_y {
            io.printfln("clearing frame {}", i)
            for x : 0..image_width {
                for y : 0..image_height {
                    frames[i].set(x, y, 0.5)
                }
            }
        }

        for x : 0..image_width {
            for y : 0..image_height {
                last_frame.set(x, y, 0)
            }
        }

        capture = cvCreateCameraCapture(0)

        if capture == null {
            io.println("Failed to create webcam capture")
            return false
        }

        return true
    }

    on_destroy :: (ref Self) -> bool {
        cvReleaseCapture(&capture)
        return true
    }

    draw_frame :: (ref Self, slot_x: int, slot_y: int, frame: ref Frame) {
        for x : 0..image_width {
            for y : 0..image_height {
                col := frame.get_rgb(x, y)

                offset_x := (slot_x + 1) * border_width + slot_x * image_width
                offset_y := (slot_y + 1) * border_width + slot_y * image_height

                pge.draw(x + offset_x, y + offset_y, Pixel.rgbad(col.x, col.y, col.z))
            }
        }
    }

    capture_webcam :: (ref Self, targetFrame: ref Frame) {
        res := cvQueryFrame(capture)
        if res != null {
            xScale := (cast(double)image_width) / (cast(double)res.width)
            yScale := (cast(double)image_height) / (cast(double)res.height)
            for x : 0i32..res.width {
                for y : 0i32..res.height {
                    index := (x + y * res.width) * 3
                    col := (cast(double) res.imageData[index + 2], cast(double) res.imageData[index + 1], cast(double) res.imageData[index + 0]) / 255.0
                    targetX := cast(int) (cast(double)x) * xScale
                    targetY := cast(int) (cast(double)y) * yScale
                    targetFrame.set_rgb(targetX, targetY, col)
                }
            }
        }
    }

    move_detection :: (ref Self, source_frame: ref Frame, last_frame: ref Frame, target_frame: ref Frame) {
        for x : 0..image_width {
            for y : 0..image_height {
                last := last_frame.get(x, y)
                now := source_frame.get(x, y)
                diff := last - now

                r := if diff > 0 then  diff else 0.0
                g := if diff < 0 then -diff else 0.0
                b := abs(diff)

                // r := if diff > 0 {diff} else {0.0}
                // g := if diff < 0 {-diff} else {0.0}

                target_frame.set_rgb(x, y, (r, g, b))
            }
        }
    }

    temporal_low_pass_filter :: (ref Self, source_frame: ref Frame, target_frame: ref Frame, activity_frame: ref Frame) {
        for x : 0..image_width {
            for y : 0..image_height {
                dl := source_frame.get_rgb(x, y) - activity_frame.get_rgb(x, y)
                dl *= 0.2
                activity_frame.set_rgb(x, y, dl + activity_frame.get_rgb(x, y))
                target_frame.set_rgb(x, y, absolute(source_frame.get_rgb(x, y) - activity_frame.get_rgb(x, y)))
            }
        }
    }

    dilation_erosion :: (ref Self, input: ref Frame, last: ref Frame, activity: ref Frame, output: ref Frame) {
        steps := 5.0
        // activity
        for x : 0..image_width {
            for y : 0..image_height {
                i := input.get(x, y)
                k := (cast(float) (cast(int)i * steps)) / steps
                activity.set(x, y, k)
            }
        }

        // dilation
        for n : 1..1 {
            activity.copy_to(output)
            for x : 0..image_width {
                for y : 0..image_height {
                    if activity.get(x, y) > 0.5 {
                        output.set(x    , y    , 1)
                        output.set(x - 1, y    , 1)
                        output.set(x + 1, y    , 1)
                        output.set(x    , y - 1, 1)
                        output.set(x    , y + 1, 1)
                    }
                }
            }
        }

        // erorios
        for n : 1..3 {
            activity.copy_to(output)

            for x : 0..image_width {
                for y : 0..image_height {

                    sum :=   activity.get(x - 1, y) +
                                activity.get(x + 1, y) +
                                activity.get(x, y + 1) +
                                activity.get(x, y - 1)

                    if activity.get(x, y) >= 0.5 and sum >= 2 {
                        output.set(x    , y    , 0)
                        // output.set(x - 1, y    , 0)
                        // output.set(x + 1, y    , 0)
                        // output.set(x    , y - 1, 0)
                        // output.set(x    , y + 1, 0)
                    }
                }
            }

            // output.copy_to(activity)
        }
    }

    adaptive_threshold :: (input: ref Frame, output: ref Frame) {
        adaptive_bias := 1.0

        for x : 0..image_width {
            for y : 0..image_height {
                region_sum := 0.0
                for(inclusive=true) xx : (x - 2)..(x + 2) {
                    for(inclusive=true) yy : (y - 2)..(y + 2) {
                        region_sum += input.get(xx, yy)
                    }
                }
                region_sum /= 25.0
                output.set(x, y, if input.get(x, y) > (region_sum * adaptive_bias) {1.0} else {0.0})
            }
        }
    }

    on_update :: (ref Self, dt: float) -> bool {
        pge.clear(Pixel.rgba(0, 0, 100))

        webcam : ref Frame = frames[0]
        target1 : ref Frame = frames[1]
        target2 : ref Frame = frames[2]

        capture_webcam(webcam)

        if !primer {
            // webcam.copy_to(target3)
            primer = true
        }

        // move_detection(webcam, last_frame, target1)
        // dilation_erosion(webcam, last_frame, target4, target5)
        // temporal_low_pass_filter(webcam, target1, target2)
        adaptive_threshold(webcam, target1)

        webcam.copy_to(last_frame)

        for x : 0..num_images_x {
            for y : 0..num_images_y {
                draw_frame(x, y, frames[x + y * num_images_x])
            }
        }

        return true
    }
}

Main :: () {
    ipg : Game = ref <<alloc(ImageProcessingGame)
    engine := PixelGameEngine.create(
        ipg,
        num_images_x * image_width + (num_images_x + 1) * border_width,
        num_images_y * image_height + (num_images_y + 1) * border_width,
        2, 2)
    engine.start()
}