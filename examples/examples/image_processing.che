#load("std:io/io")
#load("std:iterator")

#load("olc_pge/pixel_game_engine.che")
// #load("../libraries/escapi/escapi")
#load("../libraries/opencv/opencv")

let const image_width   : int = 320
let const image_height  : int = 240
let const num_images_x  : int = 3
let const num_images_y  : int = 1
let const border_width  : int = 10

typedef Color = (x: double, y: double, z: double)

impl Color {
    fn add(a: ref Color, b: ref Color) -> Color #operator("+") {
        return (a.x + b.x, a.y + b.y, a.z + b.z)
    }

    fn sub(a: ref Color, b: ref Color) -> Color #operator("-") {
        return (a.x - b.x, a.y - b.y, a.z - b.z)
    }

    fn mul(a: ref Color, b: ref Color) -> Color #operator("*") {
        return (a.x * b.x, a.y * b.y, a.z * b.z)
    }
    
    fn mul_s(a: ref Color, b: double) -> Color #operator("*") {
        return (a.x * b, a.y * b, a.z * b)
    }
    
    fn div(a: ref Color, b: ref Color) -> Color #operator("/") {
        return (a.x / b.x, a.y / b.y, a.z / b.z)
    }
    
    fn div_s(a: ref Color, b: double) -> Color #operator("/") {
        return (a.x / b, a.y / b, a.z / b)
    }
    
    fn neg(a: ref Color) -> Color #operator("-") {
        return (-a.x, -a.y, -a.z)
    }
}

fn absolute(self: ref Color) -> Color {
    return (abs(self.x), abs(self.y), abs(self.z))
}

struct Frame {
    pixels: [image_width * image_height]Color
}

impl Frame {
    fn get(ref Self, x: int, y: int) -> double {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return 0
        }

        let p = pixels[x + y * image_width]
        return (p.x + p.y + p.z) * 0.3333333333
    }

    fn get_rgb(ref Self, x: int, y: int) -> Color {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return (0, 0, 0)
        }

        return pixels[x + y * image_width]
    }

    fn set(ref Self, x: int, y: int, value: double) {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return
        }

        pixels[x + y * image_width] = (value, value, value)
    }

    fn set_rgb(ref Self, x: int, y: int, value: Color) {
        if x < 0 or y < 0 or x >= image_width or y >= image_height {
            return
        }

        pixels[x + y * image_width] = value
    }

    fn copy_to(ref Self, target: ref Frame) {
        c_memcpy(cast &target.pixels, cast &pixels, cast @sizeof(@typeof(pixels)))
    }
}

struct ImageProcessingGame {
    pge     : &PixelGameEngine
    frames  : [num_images_x * num_images_y]Frame
    last_frame : Frame
    capture : &CvCapture
    primer  : bool = false
}

impl Game for ImageProcessingGame {
    fn on_create(ref Self, pge: &PixelGameEngine) -> bool {
        self.pge = pge

        // clear images to black
        foreach! i in range(0, num_images_x * num_images_y - 1) {
            printfln("clearing frame {}", [i])
            foreach! x in range(0, image_width - 1) {
                foreach! y in range(0, image_height - 1) {
                    frames[i].set(x, y, 0.5)
                }
            }
        }

        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                last_frame.set(x, y, 0)
            }
        }

        capture = cvCreateCameraCapture(0)

        if capture == null {
            return false
        }

        return true
    }

    fn on_destroy(ref Self) -> bool {
        cvReleaseCapture(&capture)
        return true
    }

    fn draw_frame(ref Self, slot_x: int, slot_y: int, frame: ref Frame) {
        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                let col = frame.get_rgb(x, y)

                let offset_x = (slot_x + 1) * border_width + slot_x * image_width
                let offset_y = (slot_y + 1) * border_width + slot_y * image_height

                pge.draw(x + offset_x, y + offset_y, Pixel::rgbad(col.x, col.y, col.z))
            }
        }
    }

    fn capture_webcam(ref Self, targetFrame: ref Frame) {
        let res = cvQueryFrame(capture)
        if res != null {
            let xScale = (cast(double)image_width) / (cast(double)res.width)
            let yScale = (cast(double)image_height) / (cast(double)res.height)
            foreach! x in range(0, res.width - 1) {
                foreach! y in range(0, res.height - 1) {
                    let index = (x + y * res.width) * 3
                    let col = (cast(double) res.imageData[index + 2], cast(double) res.imageData[index + 1], cast(double) res.imageData[index + 0]) / 255.0
                    let targetX = cast(int) (cast(double)x) * xScale
                    let targetY = cast(int) (cast(double)y) * yScale
                    targetFrame.set_rgb(targetX, targetY, col)
                }
            }
        }
    }

    fn move_detection(ref Self, source_frame: ref Frame, last_frame: ref Frame, target_frame: ref Frame) {
        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                let last = last_frame.get(x, y)
                let now = source_frame.get(x, y)
                let diff = last - now

                // let r = do! diff if _ > 0 else 0
                // let g = do! -diff if _ > 0 else 0

                let r = if diff > 0 {diff} else {0.0}
                let g = if diff < 0 {-diff} else {0.0}
                let b = abs(diff)

                target_frame.set_rgb(x, y, (r, g, b))
            }
        }
    }

    fn temporal_low_pass_filter(ref Self, source_frame: ref Frame, target_frame: ref Frame, activity_frame: ref Frame) {
        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                let dl = source_frame.get_rgb(x, y) - activity_frame.get_rgb(x, y)
                dl *= 0.2
                activity_frame.set_rgb(x, y, dl + activity_frame.get_rgb(x, y))
                target_frame.set_rgb(x, y, absolute(source_frame.get_rgb(x, y) - activity_frame.get_rgb(x, y)))
            }
        }
    }

    fn dilation_erosion(ref Self, input: ref Frame, last: ref Frame, activity: ref Frame, output: ref Frame) {
        let steps = 5.0
        // activity
        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                let i = input.get(x, y)
                let k = (cast(float) (cast(int)i * steps)) / steps
                activity.set(x, y, k)
            }
        }

        // dilation
        foreach! n in range(1, 1) {
            activity.copy_to(output)
            foreach! x in range(0, image_width - 1) {
                foreach! y in range(0, image_height - 1) {
                    if activity.get(x, y) > 0.5 {
                        output.set(x    , y    , 1)
                        output.set(x - 1, y    , 1)
                        output.set(x + 1, y    , 1)
                        output.set(x    , y - 1, 1)
                        output.set(x    , y + 1, 1)
                    }
                }
            }
        }

        // erorios
        foreach! n in range(1, 3) {
            activity.copy_to(output)

            foreach! x in range(0, image_width - 1) {
                foreach! y in range(0, image_height - 1) {

                    let sum =   activity.get(x - 1, y) +
                                activity.get(x + 1, y) +
                                activity.get(x, y + 1) +
                                activity.get(x, y - 1)

                    if activity.get(x, y) >= 0.5 and sum >= 2 {
                        output.set(x    , y    , 0)
                        // output.set(x - 1, y    , 0)
                        // output.set(x + 1, y    , 0)
                        // output.set(x    , y - 1, 0)
                        // output.set(x    , y + 1, 0)
                    }
                }
            }

            // output.copy_to(activity)
        }
    }

    fn adaptive_threshold(input: ref Frame, output: ref Frame) {
        let adaptive_bias = 1.0

        foreach! x in range(0, image_width - 1) {
            foreach! y in range(0, image_height - 1) {
                let region_sum = 0.0
                foreach! xx in range(x - 2, x + 2) {
                    foreach! yy in range(y - 2, y + 2) {
                        region_sum += input.get(xx, yy)
                    }
                }
                region_sum /= 25.0
                output.set(x, y, if input.get(x, y) > (region_sum * adaptive_bias) {1.0} else {0.0})
            }
        }
    }

    fn on_update(ref Self, dt: float) -> bool {
        pge.clear(Pixel::rgba(0, 0, 100))

        let webcam: ref Frame = frames[0]
        let target1: ref Frame = frames[1]
        let target2: ref Frame = frames[2]

        capture_webcam(webcam)

        if !primer {
            // webcam.copy_to(target3)
            primer = true
        }

        // move_detection(webcam, last_frame, target1)
        // dilation_erosion(webcam, last_frame, target4, target5)
        // temporal_low_pass_filter(webcam, target1, target2)
        adaptive_threshold(webcam, target1)

        webcam.copy_to(last_frame)

        foreach! x in range(0, num_images_x - 1) {
            foreach! y in range(0, num_images_y - 1) {
                draw_frame(x, y, frames[x + y * num_images_x])
            }
        }

        return true
    }
}

fn Main() {
    let ipg: Game = ref <<alloc(ImageProcessingGame)
    let engine = PixelGameEngine::create(
        ipg,
        num_images_x * image_width + (num_images_x + 1) * border_width,
        num_images_y * image_height + (num_images_y + 1) * border_width,
        2, 2)
    engine.start()
}