functions : []fn(double) -> Option(Complex) = [ f1, f2, f3, f4, f5, f6, f7, f8 ]

C :: (r: double, i: double = 0.0) -> Complex {
    return Complex(r, i)
}

f1 :: (x: double) -> Option(Complex) {
    return Some(C(x, -x))
}

f2 :: (x: double) -> Option(Complex) {
    if abs(x) < 0.001 {
        return None
    }

    result := (Complex.poww(C(-1), x) * 2.0 + 3.0 * x) / x
    return Some(result)
}

f3 :: (n: double) -> Option(Complex) {
    x := 5.0
    t := Complex.poww(C(x), n) * n
    b := t + 1.0

    if b.r == 0 and b.i == 0 {
        return None
    }
    return Some(t / b)
}

f4 :: (x: double) -> Option(Complex) {
    if x == 0 {
        return None
    }

    return Some(C(1/x))
}

f5 :: (x: double) -> Option(Complex) {
    return Some(C(sin(x), cos(x)))
}

f6 :: (x: double) -> Option(Complex) {
    return Some(Complex.poww(C(-1), x))
}

f7 :: (x: double) -> Option(Complex) {
    return Some(C(x*x))
}

f8 :: (x: double) -> Option(Complex) {
    return Some(Complex.poww(C(2.7), x))
}