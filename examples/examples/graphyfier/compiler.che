use import evaluator

use import std.mem.allocator
use import std.array
use import std.string
use import std.profiling
io :: import std.io
C :: import std.c

use import compiler.string_database
use import compiler.lexer
use import compiler.error_handler

#export_scope

get_precedence :: (op: OpCode) -> int {
    return match op {
        use OpCode

        Grp -> 0
        Neg -> 1
        Sin -> 1
        Cos -> 1
        Log -> 1
        Pow -> 2
        Mul -> 3
        Div -> 3
        Add -> 4
        Sub -> 4
        $_ -> {
            @assert(false)
            -1
        }
    }
}

impl TextProvider for string {
    get_text :: (ref Self, filename: string) -> string {
        return self
    }
}

compile :: (expr: string, var_name_allocator: &Allocator) -> Option[Array[OpCode]] {
    res := Array[OpCode].create()

    error_handler := ConsoleErrorHandler.new(null)
    string_db := StringDatabase.new()
    lexer := Lexer.from_raw_string(expr, string_db)
    error_handler.text_provider = &lexer

    op_stack := Array[OpCode].create()

    last_was_expression := false

    while true {
        tok := lexer.next_token()

        match tok.ttype {
            .EOF     -> break
            .NewLine -> break
        }

        if last_was_expression {
            last_was_expression = false
            match tok.ttype {
                .Plus -> {
                    p := get_precedence(OpCode.Add)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) <= p {
                        if int(op_stack.peek_last()) == int(OpCode.Grp) then break
                        res.add(op_stack.pop())
                    }
                    op_stack.push(OpCode.Add)
                }
                .Minus -> {
                    p := get_precedence(OpCode.Sub)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) <= p {
                        if int(op_stack.peek_last()) == int(OpCode.Grp) then break
                        res.add(op_stack.pop())
                    }
                    op_stack.push(OpCode.Sub)
                }
                .Asterisk -> {
                    p := get_precedence(OpCode.Mul)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) <= p {
                        if int(op_stack.peek_last()) == int(OpCode.Grp) then break
                        res.add(op_stack.pop())
                    }
                    op_stack.push(OpCode.Mul)
                }
                .ForwardSlash -> {
                    p := get_precedence(OpCode.Div)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) <= p {
                        if int(op_stack.peek_last()) == int(OpCode.Grp) then break
                        res.add(op_stack.pop())
                    }
                    op_stack.push(OpCode.Div)
                }
                .Caret -> {
                    p := get_precedence(OpCode.Pow)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) <= p {
                        if int(op_stack.peek_last()) == int(OpCode.Grp) then break
                        res.add(op_stack.pop())
                    }
                    op_stack.push(OpCode.Pow)
                }
                .ClosingParen -> {
                    p := get_precedence(OpCode.Grp)
                    while op_stack.get_length() > 0 and get_precedence(op_stack.peek_last()) > p {
                        res.add(op_stack.pop())
                    }
                    if op_stack.get_length() == 0 {
                        io.println("[ERROR] Mismatched parenthesis")
                        return None
                    }
                    op_stack.pop()
                    last_was_expression = true
                }

                $_ -> {
                    io.printfln("[ERROR] {}: Unexpected token '{}'", (tok.location, tok.ttype))
                    return None
                }
            }
        } else {
            last_was_expression = true

            match tok.ttype {
                .NumberLiteral -> {
                    is_real := match tok.suffix {
                        Some($s) -> {
                            if streq(s, "i") {
                                false
                            } else {
                                io.printfln("[ERROR] {}: Invalid suffix '{}'", (tok.location, s))
                                return None
                            }
                        }
                        None -> true
                    }

                    match tok.data {
                        .Integer($v) -> {
                            if is_real then
                                res.add(OpCode.Real(double(v)))
                            else
                                res.add(OpCode.Im(double(v)))
                        }

                        .Double($v) -> {
                            if is_real then
                                res.add(OpCode.Real(v))
                            else
                                res.add(OpCode.Im(v))
                        }

                        $_ -> @assert(false)
                    }
                }

                .Identifier -> {
                    match tok.data {
                        .String($v) -> {
                            if streq(v, "i") {
                                res.add(OpCode.Im(1.0))
                            } else if streq(v, "sin") {
                                op_stack.push(OpCode.Sin)
                                last_was_expression = false
                            } else if streq(v, "cos") {
                                op_stack.push(OpCode.Cos)
                                last_was_expression = false
                            } else if streq(v, "ln") {
                                op_stack.push(OpCode.Log)
                                last_was_expression = false
                            } else {
                                name_copy := alloc_n(u8, cast v.bytes.length, var_name_allocator)
                                C.memcpy(name_copy.data, v.bytes.data, cast v.bytes.length)
                                res.add(OpCode.Var(string(name_copy.data, name_copy.length)))
                            }
                        }

                        $_ -> @assert(false)
                    }
                }

                .Minus -> {
                    op_stack.push(OpCode.Neg)
                    last_was_expression = false
                }

                .OpenParen -> {
                    op_stack.push(OpCode.Grp)
                    last_was_expression = false
                }

                $_ -> {
                    io.printfln("[ERROR] {}: Unexpected token '{}'", (tok.location, tok.ttype))
                    return None
                }
            }
        }
    }

    while op_stack.get_length() > 0 {
        if int(op_stack.peek_last()) == int(OpCode.Grp) {
            io.println("[ERROR] Mismatched parenthesis")
            return None
        }
        res.add(op_stack.pop())
    }

    if res.get_length() == 0 {
        io.println("[ERROR] Empty input")
        return None
    }

    if !last_was_expression {
        io.println("[ERROR] Invalid expression")
        return None
    }

    return Some(res)
}