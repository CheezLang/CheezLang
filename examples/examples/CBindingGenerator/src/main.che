use import std.printable
use import std.string
use import std.util
io  :: import std.io
C   :: import std.c
fs  :: import std.io.fs
fmt :: import std.fmt

use import clap.clap
use import libclang.clang

debug_print_all :: false

impl Printable for CXString {
    print :: (&Self, str: &String, format: string) {
        c_str := clang_getCStringHelper(&self)
        str.appendf("{}", string(cast c_str, cast C.strlen(c_str)))
    }
}

impl CXString {
    get_length :: (&Self) -> int {
        return cast C.strlen(clang_getCStringHelper(&self))
    }
}

impl Drop for CXString {
    drop :: (&Self) {
        clang_disposeStringHelper(&self)
    }
}

GenOptions :: struct {
    input        : String
    out_path     : String
    name         : String
    no_structs   := false
    no_enums     := false
    no_functions := false
    no_includes  := false
}

GenContext :: struct {
    cheez_file              : String
    c_file                  : String
    buffer                  : String
    requires_wrapper        : bool   = false
    param_index             : int    = 0
    return_type_is_struct   := false
    options                 : &GenOptions
    is_cpp_struct           := false
    has_members             := false
    longest_member_name     := 0
}

Main :: () {
    args := get_cmd_args()
    options := parse_arguments(GenOptions, args.sliceF(1))

    if options == null {
        io.println(get_help_message(@type_info(GenOptions)))
        return
    }
    options.input.append_char(char(0))

    cx_index := clang_createIndex(0, 0)
    if cx_index == null {
        io.println("[ERROR] Failed to clang index")
        return
    }
    defer clang_disposeIndex(cx_index)

    // cmd_line_args_for_clang := []

    clang_parseTranslationUnit_options := @bin_or(
        //int(CXTranslationUnit_Flags.Incomplete),
        // int(CXTranslationUnit_Flags.SkipFunctionBodies),
        // int(CXTranslationUnit_Flags.KeepGoing),
        // int(CXTranslationUnit_Flags.SingleFileParse),
        // int(CXTranslationUnit_Flags.IncludeAttributedTypes),
        // int(CXTranslationUnit_Flags.VisitImplicitAttributes),
        0
    )

    io.printfln("reading file {} ...", options.input.slice())
    cx_translation_unit := clang_parseTranslationUnit(
        cx_index,
        cast options.input.get_raw(),
        // cast cmd_line_args_for_clang.data, cast cmd_line_args_for_clang.length,
        null, 0,
        null, 0,
        cast clang_parseTranslationUnit_options)
    if cx_translation_unit == null {
        io.println("[ERROR] Failed to parse header file")
        return
    }
    defer clang_disposeTranslationUnit(cx_translation_unit)

    cursor : CXCursor = default
    clang_getTranslationUnitCursor(&cursor, cx_translation_unit)

    ctx := GenContext(
        cheez_file = String.empty()
        c_file     = String.empty()
        buffer     = String.empty()
        options    = <<options
    )

    {
        // std::string header(header_file_path);
        // size_t last_slash = header.find_last_of('/');
        // size_t last_backslash = header.find_last_of('\\');
        // size_t last = -1;
        // if (last_slash == std::string::npos) last = last_backslash;
        // if (last_backslash == std::string::npos) last = last_slash;
        // if (last == std::string::npos) last = 0;
        // else last += 1;
        // std::string header_name = header.substr(last);
        // c_file << "#include \"" << header_name << "\"\n\n";
        ctx.c_file.appendf("#include `"{}`"`n", options.input.sliceL(options.input.get_length() - 1))
    }

    {
        ctx.cheez_file.append_string("#export_scope`n`n")
    }

    visitor :: (c: &CXCursor, parent: &CXCursor, client_data: CXClientData) -> CXChildVisitResult {
        ctx := cast(&GenContext) client_data

        if ctx.options.no_includes and int(c.kind) != int(CXCursorKind.UnexposedDecl) {
            // skip functions from other files
            source_location := clang_getCursorLocation(<<c)
            if clang_Location_isFromMainFile(source_location) == 0 {
                file, line, column, _ := clang_getFileLocation(source_location)
                io.printfln("Skipping ({})`t`t{}`t`tfrom {}:{}:{}",
                    (clang_getCursorKindSpelling(c.kind), clang_getCursorSpelling(c), clang_getFileName(file), line, column))
                return CXChildVisitResult.Continue
            }
        }

        match c.kind {
            _ if debug_print_all -> {
                source_location := clang_getCursorLocation(<<c)
                file, line, column, _ := clang_getFileLocation(source_location)
                io.printfln("[ERROR] Unhandled cursor ({})`t`t'{}'`t`tat {}:{}:{}", (
                        clang_getCursorKindSpelling(c.kind),
                        clang_getCursorSpelling(c),
                        clang_getFileName(file),
                        line, column
                    ))
            }

            CXCursorKind.FunctionDecl -> emit_function_decl(<<ctx, c)
            CXCursorKind.TypedefDecl  -> emit_typedef_decl(<<ctx, c)
            CXCursorKind.StructDecl   -> {
                name := clang_getCursorSpelling(c)
                if name.get_length() != 0 {
                    emit_struct_decl(<<ctx, c, clang_getCursorSpelling(c))
                }
            }
            CXCursorKind.EnumDecl     -> {
                name := clang_getCursorSpelling(c)
                if name.get_length() != 0 {
                    emit_enum_decl(<<ctx, c, clang_getCursorSpelling(c))
                }
            }

            // probably extern "C"
            CXCursorKind.UnexposedDecl -> {
                // ignore for now
                return CXChildVisitResult.Recurse
            }

            CXCursorKind.VarDecl -> {
                // ignore for now
            }

            // ignore c++ stuff
            CXCursorKind.ClassTemplatePartialSpecialization -> {}
            CXCursorKind.UsingDeclaration -> {}
            CXCursorKind.FunctionTemplate -> {}
            CXCursorKind.ClassTemplate -> {}
            CXCursorKind.Namespace -> {}

            _ -> {
                source_location := clang_getCursorLocation(<<c)
                file, line, column, _ := clang_getFileLocation(source_location)
                io.printfln("[ERROR] Unhandled cursor ({})`t`t'{}'`t`tat {}:{}:{}", (
                        clang_getCursorKindSpelling(c.kind),
                        clang_getCursorSpelling(c),
                        clang_getFileName(file),
                        line, column
                    ))
            }
        }

        return CXChildVisitResult.Continue
    }
    clang_visitChildrenHelper(&cursor, visitor, &ctx)

    {
        fs.create_directory(options.out_path.slice())

        // cheez file
        cheez_file_name := fmt.format("{}/{}.che", [options.out_path.slice(), options.name.slice()]);
        io.printfln("writing file {} ...", cheez_file_name.slice())
        try_with(fs.write_file(cheez_file_name.slice(), ctx.cheez_file.slice()), {
            io.printfln("writing file {} failed", cheez_file_name.slice())
        })

        // c file
        c_file_name := fmt.format("{}/{}.cpp", [options.out_path.slice(), options.name.slice()]);
        io.printfln("writing file {} ...", c_file_name.slice())
        try_with(fs.write_file(c_file_name.slice(), ctx.c_file.slice()), {
            io.printfln("writing file {} failed", cheez_file_name.slice())
        })
    }
}

emit_typedef_decl :: (ctx: &GenContext, cursor: &CXCursor) {
    elo          := clang_getTypedefDeclUnderlyingType(<<cursor)
    actual_type  := clang_Type_getNamedType(elo)
    type_decl    := clang_getTypeDeclaration(actual_type)

    match type_decl.kind {
        CXCursorKind.StructDecl -> {
            struct_name := clang_getCursorSpelling(&type_decl)
            if struct_name.get_length() == 0{
                emit_struct_decl(ctx, &type_decl, clang_getCursorSpelling(cursor))
            }
        }

        CXCursorKind.EnumDecl -> {
            struct_name := clang_getCursorSpelling(&type_decl)
            if struct_name.get_length() == 0{
                emit_enum_decl(ctx, &type_decl, clang_getCursorSpelling(cursor))
            }
        }

        _ -> {
            ctx.cheez_file.appendf("{} :: ", clang_getCursorSpelling(cursor))
            emit_c_type(ctx, elo, false)
            ctx.cheez_file.append_string("`n")
        }
    }
}

emit_struct_decl :: (ctx: &GenContext, cursor: &CXCursor, name: CXString) {
    if ctx.options.no_structs {
        return
    }

    name_c := clang_getCStringHelper(&name)
    name_str := string(cast name_c, cast C.strlen(name_c))

    // if this struct contains any constructors or field with a function type
    // then we assume it is a c++ struct
    // and we will emit an empty struct, but tell the user
    ctx.is_cpp_struct = false
    ctx.longest_member_name = 0
    visit_struct_members(cursor, ctx, {
        member_name := clang_getCursorSpelling(c)
        member_type := clang_getCursorType(c)

        // if name is same as struct name then its a constructor, so skip it
        struct_name := clang_getCursorSpelling(parent)
        struct_name_c := clang_getCStringHelper(&struct_name)
        member_name_c := clang_getCStringHelper(&member_name)
        if C.strcmp(struct_name_c, member_name_c) == 0 or
            int(member_type.kind) == int(CXTypeKind.FunctionProto) or
            int(member_type.kind) == int(CXTypeKind.FunctionNoProto) or
            member_name.get_length() == 0 {
            ctx.is_cpp_struct = true
        } else {
            member_name_len := member_name.get_length()
            if member_name_len > ctx.longest_member_name {
                ctx.longest_member_name = member_name_len
            }
        }
    })

    if ctx.is_cpp_struct {
        source_location := clang_getCursorLocation(<<cursor)
        file, line, column, _ := clang_getFileLocation(source_location)
        io.printfln("Generating temporary struct for '{}' because it is probably a c++ type`t`t`t({}:{}:{}:)", (
            name_str, clang_getFileName(file), line, column
        ))

        ctx.cheez_file.appendf("/*`n{} :: struct #copy ``{`n    // TODO: {}:{}", (name_str, clang_getFileName(file), line))

        ctx.has_members = true
        visit_struct_members(cursor, ctx, {
            member_name := clang_getCursorSpelling(c)
            member_type := clang_getCursorType(c)
            member_name_len := member_name.get_length()

            ctx.cheez_file.appendf("`n    {}", member_name)
            indent(ctx.cheez_file, ctx.longest_member_name - member_name_len)
            ctx.cheez_file.append_string(" : ")
            emit_c_type(ctx, member_type, false, false)
            ctx.cheez_file.append_string(" = default")
        })

        if ctx.has_members then ctx.cheez_file.append_string("`n")
        ctx.cheez_file.appendf("}`n*/`n", ())
    } else {
        ctx.cheez_file.appendf("{} :: struct #copy ``{", name_str)
        
        ctx.has_members = false
        visit_struct_members(cursor, ctx, {
            member_name := clang_getCursorSpelling(c)
            member_type := clang_getCursorType(c)
            member_name_len := member_name.get_length()

            ctx.cheez_file.appendf("`n    {}", member_name)
            indent(ctx.cheez_file, ctx.longest_member_name - member_name_len)
            ctx.cheez_file.append_string(" : ")
            emit_c_type(ctx, member_type, false, false)
            ctx.cheez_file.append_string(" = default")

            ctx.has_members = true
        })

        if ctx.has_members then ctx.cheez_file.append_string("`n")
        ctx.cheez_file.appendf("}`n", ())
    }


}

emit_enum_decl :: (ctx: &GenContext, cursor: &CXCursor, name: CXString) {
    if ctx.options.no_enums {
        return
    }

    {
        ctx.longest_member_name = 0
        visit_enum_members(cursor, ctx, {
            member_name := clang_getCursorSpelling(c)
            member_type := clang_getCursorType(c)

            struct_name := clang_getCursorSpelling(parent)
            struct_name_c := clang_getCStringHelper(&struct_name)
            member_name_c := clang_getCStringHelper(&member_name)

            member_name_len := member_name.get_length()

            if c_string_starts_with(member_name_c, struct_name_c) {
                member_name_len -= struct_name.get_length()
            }

            if member_name_len > ctx.longest_member_name {
                ctx.longest_member_name = member_name_len
            }
        })
    }

    ctx.cheez_file.appendf("{} :: enum #copy #repr(`"C`") #tag_type(", name)
    emit_c_type(ctx, clang_getEnumDeclIntegerType(<<cursor), false)
    ctx.cheez_file.append_string(") {`n")

    visit_enum_members(cursor, ctx, {
        member_name   := clang_getCursorSpelling(c)
        member_name_c := clang_getCStringHelper(&member_name)
        member_type   := clang_getCursorType(c)
        member_value  := clang_getEnumConstantDeclValue(<<c)

        struct_name := clang_getCursorSpelling(parent)
        struct_name_c := clang_getCStringHelper(&struct_name)

        if c_string_starts_with(member_name_c, struct_name_c) {
            member_name_c = pointer_add(member_name_c, struct_name.get_length())
        }
        
        ctx.cheez_file.append_string("    ")
        ctx.cheez_file.append_cstring(member_name_c)
        indent(ctx.cheez_file, ctx.longest_member_name - int(C.strlen(member_name_c)))

        if member_value >= 0 {
            ctx.cheez_file.appendf(" = 0x{:x}`n", (member_value))
        } else {
            ctx.cheez_file.appendf(" = {}`n", (member_value))
        }
        // ctx.cheez_file.appendf("`n", ())
    })

    ctx.cheez_file.appendf("}`n", ())
}

emit_function_decl :: (ctx: &GenContext, cursor: &CXCursor) {
    if ctx.options.no_functions {
        return
    }

    ctx.requires_wrapper = false

    function_type := clang_getCursorType(cursor)
    return_type   := clang_getResultType(function_type)

    // io.printfln("[] {}: {}", (clang_getCursorSpelling(cursor), clang_getTypeSpelling(function_type)))

    // check if return type or any param is struct
    ctx.return_type_is_struct = check_type_struct(ctx, return_type)
    if ctx.return_type_is_struct {
        ctx.requires_wrapper = true
    }
    visit_parameters(cursor, ctx, {
        if check_type_struct(ctx, clang_getCursorType(c)) {
            ctx.requires_wrapper = true
        }
    })

    // bind func
    {
        if ctx.requires_wrapper {
            ctx.cheez_file.append_string("__bind__")
        }
        ctx.cheez_file.appendf("{} :: (", clang_getCursorSpelling(cursor))
        if ctx.return_type_is_struct {
            ctx.cheez_file.append_string("ret: &")
            emit_c_type(ctx, return_type, true, true)
        }

        visit_parameters(cursor, ctx, {
            if ctx.param_index > 0 or ctx.return_type_is_struct {
                ctx.cheez_file.append_string(", ")
            }

            emit_param_name(ctx.cheez_file, c, ctx.param_index)
            ctx.cheez_file.append_string(": ")
            // ctx.cheez_file.appendf("p{}: ", ctx.param_index)
            emit_c_type(ctx, clang_getCursorType(c), true)
        })

        ctx.cheez_file.append_string(")")

        if !ctx.return_type_is_struct {
            ctx.cheez_file.appendf(" -> ", ())
            emit_c_type(ctx, return_type, true)
        }

        ctx.cheez_file.append_string(";`n")
    }
    
    // wrapper
    if ctx.requires_wrapper {
        ctx.cheez_file.appendf("{} :: (", clang_getCursorSpelling(cursor))

        // generate param list
        visit_parameters(cursor, ctx, {
            if ctx.param_index > 0 {
                ctx.cheez_file.append_string(", ")
            }

            emit_param_name(ctx.cheez_file, c, ctx.param_index)
            ctx.cheez_file.append_string(": ")
            // ctx.cheez_file.appendf("p{}: ", ctx.param_index)
            emit_c_type(ctx, clang_getCursorType(c), true, true)
        })

        ctx.cheez_file.append_string(") -> ")
        emit_c_type(ctx, return_type, true, true)
        ctx.cheez_file.append_string(" {`n")

        // generate body
        if ctx.return_type_is_struct {
            ctx.cheez_file.append_string("    ret: ")
            emit_c_type(ctx, return_type, true, true)
            ctx.cheez_file.append_string(" = default`n    ")
        } else if int(return_type.kind) != int(CXTypeKind.Void) {
            ctx.cheez_file.append_string("    return ")
        } else {
            ctx.cheez_file.append_string("    ")
        }

        // call bind func
        ctx.cheez_file.appendf("__bind__{}(", clang_getCursorSpelling(cursor))

        if ctx.return_type_is_struct {
            ctx.cheez_file.append_string("&ret")
        }

        visit_parameters(cursor, ctx, {
            if ctx.param_index > 0 or ctx.return_type_is_struct {
                ctx.cheez_file.append_string(", ")
            }

            if check_type_struct(ctx, clang_getCursorType(c)) {
                ctx.cheez_file.append_string("&")
            }

            // ctx.cheez_file.appendf("p{}", ctx.param_index)
            emit_param_name(ctx.cheez_file, c, ctx.param_index)
        })

        // return result
        if ctx.return_type_is_struct {
            ctx.cheez_file.append_string(")`n    return ret")
        } else {
            ctx.cheez_file.append_string(")")
        }

        ctx.cheez_file.append_string("`n}`n")
    }

    if ctx.requires_wrapper {
        emit_function_c_decl(ctx, cursor)
    }
}

emit_function_c_decl :: (ctx: &GenContext, cursor: &CXCursor) {
    function_type := clang_getCursorType(cursor)
    return_type   := clang_getResultType(function_type)

    visit_parameters(cursor, ctx, {
        ctx.c_file.appendf("using {}_p{}_t = {};`n", (
            clang_getCursorSpelling(parent),
            ctx.param_index,
            clang_getTypeSpelling(clang_getCursorType(c))))
    })

    ctx.c_file.append_string("extern `"C`" ");

    // return type
    if ctx.return_type_is_struct {
        ctx.c_file.append_string("void")
    } else {
        ctx.c_file.appendf("{}", clang_getTypeSpelling(return_type))
    }

    // function name
    ctx.c_file.appendf(" __bind__{}(", clang_getCursorSpelling(cursor))

    // return param
    if ctx.return_type_is_struct {
        ctx.c_file.appendf("{}* ret", clang_getTypeSpelling(return_type))
    }

    visit_parameters(cursor, ctx, {
        if ctx.param_index > 0 or ctx.return_type_is_struct {
            ctx.c_file.append_string(", ")
        }

        // param type
        ctx.c_file.appendf("{}_p{}_t", (
            clang_getCursorSpelling(parent),
            ctx.param_index))

        if check_type_struct(ctx, clang_getCursorType(c)) {
            ctx.c_file.append_string("*")
        }

        ctx.c_file.append_string(" ")
        // ctx.c_file.appendf(" p{}", ctx.param_index)
        emit_param_name(ctx.c_file, c, ctx.param_index)
    })

    ctx.c_file.append_string(") {`n")

    // call original function
    if ctx.return_type_is_struct {
        ctx.c_file.append_string("    *ret = ")
    } else if int(return_type.kind) != int(CXTypeKind.Void) {
        ctx.c_file.append_string("    return ")
    } else {
        ctx.c_file.append_string("    ")
    }

    ctx.c_file.appendf("{}(", clang_getCursorSpelling(cursor))

    // args
    visit_parameters(cursor, ctx, {
        if ctx.param_index > 0 {
            ctx.c_file.append_string(", ")
        }

        if check_type_struct(ctx, clang_getCursorType(c)) {
            ctx.c_file.append_string("*")
        }

        // ctx.c_file.appendf("p{}", ctx.param_index)
        emit_param_name(ctx.c_file, c, ctx.param_index)
    })

    ctx.c_file.append_string(");`n}`n")
}

check_type_struct :: (ctx: &GenContext, typ: CXType) -> bool {
    return match typ.kind {
        CXTypeKind.Elaborated -> {
            actual_type := clang_Type_getNamedType(typ)
            type_decl   := clang_getTypeDeclaration(actual_type)

            match type_decl.kind {
                CXCursorKind.StructDecl -> true
                _ -> false
            }
        }

        // structs
        CXTypeKind.Record -> true

        CXTypeKind.Typedef -> {
            typedef_decl := clang_getTypeDeclaration(typ)
            elo          := clang_getTypedefDeclUnderlyingType(typedef_decl)
            actual_type  := clang_Type_getNamedType(elo)
            type_decl    := clang_getTypeDeclaration(actual_type)

            match type_decl.kind {
                CXCursorKind.StructDecl -> true
                _ -> false
            }
        }

        _ -> false
    }
}

emit_c_type :: (ctx: &GenContext, typ: CXType, is_func_param: bool, behind_pointer: bool = false) {
    size := clang_Type_getSizeOf(typ)
    // io.printfln("emit_c_type({}, {})", (clang_getTypeSpelling(typ), clang_getTypeKindSpelling(typ.kind)))

    use CXTypeKind
    match typ.kind {
        Void       -> ctx.cheez_file.appendf("void", ())

        UChar      -> ctx.cheez_file.appendf("u{}", size * 8)
        UShort     -> ctx.cheez_file.appendf("u{}", size * 8)
        UInt       -> ctx.cheez_file.appendf("u{}", size * 8)
        ULong      -> ctx.cheez_file.appendf("u{}", size * 8)
        ULongLong  -> ctx.cheez_file.appendf("u{}", size * 8)
        SChar      -> ctx.cheez_file.appendf("i{}", size * 8)
        Short      -> ctx.cheez_file.appendf("i{}", size * 8)
        Long       -> ctx.cheez_file.appendf("i{}", size * 8)
        LongLong   -> ctx.cheez_file.appendf("i{}", size * 8)


        Int        -> {
            // sometimes other types are ints, idk why
            // io.printfln("Int: {}, {}", (clang_getCursorKindSpelling(cursor.kind), clang_getCursorSpelling(&cursor)))
            ctx.cheez_file.appendf("i{}", size * 8)
        }

        Char_S     -> ctx.cheez_file.appendf("char{}", size * 8)
        WChar      -> ctx.cheez_file.appendf("char{}", size * 8)

        Float      -> ctx.cheez_file.appendf("f{}", size * 8)
        Double     -> ctx.cheez_file.appendf("f{}", size * 8)
        LongDouble -> ctx.cheez_file.appendf("f{}", size * 8)

        // TODO: not working?
        Bool       -> ctx.cheez_file.appendf("bool", ())

        ConstantArray -> {
            target_type := clang_getArrayElementType(typ)

            if is_func_param {
                ctx.cheez_file.append_string("&")
            } else {
                target_type_size := clang_getArraySize(typ)
                ctx.cheez_file.appendf("[{}]", target_type_size)
            }
            emit_c_type(ctx, target_type, is_func_param, true)
        }

        IncompleteArray -> {
            target_type := clang_getArrayElementType(typ)

            if is_func_param {
                ctx.cheez_file.append_string("&")
            } else {
                ctx.cheez_file.append_string("[0]")
            }
            emit_c_type(ctx, target_type, is_func_param, true)
        }

        Pointer -> {
            target_type := clang_getPointeeType(typ)

            // function types in cheez are already pointers, so we dont need the extra &
            if int(target_type.kind) != int(FunctionProto) {
                ctx.cheez_file.append_string("&")
            }

            emit_c_type(ctx, target_type, is_func_param, true)
        }

        // handle like pointer
        LValueReference -> {
            target_type := clang_getPointeeType(typ)
            ctx.cheez_file.append_string("&")
            emit_c_type(ctx, target_type, is_func_param, true)
        }

        // function type
        FunctionProto -> {
            ctx.cheez_file.append_string("fn(")

            arg_index := 0u32
            loop {
                arg_type := clang_getArgType(typ, arg_index)
                if int(arg_type.kind) == int(Invalid) then break

                if arg_index > 0 {
                    ctx.cheez_file.append_string(", ")
                }
                emit_c_type(ctx, arg_type, false)
                arg_index += 1
            }

            ctx.cheez_file.append_string(") -> ")
            return_type := clang_getResultType(typ)
            emit_c_type(ctx, return_type, false)
        }

        FunctionNoProto -> {
            ctx.cheez_file.append_string("fn(")

            arg_index := 0u32
            loop {
                arg_type := clang_getArgType(typ, arg_index)
                if int(arg_type.kind) == int(Invalid) then break

                if arg_index > 0 {
                    ctx.cheez_file.append_string(", ")
                }
                emit_c_type(ctx, arg_type, false)
                arg_index += 1
            }

            ctx.cheez_file.append_string(") -> ")
            return_type := clang_getResultType(typ)
            emit_c_type(ctx, return_type, false)
        }

        Elaborated -> {
            actual_type := clang_Type_getNamedType(typ)
            type_decl   := clang_getTypeDeclaration(actual_type)
            ctx.cheez_file.appendf("{}", clang_getCursorSpelling(&type_decl))
        }

        // structs
        Record -> {
            type_decl := clang_getTypeDeclaration(typ)
            if is_func_param and !behind_pointer {
                ctx.cheez_file.appendf("&{}", clang_getCursorSpelling(&type_decl))
            } else {
                ctx.cheez_file.appendf("{}", clang_getCursorSpelling(&type_decl))
            }
        }

        Enum -> {
            ctx.cheez_file.appendf("{}", clang_getTypeSpelling(typ))
        }

        Typedef -> {
            typedef_decl := clang_getTypeDeclaration(typ)
            elo          := clang_getTypedefDeclUnderlyingType(typedef_decl)
            actual_type  := clang_Type_getNamedType(elo)
            type_decl    := clang_getTypeDeclaration(actual_type)

            match type_decl.kind {
                CXCursorKind.StructDecl -> {
                    if is_func_param and !behind_pointer {
                        ctx.cheez_file.appendf("&{}", clang_getTypeSpelling(typ))
                    } else {
                        ctx.cheez_file.appendf("{}", clang_getTypeSpelling(typ))
                    }
                }

                _ -> {
                    emit_c_type(ctx, elo, is_func_param, behind_pointer)
                }
            }
        }

        _ -> {
            // source_location := clang_getCursorLocation(<<c)
            // file, line, column, _ := clang_getFileLocation(source_location)
            // io.printfln("[ERROR] Unhandled type ({}) '{}' at {}:{}:{}", (
            //         clang_getTypeKindSpelling(typ.kind),
            //         clang_getTypeSpelling(typ),
            //         clang_getFileName(file),
            //         line, column
            //     ))
            io.printfln("[ERROR] Unhandled type ({})`t`t'{}'", (clang_getTypeKindSpelling(typ.kind), clang_getTypeSpelling(typ)))
        }
    }
}

emit_param_name :: (out: &String, cursor: &CXCursor, index: int) {
    name := clang_getCursorSpelling(cursor)
    if name.get_length() == 0 {
        out.appendf("p{}", index)
        Memory.drop(name)
    } else {
        out.appendf("_{}", name)
    }
}

visit_parameters :: (cursor: Code, ctx: Code, code: Code) #macro {
    @insert(ctx).param_index = 0
    clang_visitChildrenHelper(@insert(cursor),
        (c, parent, client_data) => {
            if int(c.kind) == int(CXCursorKind.ParmDecl) {
                // typ := clang_getCursorType(c)
                // io.printfln("+ {}: {}", (clang_getCursorSpelling(c), clang_getTypeSpelling(typ)))
                ctx := &<<cast(&GenContext) client_data
                @insert(code, link=[c, parent, ctx])
                ctx.param_index += 1
            } else {
                typ := clang_getCursorType(c)
                // io.printfln("- {}: {}   ({})", (clang_getCursorSpelling(c), clang_getTypeSpelling(typ), clang_getCursorKindSpelling(c.kind)))
            }
            CXChildVisitResult.Continue
        },
        &@insert(ctx))
}

visit_struct_members :: (cursor: Code, ctx: Code, code: Code) #macro {
    @insert(ctx).param_index = 0
    clang_visitChildrenHelper(@insert(cursor),
        (c, parent, client_data) => {
            action := CXChildVisitResult.Continue
            if int(c.kind) == int(CXCursorKind.FieldDecl) {
                ctx := &<<cast(&GenContext) client_data
                @insert(code, link=[c, parent, ctx])
                ctx.param_index += 1
            }
            action
        },
        &@insert(ctx))
}

visit_enum_members :: (cursor: Code, ctx: Code, code: Code) #macro {
    @insert(ctx).param_index = 0
    clang_visitChildrenHelper(@insert(cursor),
        (c, parent, client_data) => {
            if int(c.kind) == int(CXCursorKind.EnumConstantDecl) {
                ctx := &<<cast(&GenContext) client_data
                @insert(code, link=[c, parent, ctx])
                ctx.param_index += 1
            }
            CXChildVisitResult.Continue
        },
        &@insert(ctx))
}

indent :: (str: &String, amount: int) {
    str.reserve(str.get_length() + amount)
    for 0..amount {
        str += " "
    }
}

c_string_starts_with :: (str: &char8, pre: &char8) -> bool {
    return C.strncmp(pre, str, C.strlen(pre)) == 0
}