use import std.math
use import std.array
use import std.random
use import std.time
use import std.mem.stack_allocator
use import std.mem.allocator
io :: import std.io

use import bmp.bmp

Vec3 :: Vector3[double]

///////////////////////////////////////////////////////////
xor :: (a: bool, b: bool) -> bool {
    return (a and !b) or (!a and b)
}

mod :: (a: $T, b: T) -> T {
    return ((a % b) + b) % b
}

///////////////////////////////////////////////////////////

Ray :: struct {
    origin    : Vec3
    direction : Vec3
}

DistanceShaderPair :: struct {
    distance : double
    shader   : ^Shader
}

////////////////////////////////// SDF //////////////////////////////////////////////

///////////////////// basic ///////////////////
SDF :: trait {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair;
}

Sphere :: struct {
    radius: double
    shader: ^Shader
}

impl SDF for Sphere {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        return DistanceShaderPair(v.mag() - radius, shader)
    }
}

PlaneY :: struct {
    location : double
    shader   : ^Shader
}

impl SDF for PlaneY {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        return DistanceShaderPair(v.y - location, shader)
    }
}

Cube :: struct {
    radius : double
    shader : ^Shader
}

impl SDF for Cube {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        dx := fabs(v.x) - radius
        dy := fabs(v.y) - radius
        dz := fabs(v.z) - radius

        mut d : double = 0

        if dx > 0 and dy > 0 and dz > 0 { // corner
            r := Vec3(
                dx, dy, dz
            )
            d = r.mag()
        } else if dx > 0 and dy > 0 {
            r := Vec3(
                x = dx
                y = dy
                z = 0
            )
            d = r.mag()
        } else if dx > 0 and dz > 0 {
            r := Vec3(
                x = dx
                y = 0
                z = dz
            )
            d = r.mag()
        } else if dy > 0 and dz > 0 {
            r := Vec3(
                x = 0
                y = dy
                z = dz
            )
            d = r.mag()
        } else {
            d = fmax(dx, fmax(dy, dz))
        }

        return DistanceShaderPair(d, shader)
    }
}

///////////////////// transformations //////////////////////////

TranslatedSDF :: struct {
    sdf         : ^SDF
    translation : Vec3
}

impl SDF for TranslatedSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        return sdf.distance(v - translation)
    }
}

ScaledSDF :: struct {
    sdf   : ^SDF
    scale : Vec3
}

impl SDF for ScaledSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        return sdf.distance(v / scale)
    }
}

RotatedXSDF :: struct {
    sdf   : ^SDF
    angle : double
}

RotatedYSDF :: struct {
    sdf   : ^SDF
    angle : double
}

RotatedZSDF :: struct {
    sdf   : ^SDF
    angle : double
}

impl SDF for RotatedXSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        rad := angle / 360 * 2 * 3.1415
        c := cos(rad)
        s := sin(rad)
        y := c * v.y - s * v.z
        z := s * v.y + c * v.z
        return sdf.distance(Vec3(v.x, y, z))
    }
}

impl SDF for RotatedYSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        rad := angle / 360 * 2 * 3.1415
        c := cos(rad)
        s := sin(rad)
        x := c * v.x + s * v.z
        z := -s * v.x + c * v.z
        return sdf.distance(Vec3(x, v.y, z))
    }
}

impl SDF for RotatedZSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        rad := angle / 360 * 2 * 3.1415
        c := cos(rad)
        s := sin(rad)
        x := c * v.x - s * v.y
        y := s * v.x + c * v.y
        return sdf.distance(Vec3(x, y, v.z))
    }
}

////////////////////// combinations ///////////////////////
UnionSDF :: struct {
    sdf1 : ^SDF
    sdf2 : ^SDF
}

impl SDF for UnionSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        a := sdf1.distance(v)
        b := sdf2.distance(v)
        if a.distance < b.distance {
            return a
        } else {
            return b
        }
    }
}

IntersectionSDF :: struct {
    sdf1 : ^SDF
    sdf2 : ^SDF
}

impl SDF for IntersectionSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        a := sdf1.distance(v)
        b := sdf2.distance(v)
        if a.distance > b.distance {
            return a
        } else {
            return b
        }
    }
}

SubtractionSDF :: struct {
    sdf1 : ^SDF
    sdf2 : ^SDF
}

impl SDF for SubtractionSDF {
    distance :: (&Self, v: Vec3) -> DistanceShaderPair {
        a := sdf1.distance(v)
        mut b := sdf2.distance(v)

        b.distance = -b.distance
        if a.distance > b.distance {
            return a
        } else {
            return b
        }
    }
}

////////////////////////////// shaders //////////////////////////////////

Shader :: trait {
    shade :: (&Self, ray: Ray, raymarcher: &Raymarcher) -> Vec3;
}

ConstantColorShader :: struct {
    color: Vec3
}

impl Shader for ConstantColorShader {
    shade :: (&Self, ray: Ray, raymarcher: &Raymarcher) -> Vec3 {
        return color
    }
}

//////
LambertianShader :: struct {
    color: Vec3
}

impl Shader for LambertianShader {
    shade :: (&Self, ray: Ray, raymarcher: &Raymarcher) -> Vec3 {
        (ld, lc) := raymarcher.sampleLightDirection()
        normal := raymarcher.normal(ray.origin)

        i := Vec3.dot(normal, ld)
        mut c := color * lc

        sdfHit := ray.origin + ld * 0.001
        mut shadowRay := Ray(sdfHit, ld)
        mut distance := raymarcher.sdf.distance(shadowRay.origin).distance

        while shadowRay.origin.mag() < raymarcher.backgroundDistance and fabs(distance) > 0.00005 {
            shadowRay.origin = shadowRay.origin + shadowRay.direction * distance
            distance = raymarcher.sdf.distance(shadowRay.origin).distance
        }

        mut shadow : double = 1.0
        if shadowRay.origin.mag() < raymarcher.backgroundDistance {
            shadow = 0.3
        }

        &c *= fmax(i, 0.1)
        return c * shadow
    }
}

CheckerBoardShader :: struct {
    size    : double
    shader1 : ^Shader
    shader2 : ^Shader
}


impl Shader for CheckerBoardShader {
    shade :: (&Self, ray: Ray, raymarcher: &Raymarcher) -> Vec3 {
        x := mod(ray.origin.x, 2 * size)
        y := mod(ray.origin.y, 2 * size)
        z := mod(ray.origin.z, 2 * size)

        if xor(x < size, xor(y < size, z < size)) {
            return shader1.shade(ray, raymarcher)
        } else {
            return shader2.shade(ray, raymarcher)
        }
    }
}

///////////////////////////// scene //////////////////////////////
Background :: struct {

}

impl Background {
    project :: (&Self, ray: Ray) -> Vec3 {
        mut i := ray.direction.y + 0.5
        i *= i
        return Vec3(i, i, i)
    }
}

Raymarcher :: struct {
    sdf                : ^SDF
    background         : Background
    backgroundDistance : double = 1000
}

impl Raymarcher {
    project :: (&Self, mut ray: Ray) -> Vec3 {
        mut ds := sdf.distance(ray.origin)

        while fabs(ds.distance) > 0.0000001 {
            ray.origin = ray.origin + ray.direction * ds.distance
            ds = sdf.distance(ray.origin)


            if ray.origin.mag() >= backgroundDistance {
                return background.project(ray)
            }
        }

        return ds.shader.shade(ray, self)
    }

    sampleLightDirection :: (&Self) -> (ld: Vec3, lc: Vec3) {
        ld = Vec3(-1.0, 1.5, 1)
        ld.normalize()
        lc = Vec3(1, 1, 1)
    }

    normal :: (&Self, p: Vec3) -> Vec3 {
        off : double = 0.001

        n := Vec3(
            x = sdf.distance(Vec3(p.x + off, p.y, p.z)).distance - sdf.distance(Vec3(p.x - off, p.y, p.z)).distance
            y = sdf.distance(Vec3(p.x, p.y + off, p.z)).distance - sdf.distance(Vec3(p.x, p.y - off, p.z)).distance
            z = sdf.distance(Vec3(p.x, p.y, p.z + off)).distance - sdf.distance(Vec3(p.x, p.y, p.z - off)).distance
        )
        return n.normalized()
    }
}


/////////////////////////////////////////////////


PerspectiveCamera :: struct {
    focalLength  : double
    sensorWidth  : double
    sensorHeight : double
}

impl PerspectiveCamera {
    project :: (&Self, x: double, y: double) -> Ray {
        dir := Vec3(
            x = (x - 0.5) * sensorWidth
            y = -(y - 0.5) * sensorHeight
            z = -focalLength
        )
        return Ray(
            origin = Vec3(0, 0, 0)
            direction = dir.normalized()
        )
    }
}

Film :: struct {
    width  : int
    height : int
    pixels : []mut Vec3

    antiAliasingSteps: int
}

impl Film {
    trigger :: (&mut Self, camera: &PerspectiveCamera, scene: &Raymarcher) {

        io.printf("({}, {})`n", (width, height))

        fw := 1 / cast(double) width
        fh := 1 / cast(double) height

        io.printf("Rendering image with {} anti-aliasing step(s)`n", antiAliasingSteps)
        if antiAliasingSteps < 1 {
            antiAliasingSteps = 1
        }
        

        r := LinearCongruentialGenerator(
            cast get_time_microseconds()
        )

        for y in 0..height {
            if antiAliasingSteps >= 0 {
                row := y + 1
                io.printf("Rendering row {}/{}`n", (row, height))
            }

            for x in 0..width {
                fx := cast(double) x
                fy := cast(double) y

                mut color := Vec3(0, 0, 0)

                if antiAliasingSteps == 1 {
                    ray := camera.project((fx + 0.5) * fw, (fy + 0.5) * fh)
                    color = scene.project(ray)
                } else {
                    for i in 0..antiAliasingSteps {
                        ray := camera.project((fx + r.next_double()) * fw, (fy + r.next_double()) * fh)
                        c := scene.project(ray)
                        &color += c
                    }
                    color = color * (1 / cast(double) antiAliasingSteps)
                }

                *pixels[x + y * width] = color
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////

SDFAllocator :: struct {
    allocator : StackAllocator
}

impl SDFAllocator {
    create :: () -> Self {
        return SDFAllocator(StackAllocator.create(1024 * 2))
    }

    allocate :: (&Self, $T: type) -> ^T {
        t := cast(^T) allocator.allocate(1, @sizeof(T), @alignof(T))
        io.printf("{}`n", (^allocator))
        return t
    }

    sphere :: (&Self, radius: double, shader: ^Shader) -> ^SDF {
        s := alloc(Sphere, ^allocator)
        s.radius = radius
        s.shader = shader
        return s
    }

    sphereT :: (&Self, position: Vec3, radius: double, shader: ^Shader) -> ^SDF {
        return self.translate(self.sphere(radius, shader), position)
    }

    planeY :: (&Self, location: double, shader: ^Shader) -> ^SDF {
        s := alloc(PlaneY, ^allocator)
        s.location = location
        s.shader = shader
        return s
    }

    cube :: (&Self, radius: double, shader: ^Shader) -> ^SDF {
        s := alloc(Cube, ^allocator)
        s.radius = radius
        s.shader = shader
        return s
    }

    cubeT :: (&Self, position: Vec3, radius: double, shader: ^Shader) -> ^SDF {
        return self.translate(self.cube(radius, shader), position)
    }

    translate :: (&Self, sdf: ^SDF, translation: Vec3) -> ^SDF {
        t := alloc(TranslatedSDF, ^allocator)
        t.sdf = sdf
        t.translation = translation
        return t
    }

    rotateX :: (&Self, sdf: ^SDF, angle: double) -> ^SDF {
        t := alloc(RotatedXSDF, ^allocator)
        t.sdf = sdf
        t.angle = angle
        return t
    }

    rotateY :: (&Self, sdf: ^SDF, angle: double) -> ^SDF {
        t := alloc(RotatedYSDF, ^allocator)
        t.sdf = sdf
        t.angle = angle
        return t
    }

    rotateZ :: (&Self, sdf: ^SDF, angle: double) -> ^SDF {
        t := alloc(RotatedZSDF, ^allocator)
        t.sdf = sdf
        t.angle = angle
        return t
    }

    scale :: (&Self, sdf: ^SDF, x: double = 1, y: double = 1, z: double = 1) -> ^SDF {
        t := alloc(ScaledSDF, ^allocator)
        t.sdf = sdf
        t.scale = Vec3(x, y, z)
        return t
    }

    add :: (&Self, sdf1: ^SDF, sdf2: ^SDF) -> ^SDF {
        t := alloc(UnionSDF, ^allocator)
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return t
    }

    intersect :: (&Self, sdf1: ^SDF, sdf2: ^SDF) -> ^SDF {
        t := alloc(IntersectionSDF, ^allocator)
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return t
    }

    subtract :: (&Self, sdf1: ^SDF, sdf2: ^SDF) -> ^SDF {
        t := alloc(SubtractionSDF, ^allocator)
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return t
    }
}

renderImage :: (film: &mut Film) {
    for i in 0..film.pixels.length {
        *film.pixels[i] = Vec3(0, 0, 0)
    }

    as := (cast(double) film.width) / (cast(double) film.height)
    camera := PerspectiveCamera(
        focalLength = 50
        sensorWidth = as * 24
        sensorHeight = 24
    )

    bg := Background()

    all := SDFAllocator.create()

    //
    sChecker1    := LambertianShader(Vec3(0.9, 0.8, 0.8))
    sChecker2    := LambertianShader(Vec3(0.2, 0.1, 0.1))
    sChecker  := CheckerBoardShader(1, ^sChecker1, ^sChecker2)

    sWhite    := LambertianShader(Vec3(1, 1, 1))
    sBlack    := LambertianShader(Vec3(0, 0, 0))
    sRed    := LambertianShader(Vec3(1, 0, 0))
    sGreen  := LambertianShader(Vec3(1, 1, 0))
    sBlue   := LambertianShader(Vec3(0, 0, 1))

    //
    ground := all.planeY(-1.25, ^sWhite)
    s1 := all.sphereT(Vec3(0, 0.5, 0), 1, ^sRed)
    s2 := all.sphereT(Vec3(0, 0, 0), 0.3, ^sGreen)
    c1 := all.cubeT(Vec3(0, 0.5, 0), 0.8, ^sBlue)

    sdf := {
        sdf := {
            mut sdf : ^SDF
            {
                sdf = c1
                sdf = all.subtract(sdf, s1)
                sdf = all.add(sdf, s2)

                sdf = all.rotateX(sdf, -20.0)
                sdf = all.rotateY(sdf, 20)
            }
            
            // cube
            // {
            //     sdf = s1
            //     sdf = all.subtract(sdf, all.sphereT(Vec3(-1, 0, 1), 1.2, sWhite))
            // }

            all.add(sdf, ground)
        }
        sdf
    }
    
    finalSDF := all.translate(sdf, Vec3(0, 0, -7.5))

    raymarcher := Raymarcher(
        sdf = finalSDF
        background = bg
        backgroundDistance = 15
    )

    film.trigger(&camera, &raymarcher)
}

Main :: () {
    //
    scale : int = 2
    width : int = 192 * scale
    height : int = 128 * scale
    antiAliasingSteps : int = 1

    imageArr := Array[Vec3].create()

    imageArr.resize(width * height)

    film := Film(width, height, imageArr.slice_mut(), antiAliasingSteps)

    start := get_time_milliseconds()
    renderImage(&film)
    end := get_time_milliseconds()
    dur := (cast(double) end - start) / 1000.0

    io.printf("Rendering took {} seconds`n", dur)

    // store image as bmp
    write_bmp(cast(i32) width, cast(i32) height, cast(^double) imageArr.get_raw(), "sdfr.bmp")
}
