#load("std:io/io")
#load("std:math")
#load("std:array")
#load("std:mem/stack_allocator")
#load("bmp:bmp")

///////////////////////////////////////////////////////////
fn xor(a: bool, b: bool) -> bool {
    return (a and !b) or (!a and b)
}

fn mod(a: $T, b: T) -> T {
    return ((a % b) + b) % b
}

///////////////////////////////////////////////////////////

struct Ray {
    origin: Vec3
    direction: Vec3
}

struct DistanceShaderPair {
    distance: double
    shader: Shader
}

////////////////////////////////// SDF //////////////////////////////////////////////

///////////////////// basic ///////////////////
trait SDF {
    fn distance(v: Vec3) -> DistanceShaderPair;
}

struct Sphere {
    radius: double
    shader: Shader
}

impl SDF for Sphere {
    fn distance(v: Vec3) -> DistanceShaderPair {
        return new DistanceShaderPair {
            distance = v.mag() - radius
            shader = shader
        }
    }
}

struct PlaneY {
    location: double
    shader: Shader
}

impl SDF for PlaneY {
    fn distance(v: Vec3) -> DistanceShaderPair {
        return new DistanceShaderPair {
            distance = v.y - location
            shader = shader
        }
    }
}

struct Cube {
    radius: double
    shader: Shader
}

impl SDF for Cube {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let dx = fabs(v.x) - radius
        let dy = fabs(v.y) - radius
        let dz = fabs(v.z) - radius

        let d: double = 0

        if dx > 0 and dy > 0 and dz > 0 { // corner
            let r = new Vec3 {
                dx, dy, dz
            }
            d = r.mag()
        }
        else if dx > 0 and dy > 0 {
            let r = new Vec3 {
                x = dx
                y = dy
                z = 0
            }
            d = r.mag()
        }
        else if dx > 0 and dz > 0 {
            let r = new Vec3 {
                x = dx
                y = 0
                z = dz
            }
            d = r.mag()
        }
        else if dy > 0 and dz > 0 {
            let r = new Vec3 {
                x = 0
                y = dy
                z = dz
            }
            d = r.mag()
        }
        else {
            d = fmax(dx, fmax(dy, dz))
        }

        return new DistanceShaderPair {
            distance = d
            shader = shader
        }
    }
}

///////////////////// transformations //////////////////////////

struct TranslatedSDF {
    sdf: SDF
    translation: Vec3
}

impl SDF for TranslatedSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        return sdf.distance(v.sub(translation))
    }
}

struct RotatedXSDF {
    sdf: SDF
    angle: double
}

struct RotatedYSDF {
    sdf: SDF
    angle: double
}

struct RotatedZSDF {
    sdf: SDF
    angle: double
}

impl SDF for RotatedXSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let rad = angle / 360 * 2 * 3.1415
        let c = cos(rad)
        let s = sin(rad)
        let y = c * v.y - s * v.z
        let z = s * v.y + c * v.z
        return sdf.distance(new Vec3{v.x, y, z})
    }
}

impl SDF for RotatedYSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let rad = angle / 360 * 2 * 3.1415
        let c = cos(rad)
        let s = sin(rad)
        let x = c * v.x + s * v.z
        let z = -s * v.x + c * v.z
        return sdf.distance(new Vec3{x, v.y, z})
    }
}

impl SDF for RotatedZSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let rad = angle / 360 * 2 * 3.1415
        let c = cos(rad)
        let s = sin(rad)
        let x = c * v.x - s * v.y
        let y = s * v.x + c * v.y
        return sdf.distance(new Vec3{x, y, v.z})
    }
}


////////////////////// combinations ///////////////////////
struct UnionSDF {
    sdf1: SDF
    sdf2: SDF
}

impl SDF for UnionSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let a = sdf1.distance(v)
        let b = sdf2.distance(v)
        if a.distance < b.distance {
            return a
        } else {
            return b
        }
    }
}

struct IntersectionSDF {
    sdf1: SDF
    sdf2: SDF
}

impl SDF for IntersectionSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let a = sdf1.distance(v)
        let b = sdf2.distance(v)
        if a.distance > b.distance {
            return a
        } else {
            return b
        }
    }
}

struct SubtractionSDF {
    sdf1: SDF
    sdf2: SDF
}

impl SDF for SubtractionSDF {
    fn distance(v: Vec3) -> DistanceShaderPair {
        let a = sdf1.distance(v)
        let b = sdf2.distance(v)

        b.distance = -b.distance
        if a.distance > b.distance {
            return a
        } else {
            return b
        }
    }
}

////////////////////////////// shaders //////////////////////////////////

trait Shader {
    fn shade(ray: Ray, raymarcher: Raymarcher&) -> Vec3;
}

//////
struct ConstantColorShader {
    color: Vec3
}

impl Shader for ConstantColorShader {
    fn shade(ray: Ray, raymarcher: Raymarcher&) -> Vec3 {
        return color
    }
}

//////
struct LambertianShader {
    color: Vec3
}

impl Shader for LambertianShader {
    fn shade(ray: Ray, raymarcher: Raymarcher&) -> Vec3 {
        let ld: Vec3
        let lc: Vec3
        raymarcher.sampleLightDirection(&ld, &lc)
        let normal = raymarcher.normal(ray.origin)

        let i = normal.dot(ld)
        let c = color.mul3(lc)

        let sdfHit = ray.origin.add(ld.mul(0.001))
        let shadowRay = new Ray{sdfHit, ld}
        let distance = raymarcher.sdf.distance(shadowRay.origin).distance

        while shadowRay.origin.mag() < raymarcher.backgroundDistance and fabs(distance) > 0.00005 {
            shadowRay.origin = shadowRay.origin.add(shadowRay.direction.mul(distance))
            distance = raymarcher.sdf.distance(shadowRay.origin).distance
        }

        let shadow: double = 1.0
        if shadowRay.origin.mag() < raymarcher.backgroundDistance {
            shadow = 0.3
        }
        
        let c = c.mul(fmax(i, 0.1))
        return c.mul(shadow)
    }
}

struct CheckerBoardShader {
    size: double
    shader1: Shader
    shader2: Shader
}


impl Shader for CheckerBoardShader {
    fn shade(ray: Ray, raymarcher: Raymarcher&) -> Vec3 {
        let x = mod(ray.origin.x, 2 * size)
        let y = mod(ray.origin.y, 2 * size)
        let z = mod(ray.origin.z, 2 * size)

        if xor(x < size, xor(y < size, z < size)) {
            return shader1.shade(ray, raymarcher)
        } else {
            return shader2.shade(ray, raymarcher)
        }
    }
}

///////////////////////////// scene //////////////////////////////
struct Background {

}

impl Background {
    fn project(ray: Ray) -> Vec3 {
        let i = ray.direction.y + 0.5
        i *= i
        return new Vec3 { i, i, i }
    }
}

struct Raymarcher {
    sdf: SDF
    background: Background
    backgroundDistance: double // = 1000
}

impl Raymarcher {
    ref fn project(ray: Ray) -> Vec3 {
        let ds = sdf.distance(ray.origin)

        while fabs(ds.distance) > 0.0000001 {
            ray.origin = ray.origin.add(ray.direction.mul(ds.distance))
            ds = sdf.distance(ray.origin)


            if ray.origin.mag() >= backgroundDistance {
                return background.project(ray)
            }
        }

        return ds.shader.shade(ray, &self)
    }

    ref fn sampleLightDirection(dir: Vec3&, col: Vec3&) {
        <<dir = new Vec3 {
            -1, 1.5, 1
        }.normaziled()
        <<col = new Vec3 {1, 1, 1}
    }

    ref fn normal(p: Vec3) -> Vec3 {
        let off: double = 0.001

        let n = new Vec3 {
            x = sdf.distance(new Vec3{p.x + off, p.y, p.z}).distance - sdf.distance(new Vec3{p.x - off, p.y, p.z}).distance
            y = sdf.distance(new Vec3{p.x, p.y + off, p.z}).distance - sdf.distance(new Vec3{p.x, p.y - off, p.z}).distance
            z = sdf.distance(new Vec3{p.x, p.y, p.z + off}).distance - sdf.distance(new Vec3{p.x, p.y, p.z - off}).distance
        }
        return n.normaziled()
    }
}


/////////////////////////////////////////////////


struct PerspectiveCamera {
    focalLength: double
    sensorWidth: double
    sensorHeight: double
}

impl PerspectiveCamera {
    ref fn project(x: double, y: double) -> Ray {
        return new Ray {
            origin = new Vec3 {0, 0, 0}
            direction = new Vec3 {
                x = (x - 0.5) * sensorWidth
                y = -(y - 0.5) * sensorHeight
                z = -focalLength
            }.normaziled()
        }
    }
}

struct Film {
    width: uint
    height: uint
    pixels: Vec3[]

    antiAliasingSteps: uint
}

impl Film {
    ref fn trigger(camera: PerspectiveCamera, scene: Raymarcher) {

        Printf("({}, {})`n", [width, height])

        let fw = 1 / (double)width
        let fh = 1 / (double)height

        Printf("Rendering image with {} anti-aliasing step(s)`n", [antiAliasingSteps])
        if antiAliasingSteps < 1 {
            antiAliasingSteps = 1
        }
        

        let r = new LinearCongruentialGenerator{
            GetCurrentTimeInMicroseconds()
        }

        while let y: uint = 0; y < height; y += 1 {
            if antiAliasingSteps >= 0 {
                Printf("Rendering row {}/{}`n", [(y + 1), height])
            }

            while let x: uint = 0; x < width; x += 1 {

                let fx = (double)x
                let fy = (double)y

                let color = new Vec3{0, 0, 0}

                if antiAliasingSteps == 1 {
                    let ray = camera.project((fx + 0.5) * fw, (fy + 0.5) * fh)
                    color= scene.project(ray)
                }
                else {
                    while let i: uint = 0; i < antiAliasingSteps; i += 1 {
                        let ray = camera.project((fx + r.NextDouble()) * fw, (fy + r.NextDouble()) * fh)
                        let c = scene.project(ray)
                        color = color.add(c)
                    }
                    color = color.mul(1 / (double)antiAliasingSteps)
                }

                pixels[x + y * width] = color
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////

struct SDFAllocator {
    allocator: StackAllocator
}

impl SDFAllocator {
    ref fn Init() {
        allocator = NewStackAllocator(1024 * 2)
        allocator.PrintDiagnostics()
    }

    ref fn Dispose() {
        allocator.Dispose()
    }

    ref fn Allocate() -> $T& {
        let t = (T&)allocator.allocate(1, @sizeof(T), @alignof(T))
        Printf("{}`n", [allocator])
        return t
    }

    ref fn Sphere(radius: double, shader: Shader) -> SDF {
        let s: Sphere& = self.Allocate()
        s.radius = radius
        s.shader = shader
        return (SDF)s
    }

    ref fn SphereT(position: Vec3, radius: double, shader: Shader) -> SDF {
        return self.Translate(self.Sphere(radius, shader), position)
    }

    ref fn PlaneY(location: double, shader: Shader) -> SDF {
        let s: PlaneY& = self.Allocate()
        s.location = location
        s.shader = shader
        return (SDF)s
    }

    ref fn Cube(radius: double, shader: Shader) -> SDF {
        let s: Cube& = self.Allocate()
        s.radius = radius
        s.shader = shader
        return (SDF)s
    }

    ref fn CubeT(position: Vec3, radius: double, shader: Shader) -> SDF {
        return self.Translate(self.Cube(radius, shader), position)
    }

    ref fn Translate(sdf: SDF, translation: Vec3) -> SDF {
        let t: TranslatedSDF& = self.Allocate()
        t.sdf = sdf
        t.translation = translation
        return (SDF)t
    }

    ref fn RotateX(sdf: SDF, angle: double) -> SDF {
        let t: RotatedXSDF& = self.Allocate()
        t.sdf = sdf
        t.angle = angle
        return (SDF)t
    }

    ref fn RotateY(sdf: SDF, angle: double) -> SDF {
        let t: RotatedYSDF& = self.Allocate()
        t.sdf = sdf
        t.angle = angle
        return (SDF)t
    }

    ref fn RotateZ(sdf: SDF, angle: double) -> SDF {
        let t: RotatedZSDF& = self.Allocate()
        t.sdf = sdf
        t.angle = angle
        return (SDF)t
    }

    ref fn Add(sdf1: SDF, sdf2: SDF) -> SDF {
        let t: UnionSDF& = self.Allocate()
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return (SDF)t
    }

    ref fn Intersect(sdf1: SDF, sdf2: SDF) -> SDF {
        let t: IntersectionSDF& = self.Allocate()
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return (SDF)t
    }

    ref fn Subtract(sdf1: SDF, sdf2: SDF) -> SDF {
        let t: SubtractionSDF& = self.Allocate()
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return (SDF)t
    }

    ref fn Combine(sdf1: SDF, sdf2: SDF) -> $T& {
        let t: T& = self.Allocate()
        t.sdf1 = sdf1
        t.sdf2 = sdf2
        return (SDF)t
    }
}

fn RenderImage(film: Film&)
{
    while let i = 0; i < film.pixels.length; i += 1 {
        film.pixels[i] = new Vec3 { 0, 0, 0 }
    }

    let as = (double)film.width/(double)film.height
    let camera = new PerspectiveCamera {
        focalLength = 50
        sensorWidth = as * 24
        sensorHeight = 24
    }

    let bg = new Background{}

    let all: SDFAllocator
    all.Init()
    defer all.Dispose()

    //
    let sChecker1    = new LambertianShader{new Vec3{0.9, 0.8, 0.8}}
    let sChecker2    = new LambertianShader{new Vec3{0.2, 0.1, 0.1}}
    let sChecker  = new CheckerBoardShader{1, sChecker1, sChecker2}

    let sWhite    = new LambertianShader{new Vec3{1, 1, 1}}
    let sBlack    = new LambertianShader{new Vec3{0, 0, 0}}
    let sRed    = new LambertianShader{new Vec3{1, 1, 1}}
    let sGreen  = new LambertianShader{new Vec3{0, 1, 0}}
    let sBlue   = new LambertianShader{new Vec3{0, 0, 1}}

    //
    let ground = all.PlaneY(-1.25, sWhite)
    let s1 = all.SphereT(new Vec3{0, 0.5, 0}, 1, sRed)
    let s2 = all.SphereT(new Vec3{0, 0, 0}, 0.3, sRed)
    let c1 = all.CubeT(new Vec3{0, 0.5, 0}, 0.8, sRed)


    // cube
    let sdf: SDF
    {
        sdf = c1
        sdf = all.Subtract(sdf, s1)
        // sdf = all.Add(sdf, s2)

        sdf = all.RotateX(sdf, -20)
        sdf = all.RotateY(sdf, 20)
    }
    // {
    //     sdf = s1
    //     sdf = all.Subtract(sdf, all.SphereT(new Vec3{-1, 0, 1}, 1.2, sWhite))
    // }

    let sdf = all.Add(sdf, ground)
    let sdf = all.Translate(sdf, new Vec3{0, 0, -7.5})

    let raymarcher = new Raymarcher {
        sdf = sdf
        background = bg
        backgroundDistance = 15
    }

    film.trigger(camera, raymarcher)
}

fn signed_distance_field_renderer()
{
    //
    let scale: uint = 5
    let width: uint = 192 * scale
    let height: uint = 128 * scale
    let antiAliasingSteps: uint = 1

    let imageArr: Array(Vec3) = NewArray()
    defer imageArr.Dispose()

    imageArr.Resize(width * height)

    let film = new Film { width, height, imageArr.Slice(), antiAliasingSteps }

    let start = GetCurrentTimeInMilliseconds()
    RenderImage(&film)
    let end = GetCurrentTimeInMilliseconds()
    let dur = end - start
    let dur = (double)dur / (double)1000

    Printf("Rendering took {} seconds
", [dur])

    // // store image as bmp
    write_bmp((int)width, (int)height, (double&)imageArr.data, "test.bmp")
}
