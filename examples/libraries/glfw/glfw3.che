#lib("./x64/glfw3dll.lib")
#lib("OpenGL32.Lib")

#export_scope

GLFWvidmode :: struct {
    /*! The width, in screen coordinates, of the video mode.
     */
    width: i32
    /*! The height, in screen coordinates, of the video mode.
     */
    height: i32
    /*! The bit depth of the red channel of the video mode.
     */
    redBits: i32
    /*! The bit depth of the green channel of the video mode.
     */
    greenBits: i32
    /*! The bit depth of the blue channel of the video mode.
     */
    blueBits: i32
    /*! The refresh rate, in Hz, of the video mode.
     */
    refreshRate: i32
}

GLFWgammaramp :: struct {
    /*! An array of value describing the response of the red channel.
     */
    red: &u16
    /*! An array of value describing the response of the green channel.
     */
    green: &u16
    /*! An array of value describing the response of the blue channel.
     */
    blue: &u16
    /*! The number of elements in each array.
     */
    size: u32
}

GLFWimage :: struct {
    /*! The width, in pixels, of this image.
     */
    width: i32
    /*! The height, in pixels, of this image.
     */
    height: i32
    /*! The pixel data of this image, arranged left-to-right, top-to-bottom.
     */
    pixels: &u8
}

GLFWwindow                      :: struct {}
GLFWmonitor                     :: struct {}
GLFWcursor                      :: struct {}

glfwInit                        :: () -> bool;
glfwTerminate                   :: ();

glfwCreateWindow                :: (width: i32, height: i32, title: c_string, monitor: &GLFWmonitor, share: &GLFWwindow) -> &GLFWwindow;
glfwDestroyWindow               :: (window: &GLFWwindow);
glfwShowWindow                  :: (windows: &GLFWwindow);
glfwWindowShouldClose           :: (window: &GLFWwindow) -> bool;
glfwPollEvents                  :: ();
glfwSwapBuffers                 :: (window: &GLFWwindow);
glfwSwapInterval                :: (interval: i32);
glfwGetVideoMode                :: (monitor: &GLFWmonitor) -> &GLFWvidmode;
glfwGetPrimaryMonitor           :: () -> &GLFWmonitor;
glfwSetWindowTitle              :: (window: &GLFWwindow, title: c_string);
glfwMakeContextCurrent          :: (window: &GLFWwindow);
glfwGetCurrentContext           :: () -> &GLFWwindow;
glfwSetKeyCallback              :: (window: &GLFWwindow, callback: fn (&GLFWwindow, i32, i32, i32, i32));
glfwSetWindowSizeCallback       :: (window: &GLFWwindow, callback: fn (&GLFWwindow, i32, i32));
glfwSetFramebufferSizeCallback  :: (window: &GLFWwindow, callback: fn (&GLFWwindow, i32, i32));
glfwWindowHint                  :: (hint: i32, value: i32);
glfwSetErrorCallback            :: (glfw_error_callback: fn(i32, c_string));
glfwSetWindowUserPointer        :: (window: &GLFWwindow, pointer: &void);
glfwGetWindowUserPointer        :: (window: &GLFWwindow) -> &void;

glfwGetFramebufferSize          :: (window: &GLFWwindow, width: &i32, height: &i32);

glfwGetTime                     :: () -> double;

GLFW_RELEASE                    :: 0
GLFW_PRESS                      :: 1
GLFW_REPEAT                     :: 2

/* The unknown key */
GLFW_KEY_UNKNOWN                :: -1

/* Printable keys */
GLFW_KEY_SPACE                  :: 32
GLFW_KEY_APOSTROPHE             :: 39  /* ' */
GLFW_KEY_COMMA                  :: 44  /* , */
GLFW_KEY_MINUS                  :: 45  /* - */
GLFW_KEY_PERIOD                 :: 46  /* . */
GLFW_KEY_SLASH                  :: 47  /* / */
GLFW_KEY_0                      :: 48
GLFW_KEY_1                      :: 49
GLFW_KEY_2                      :: 50
GLFW_KEY_3                      :: 51
GLFW_KEY_4                      :: 52
GLFW_KEY_5                      :: 53
GLFW_KEY_6                      :: 54
GLFW_KEY_7                      :: 55
GLFW_KEY_8                      :: 56
GLFW_KEY_9                      :: 57
GLFW_KEY_SEMICOLON              :: 59  /* ; */
GLFW_KEY_EQUAL                  :: 61  /* = */
GLFW_KEY_A                      :: 65
GLFW_KEY_B                      :: 66
GLFW_KEY_C                      :: 67
GLFW_KEY_D                      :: 68
GLFW_KEY_E                      :: 69
GLFW_KEY_F                      :: 70
GLFW_KEY_G                      :: 71
GLFW_KEY_H                      :: 72
GLFW_KEY_I                      :: 73
GLFW_KEY_J                      :: 74
GLFW_KEY_K                      :: 75
GLFW_KEY_L                      :: 76
GLFW_KEY_M                      :: 77
GLFW_KEY_N                      :: 78
GLFW_KEY_O                      :: 79
GLFW_KEY_P                      :: 80
GLFW_KEY_Q                      :: 81
GLFW_KEY_R                      :: 82
GLFW_KEY_S                      :: 83
GLFW_KEY_T                      :: 84
GLFW_KEY_U                      :: 85
GLFW_KEY_V                      :: 86
GLFW_KEY_W                      :: 87
GLFW_KEY_X                      :: 88
GLFW_KEY_Y                      :: 89
GLFW_KEY_Z                      :: 90
GLFW_KEY_LEFT_BRACKET           :: 91  /* [ */
GLFW_KEY_BACKSLASH              :: 92  /* \ */
GLFW_KEY_RIGHT_BRACKET          :: 93  /* ] */
GLFW_KEY_GRAVE_ACCENT           :: 96  /* ` */
GLFW_KEY_WORLD_1                :: 161 /* non-US #1 */
GLFW_KEY_WORLD_2                :: 162 /* non-US #2 */

/* Function keys */
GLFW_KEY_ESCAPE                 :: 256
GLFW_KEY_ENTER                  :: 257
GLFW_KEY_TAB                    :: 258
GLFW_KEY_BACKSPACE              :: 259
GLFW_KEY_INSERT                 :: 260
GLFW_KEY_DELETE                 :: 261
GLFW_KEY_RIGHT                  :: 262
GLFW_KEY_LEFT                   :: 263
GLFW_KEY_DOWN                   :: 264
GLFW_KEY_UP                     :: 265
GLFW_KEY_PAGE_UP                :: 266
GLFW_KEY_PAGE_DOWN              :: 267
GLFW_KEY_HOME                   :: 268
GLFW_KEY_END                    :: 269
GLFW_KEY_CAPS_LOCK              :: 280
GLFW_KEY_SCROLL_LOCK            :: 281
GLFW_KEY_NUM_LOCK               :: 282
GLFW_KEY_PRINT_SCREEN           :: 283
GLFW_KEY_PAUSE                  :: 284
GLFW_KEY_F1                     :: 290
GLFW_KEY_F2                     :: 291
GLFW_KEY_F3                     :: 292
GLFW_KEY_F4                     :: 293
GLFW_KEY_F5                     :: 294
GLFW_KEY_F6                     :: 295
GLFW_KEY_F7                     :: 296
GLFW_KEY_F8                     :: 297
GLFW_KEY_F9                     :: 298
GLFW_KEY_F10                    :: 299
GLFW_KEY_F11                    :: 300
GLFW_KEY_F12                    :: 301
GLFW_KEY_F13                    :: 302
GLFW_KEY_F14                    :: 303
GLFW_KEY_F15                    :: 304
GLFW_KEY_F16                    :: 305
GLFW_KEY_F17                    :: 306
GLFW_KEY_F18                    :: 307
GLFW_KEY_F19                    :: 308
GLFW_KEY_F20                    :: 309
GLFW_KEY_F21                    :: 310
GLFW_KEY_F22                    :: 311
GLFW_KEY_F23                    :: 312
GLFW_KEY_F24                    :: 313
GLFW_KEY_F25                    :: 314
GLFW_KEY_KP_0                   :: 320
GLFW_KEY_KP_1                   :: 321
GLFW_KEY_KP_2                   :: 322
GLFW_KEY_KP_3                   :: 323
GLFW_KEY_KP_4                   :: 324
GLFW_KEY_KP_5                   :: 325
GLFW_KEY_KP_6                   :: 326
GLFW_KEY_KP_7                   :: 327
GLFW_KEY_KP_8                   :: 328
GLFW_KEY_KP_9                   :: 329
GLFW_KEY_KP_DECIMAL             :: 330
GLFW_KEY_KP_DIVIDE              :: 331
GLFW_KEY_KP_MULTIPLY            :: 332
GLFW_KEY_KP_SUBTRACT            :: 333
GLFW_KEY_KP_ADD                 :: 334
GLFW_KEY_KP_ENTER               :: 335
GLFW_KEY_KP_EQUAL               :: 336
GLFW_KEY_LEFT_SHIFT             :: 340
GLFW_KEY_LEFT_CONTROL           :: 341
GLFW_KEY_LEFT_ALT               :: 342
GLFW_KEY_LEFT_SUPER             :: 343
GLFW_KEY_RIGHT_SHIFT            :: 344
GLFW_KEY_RIGHT_CONTROL          :: 345
GLFW_KEY_RIGHT_ALT              :: 346
GLFW_KEY_RIGHT_SUPER            :: 347
GLFW_KEY_MENU                   :: 348

GLFW_KEY_LAST                   :: GLFW_KEY_MENU

/*! @defgroup errors Error codes
 *  @brief Error codes.
 *
 *  See [error handling](@ref error_handling) for how these are used.
 *
 *  @ingroup init
 *  @{ */
/*! @brief No error has occurred.
 *
 *  No error has occurred.
 *
 *  @analysis Yay.
 */
GLFW_NO_ERROR                   :: 0
/*! @brief GLFW has not been initialized.
 *
 *  This occurs if a GLFW function was called that must not be called unless the
 *  library is [initialized](@ref intro_init).
 *
 *  @analysis Application programmer error.  Initialize GLFW before calling any
 *  function that requires initialization.
 */
GLFW_NOT_INITIALIZED            :: 0x00010001
/*! @brief No context is current for this thread.
 *
 *  This occurs if a GLFW function was called that needs and operates on the
 *  current OpenGL or OpenGL ES context but no context is current on the calling
 *  thread.  One such function is @ref glfwSwapInterval.
 *
 *  @analysis Application programmer error.  Ensure a context is current before
 *  calling functions that require a current context.
 */
GLFW_NO_CURRENT_CONTEXT         :: 0x00010002
/*! @brief One of the arguments to the function was an invalid enum value.
 *
 *  One of the arguments to the function was an invalid enum value, for example
 *  requesting @ref GLFW_RED_BITS with @ref glfwGetWindowAttrib.
 *
 *  @analysis Application programmer error.  Fix the offending call.
 */
GLFW_INVALID_ENUM               :: 0x00010003
/*! @brief One of the arguments to the function was an invalid value.
 *
 *  One of the arguments to the function was an invalid value, for example
 *  requesting a non-existent OpenGL or OpenGL ES version like 2.7.
 *
 *  Requesting a valid but unavailable OpenGL or OpenGL ES version will instead
 *  result in a @ref GLFW_VERSION_UNAVAILABLE error.
 *
 *  @analysis Application programmer error.  Fix the offending call.
 */
GLFW_INVALID_VALUE              :: 0x00010004
/*! @brief A memory allocation failed.
 *
 *  A memory allocation failed.
 *
 *  @analysis A bug in GLFW or the underlying operating system.  Report the bug
 *  to our [issue tracker](https://github.com/glfw/glfw/issues).
 */
GLFW_OUT_OF_MEMORY              :: 0x00010005
/*! @brief GLFW could not find support for the requested API on the system.
 *
 *  GLFW could not find support for the requested API on the system.
 *
 *  @analysis The installed graphics driver does not support the requested
 *  API, or does not support it via the chosen context creation backend.
 *  Below are a few examples.
 *
 *  @par
 *  Some pre-installed Windows graphics drivers do not support OpenGL.  AMD only
 *  supports OpenGL ES via EGL, while Nvidia and Intel only support it via
 *  a WGL or GLX extension.  macOS does not provide OpenGL ES at all.  The Mesa
 *  EGL, OpenGL and OpenGL ES libraries do not interface with the Nvidia binary
 *  driver.  Older graphics drivers do not support Vulkan.
 */
GLFW_API_UNAVAILABLE            :: 0x00010006
/*! @brief The requested OpenGL or OpenGL ES version is not available.
 *
 *  The requested OpenGL or OpenGL ES version (including any requested context
 *  or framebuffer hints) is not available on this machine.
 *
 *  @analysis The machine does not support your requirements.  If your
 *  application is sufficiently flexible, downgrade your requirements and try
 *  again.  Otherwise, inform the user that their machine does not match your
 *  requirements.
 *
 *  @par
 *  Future invalid OpenGL and OpenGL ES versions, for example OpenGL 4.8 if 5.0
 *  comes out before the 4.x series gets that far, also fail with this error and
 *  not @ref GLFW_INVALID_VALUE, because GLFW cannot know what future versions
 *  will exist.
 */
GLFW_VERSION_UNAVAILABLE        :: 0x00010007
/*! @brief A platform-specific error occurred that does not match any of the
 *  more specific categories.
 *
 *  A platform-specific error occurred that does not match any of the more
 *  specific categories.
 *
 *  @analysis A bug or configuration error in GLFW, the underlying operating
 *  system or its drivers, or a lack of required resources.  Report the issue to
 *  our [issue tracker](https://github.com/glfw/glfw/issues).
 */
GLFW_PLATFORM_ERROR             :: 0x00010008
/*! @brief The requested format is not supported or available.
 *
 *  If emitted during window creation, the requested pixel format is not
 *  supported.
 *
 *  If emitted when querying the clipboard, the contents of the clipboard could
 *  not be converted to the requested format.
 *
 *  @analysis If emitted during window creation, one or more
 *  [hard constraints](@ref window_hints_hard) did not match any of the
 *  available pixel formats.  If your application is sufficiently flexible,
 *  downgrade your requirements and try again.  Otherwise, inform the user that
 *  their machine does not match your requirements.
 *
 *  @par
 *  If emitted when querying the clipboard, ignore the error or report it to
 *  the user, as appropriate.
 */
GLFW_FORMAT_UNAVAILABLE         :: 0x00010009
/*! @brief The specified window does not have an OpenGL or OpenGL ES context.
 *
 *  A window that does not have an OpenGL or OpenGL ES context was passed to
 *  a function that requires it to have one.
 *
 *  @analysis Application programmer error.  Fix the offending call.
 */
GLFW_NO_WINDOW_CONTEXT          :: 0x0001000A
/*! @} */

/*! @addtogroup window
 *  @{ */
/*! @brief Input focus window hint and attribute
 *
 *  Input focus [window hint](@ref GLFW_FOCUSED_hint) or
 *  [window attribute](@ref GLFW_FOCUSED_attrib).
 */
GLFW_FOCUSED                    :: 0x00020001
/*! @brief Window iconification window attribute
 *
 *  Window iconification [window attribute](@ref GLFW_ICONIFIED_attrib).
 */
GLFW_ICONIFIED                  :: 0x00020002
/*! @brief Window resize-ability window hint and attribute
 *
 *  Window resize-ability [window hint](@ref GLFW_RESIZABLE_hint) and
 *  [window attribute](@ref GLFW_RESIZABLE_attrib).
 */
GLFW_RESIZABLE                  :: 0x00020003
/*! @brief Window visibility window hint and attribute
 *
 *  Window visibility [window hint](@ref GLFW_VISIBLE_hint) and
 *  [window attribute](@ref GLFW_VISIBLE_attrib).
 */
GLFW_VISIBLE                    :: 0x00020004
/*! @brief Window decoration window hint and attribute
 *
 *  Window decoration [window hint](@ref GLFW_DECORATED_hint) and
 *  [window attribute](@ref GLFW_DECORATED_attrib).
 */
GLFW_DECORATED                  :: 0x00020005
/*! @brief Window auto-iconification window hint and attribute
 *
 *  Window auto-iconification [window hint](@ref GLFW_AUTO_ICONIFY_hint) and
 *  [window attribute](@ref GLFW_AUTO_ICONIFY_attrib).
 */
GLFW_AUTO_ICONIFY               :: 0x00020006
/*! @brief Window decoration window hint and attribute
 *
 *  Window decoration [window hint](@ref GLFW_FLOATING_hint) and
 *  [window attribute](@ref GLFW_FLOATING_attrib).
 */
GLFW_FLOATING                   :: 0x00020007
/*! @brief Window maximization window hint and attribute
 *
 *  Window maximization [window hint](@ref GLFW_MAXIMIZED_hint) and
 *  [window attribute](@ref GLFW_MAXIMIZED_attrib).
 */
GLFW_MAXIMIZED                  :: 0x00020008
/*! @brief Cursor centering window hint
 *
 *  Cursor centering [window hint](@ref GLFW_CENTER_CURSOR_hint).
 */
GLFW_CENTER_CURSOR              :: 0x00020009
/*! @brief Window framebuffer transparency hint and attribute
 *
 *  Window framebuffer transparency
 *  [window hint](@ref GLFW_TRANSPARENT_FRAMEBUFFER_hint) and
 *  [window attribute](@ref GLFW_TRANSPARENT_FRAMEBUFFER_attrib).
 */
GLFW_TRANSPARENT_FRAMEBUFFER    :: 0x0002000A
/*! @brief Mouse cursor hover window attribute.
 *
 *  Mouse cursor hover [window attribute](@ref GLFW_HOVERED_attrib).
 */
GLFW_HOVERED                    :: 0x0002000B
/*! @brief Input focus on calling show window hint and attribute
 *
 *  Input focus [window hint](@ref GLFW_FOCUS_ON_SHOW_hint) or
 *  [window attribute](@ref GLFW_FOCUS_ON_SHOW_attrib).
 */
GLFW_FOCUS_ON_SHOW              :: 0x0002000C

/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_RED_BITS).
 */
GLFW_RED_BITS                   :: 0x00021001
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_GREEN_BITS).
 */
GLFW_GREEN_BITS                 :: 0x00021002
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_BLUE_BITS).
 */
GLFW_BLUE_BITS                  :: 0x00021003
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_ALPHA_BITS).
 */
GLFW_ALPHA_BITS                 :: 0x00021004
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_DEPTH_BITS).
 */
GLFW_DEPTH_BITS                 :: 0x00021005
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_STENCIL_BITS).
 */
GLFW_STENCIL_BITS               :: 0x00021006
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_ACCUM_RED_BITS).
 */
GLFW_ACCUM_RED_BITS             :: 0x00021007
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_ACCUM_GREEN_BITS).
 */
GLFW_ACCUM_GREEN_BITS           :: 0x00021008
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_ACCUM_BLUE_BITS).
 */
GLFW_ACCUM_BLUE_BITS            :: 0x00021009
/*! @brief Framebuffer bit depth hint.
 *
 *  Framebuffer bit depth [hint](@ref GLFW_ACCUM_ALPHA_BITS).
 */
GLFW_ACCUM_ALPHA_BITS           :: 0x0002100A
/*! @brief Framebuffer auxiliary buffer hint.
 *
 *  Framebuffer auxiliary buffer [hint](@ref GLFW_AUX_BUFFERS).
 */
GLFW_AUX_BUFFERS                :: 0x0002100B
/*! @brief OpenGL stereoscopic rendering hint.
 *
 *  OpenGL stereoscopic rendering [hint](@ref GLFW_STEREO).
 */
GLFW_STEREO                     :: 0x0002100C
/*! @brief Framebuffer MSAA samples hint.
 *
 *  Framebuffer MSAA samples [hint](@ref GLFW_SAMPLES).
 */
GLFW_SAMPLES                    :: 0x0002100D
/*! @brief Framebuffer sRGB hint.
 *
 *  Framebuffer sRGB [hint](@ref GLFW_SRGB_CAPABLE).
 */
GLFW_SRGB_CAPABLE               :: 0x0002100E
/*! @brief Monitor refresh rate hint.
 *
 *  Monitor refresh rate [hint](@ref GLFW_REFRESH_RATE).
 */
GLFW_REFRESH_RATE               :: 0x0002100F
/*! @brief Framebuffer double buffering hint.
 *
 *  Framebuffer double buffering [hint](@ref GLFW_DOUBLEBUFFER).
 */
GLFW_DOUBLEBUFFER               :: 0x00021010

/*! @brief Context client API hint and attribute.
 *
 *  Context client API [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CLIENT_API                 :: 0x00022001
/*! @brief Context client API major version hint and attribute.
 *
 *  Context client API major version [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_VERSION_MAJOR      :: 0x00022002
/*! @brief Context client API minor version hint and attribute.
 *
 *  Context client API minor version [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_VERSION_MINOR      :: 0x00022003
/*! @brief Context client API revision number hint and attribute.
 *
 *  Context client API revision number [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_REVISION           :: 0x00022004
/*! @brief Context robustness hint and attribute.
 *
 *  Context client API revision number [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_ROBUSTNESS         :: 0x00022005
/*! @brief OpenGL forward-compatibility hint and attribute.
 *
 *  OpenGL forward-compatibility [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_OPENGL_FORWARD_COMPAT      :: 0x00022006
/*! @brief OpenGL debug context hint and attribute.
 *
 *  OpenGL debug context [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_OPENGL_DEBUG_CONTEXT       :: 0x00022007
/*! @brief OpenGL profile hint and attribute.
 *
 *  OpenGL profile [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_OPENGL_PROFILE             :: 0x00022008
/*! @brief Context flush-on-release hint and attribute.
 *
 *  Context flush-on-release [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_RELEASE_BEHAVIOR   :: 0x00022009
/*! @brief Context error suppression hint and attribute.
 *
 *  Context error suppression [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_NO_ERROR           :: 0x0002200A
/*! @brief Context creation API hint and attribute.
 *
 *  Context creation API [hint](@ref GLFW_CLIENT_API_hint) and
 *  [attribute](@ref GLFW_CLIENT_API_attrib).
 */
GLFW_CONTEXT_CREATION_API       :: 0x0002200B
/*! @brief Window content area scaling window
 *  [window hint](@ref GLFW_SCALE_TO_MONITOR).
 */
GLFW_SCALE_TO_MONITOR           :: 0x0002200C
/*! @brief macOS specific
 *  [window hint](@ref GLFW_COCOA_RETINA_FRAMEBUFFER_hint).
 */
GLFW_COCOA_RETINA_FRAMEBUFFER   :: 0x00023001
/*! @brief macOS specific
 *  [window hint](@ref GLFW_COCOA_FRAME_NAME_hint).
 */
GLFW_COCOA_FRAME_NAME           :: 0x00023002
/*! @brief macOS specific
 *  [window hint](@ref GLFW_COCOA_GRAPHICS_SWITCHING_hint).
 */
GLFW_COCOA_GRAPHICS_SWITCHING   :: 0x00023003
/*! @brief X11 specific
 *  [window hint](@ref GLFW_X11_CLASS_NAME_hint).
 */
GLFW_X11_CLASS_NAME             :: 0x00024001
/*! @brief X11 specific
 *  [window hint](@ref GLFW_X11_CLASS_NAME_hint).
 */
GLFW_X11_INSTANCE_NAME          :: 0x00024002