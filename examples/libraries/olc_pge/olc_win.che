use import pixel_game_engine
use import pixel
use import key
use import std.string
use import std.hash_table
use import std.os.windows
use import std.os.windows_functions
use import std.os.windows_types
use import std.os.windows_constants
io :: import std.io



#export_scope

impl PixelGameEngine {
    olc_window_create :: (&Self) -> HWND {
        wc : WNDCLASS = default
        wc.hIcon = LoadIconA(null, IDI_APPLICATION)
        wc.hCursor = LoadCursorA(null, IDC_ARROW)
        wc.style = @bin_or(CS_HREDRAW, CS_VREDRAW, CS_OWNDC)
        wc.hInstance = GetModuleHandleA(null)
        wc.lpfnWndProc = olc_window_event
        wc.cbClsExtra = 0
        wc.cbWndExtra = 0
        wc.lpszMenuName = null
        wc.hbrBackground = null
        wc.lpszClassName = "OLC_PIXEL_GAME_ENGINE"
        
        RegisterClassA(^wc)


        // Define window furniture
        dwExStyle : DWORD = @bin_or(WS_EX_APPWINDOW, WS_EX_WINDOWEDGE)
        dwStyle : DWORD = @bin_or(WS_OVERLAPPEDWINDOW, WS_VISIBLE)
        rWndRect : RECT = RECT(
            0, 0,
            cast screen_width * pixel_width,
            cast screen_height * pixel_height
        )

        // // Keep client size as requested
        AdjustWindowRectEx(^rWndRect, dwStyle, 0, dwExStyle)

        width : i32 = rWndRect.right - rWndRect.left
        height : i32 = rWndRect.bottom - rWndRect.top

        olc_hWnd = CreateWindowExA(dwExStyle, "OLC_PIXEL_GAME_ENGINE", "Window Title", dwStyle, 30, 30, width, height, null, null, GetModuleHandleA(null), cast ^self)

        // Create Keyboard Mapping
        mapKeys[0x00] = Key.NONE

        mapKeys[0x41]        = Key.A
        mapKeys[0x42]        = Key.B
        mapKeys[0x43]        = Key.C
        mapKeys[0x44]        = Key.D
        mapKeys[0x45]        = Key.E

        mapKeys[0x46]        = Key.F
        mapKeys[0x47]        = Key.G
        mapKeys[0x48]        = Key.H
        mapKeys[0x49]        = Key.I
        mapKeys[0x4A]        = Key.J

        mapKeys[0x4B]        = Key.K
        mapKeys[0x4C]        = Key.L
        mapKeys[0x4D]        = Key.M
        mapKeys[0x4E]        = Key.N
        mapKeys[0x4F]        = Key.O

        mapKeys[0x50]        = Key.P
        mapKeys[0x51]        = Key.Q
        mapKeys[0x52]        = Key.R
        mapKeys[0x53]        = Key.S
        mapKeys[0x54]        = Key.T

        mapKeys[0x55]        = Key.U
        mapKeys[0x56]        = Key.V
        mapKeys[0x57]        = Key.W
        mapKeys[0x58]        = Key.X
        mapKeys[0x59]        = Key.Y

        mapKeys[0x5A]        = Key.Z

        mapKeys[VK_F1]       = Key.F1
        mapKeys[VK_F2]       = Key.F2
        mapKeys[VK_F3]       = Key.F3
        mapKeys[VK_F4]       = Key.F4

        mapKeys[VK_F5]       = Key.F5
        mapKeys[VK_F6]       = Key.F6
        mapKeys[VK_F7]       = Key.F7
        mapKeys[VK_F8]       = Key.F8

        mapKeys[VK_F9]       = Key.F9
        mapKeys[VK_F10]      = Key.F10
        mapKeys[VK_F11]      = Key.F11
        mapKeys[VK_F12]      = Key.F12

        mapKeys[VK_DOWN]     = Key.Down
        mapKeys[VK_LEFT]     = Key.Left
        mapKeys[VK_RIGHT]    = Key.Right
        mapKeys[VK_UP]       = Key.Up

        mapKeys[VK_RETURN]   = Key.Enter
        //mapKeys[VK_RETURN] = Key.RETURN

        mapKeys[VK_BACK]     = Key.Back
        mapKeys[VK_ESCAPE]   = Key.Escape
        mapKeys[VK_RETURN]   = Key.Enter
        mapKeys[VK_PAUSE]    = Key.Pause

        mapKeys[VK_SCROLL]   = Key.Scroll
        mapKeys[VK_TAB]      = Key.Tab
        mapKeys[VK_DELETE]   = Key.Del
        mapKeys[VK_HOME]     = Key.Home

        mapKeys[VK_END]      = Key.End
        mapKeys[VK_PRIOR]    = Key.PGUP
        mapKeys[VK_NEXT]     = Key.PGDN
        mapKeys[VK_INSERT]   = Key.Ins

        mapKeys[VK_SHIFT]    = Key.Shift
        mapKeys[VK_CONTROL]  = Key.Ctrl

        mapKeys[VK_SPACE]    = Key.Space

        mapKeys[0x30]        = Key.K0
        mapKeys[0x31]        = Key.K1
        mapKeys[0x32]        = Key.K2
        mapKeys[0x33]        = Key.K3
        mapKeys[0x34]        = Key.K4

        mapKeys[0x35]        = Key.K5
        mapKeys[0x36]        = Key.K6
        mapKeys[0x37]        = Key.K7
        mapKeys[0x38]        = Key.K8
        mapKeys[0x39]        = Key.K9

        mapKeys[VK_NUMPAD0]  = Key.NP0
        mapKeys[VK_NUMPAD1]  = Key.NP1
        mapKeys[VK_NUMPAD2]  = Key.NP2
        mapKeys[VK_NUMPAD3]  = Key.NP3
        mapKeys[VK_NUMPAD4]  = Key.NP4

        mapKeys[VK_NUMPAD5]  = Key.NP5
        mapKeys[VK_NUMPAD6]  = Key.NP6
        mapKeys[VK_NUMPAD7]  = Key.NP7
        mapKeys[VK_NUMPAD8]  = Key.NP8
        mapKeys[VK_NUMPAD9]  = Key.NP9

        mapKeys[VK_MULTIPLY] = Key.NpMul
        mapKeys[VK_ADD]      = Key.NpAdd
        mapKeys[VK_DIVIDE]   = Key.NpDiv
        mapKeys[VK_SUBTRACT] = Key.NpSub
        mapKeys[VK_DECIMAL]  = Key.NpDecimal

        return olc_hWnd
    }
}

pixel_game_engine_ptr : ^PixelGameEngine = null
olc_window_event :: (hwnd: HWND, msg: UINT, wparam: WPARAM, lparam: LPARAM) -> LRESULT {
    match msg {
        WM_DESTROY -> PostQuitMessage(0)
        WM_CLOSE   -> { pixel_game_engine_ptr.active = false }

        WM_CREATE -> {
            pixel_game_engine_ptr = cast(^PixelGameEngine) (cast(^CREATESTRUCTA)lparam).lpCreateParams
        }

        WM_MOUSEMOVE -> {
            x := cast(i16) @bin_and(lparam, 0xFFFF)
            y := cast(i16) @bin_and(@bin_lsr(lparam, 16), 0xFFFF)
            pixel_game_engine_ptr.olc_update_mouse(x, y)
        }

        WM_MOUSEWHEEL -> {
            delta := cast(i16) @bin_and(@bin_lsr(wparam, 16), 0xFFFF)
            pixel_game_engine_ptr.olc_update_mouse_wheel(delta)
        }

        WM_SIZE -> {
            x := cast(i16) @bin_and(lparam, 0xFFFF)
            y := cast(i16) @bin_and(@bin_lsr(lparam, 16), 0xFFFF)
            pixel_game_engine_ptr.olc_update_window_size(x, y)
        }

        WM_MOUSELEAVE   -> { pixel_game_engine_ptr.bHasMouseFocus = false }
        WM_SETFOCUS     -> { pixel_game_engine_ptr.bHasInputFocus = true }
        WM_KILLFOCUS    -> { pixel_game_engine_ptr.bHasInputFocus = false }

        WM_LBUTTONDOWN  -> { pixel_game_engine_ptr.pMouseNewState[0] = true }
        WM_LBUTTONUP    -> { pixel_game_engine_ptr.pMouseNewState[0] = false }
        WM_RBUTTONDOWN  -> { pixel_game_engine_ptr.pMouseNewState[1] = true }
        WM_RBUTTONUP    -> { pixel_game_engine_ptr.pMouseNewState[1] = false }
        WM_MBUTTONDOWN  -> { pixel_game_engine_ptr.pMouseNewState[2] = true }
        WM_MBUTTONUP    -> { pixel_game_engine_ptr.pMouseNewState[2] = false }

        WM_KEYDOWN      -> {
            match pixel_game_engine_ptr.mapKeys.get(cast(int)wparam) {
                Some($key) -> {
                    pixel_game_engine_ptr.pKeyNewState[cast(int)key] = true
                }
                None -> io.printf("[WNDPROC] failed to get key {} from keymap´`n", wparam)
            }
        }
        WM_KEYUP        -> {
            match pixel_game_engine_ptr.mapKeys.get(cast(int)wparam) {
                Some($key) -> {
                    pixel_game_engine_ptr.pKeyNewState[cast(int)key] = false
                }
                None -> io.printf("[WNDPROC] failed to get key {} from keymap´`n", wparam)
            }
        }
        
        $_ -> {
            return DefWindowProcA(hwnd, msg, wparam, lparam)
        }
    }
    
    return 0
}
