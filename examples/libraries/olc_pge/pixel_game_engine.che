#lib("OpenGL32.lib")

use import std.hash_table
use import std.mem.allocator
use import std.os.windows
use import std.os.windows_constants
use import std.os.windows_functions
use import std.os.windows_types
use import std.string
use import std.time

io :: import std.io

use import logging.logger
use import opengl.glad_binding

use import key
use import olc_win
use import pge_helper_functions
use import pge_render_functions
use import pixel
use import sprite

#export_scope

Game :: trait {
    on_create  :: (&mut Self, pge: ^PixelGameEngine) -> bool;
    on_destroy :: (&mut Self) -> bool;
    on_update  :: (&mut Self, dt: float) -> bool;
}

PixelGameEngine :: struct {
    game                : ^Game


    default_draw_target : ^mut Sprite   = null
    draw_target         : ^mut Sprite   = null

    // windows specific
    olc_hWnd            : HWND      = null

    // other stuff
    nMousePosX          : int       = 0
    nMousePosY          : int       = 0
    nMousePosXcache     : int       = 0
    nMousePosYcache     : int       = 0
    nMousePosXPrev      : int       = 0
    nMousePosYPrev      : int       = 0
    nMouseDeltaX        : int       = 0
    nMouseDeltaY        : int       = 0

    nMouseWheelDelta    : int       = 0
    nMouseWheelDeltaCache : int     = 0

    window_width        : int       = -1
    window_height       : int       = -1
    screen_width        : int       = 0
    screen_height       : int       = 0
    pixel_width         : int       = 0
    pixel_height        : int       = 0

    pixel_x             : float     = 1.0f
    pixel_y             : float     = 1.0f
    fSubPixelOffsetX    : float     = 0.0f
    fSubPixelOffsetY    : float     = 0.0f

    nPixelMode          : PixelMode = PixelMode.Normal
    fBlendFactor        : float     = 1.0f

    bHasMouseFocus      : bool      = false
    bHasInputFocus      : bool      = false

    pKeyNewState        : [256]bool = default
    pKeyOldState        : [256]bool = default
    pKeyboardState      : [256]HWButton = default

    pMouseState         : [5]HWButton = default
    pMouseOldState      : [5]bool   = default
    pMouseNewState      : [5]bool   = default

    fFrameTimer         : float     = 0
    nFrameCount         : int       = 0

    mapKeys             : Table[int, Key]

    active              : bool      = false

    // gl stuff
    glBuffer            : GLuint    = 0
    glDeviceContext     : HDC       = null
    glRenderContext     : HGLRC     = null
    opengl_initialized  := false

    // other
    auto_title          : bool      = true
    fps_string          : String
    current_fps         : int       = 0
}

compare_ints :: (a: int, b: int) -> bool {
    return b == a
}

impl Drop for PixelGameEngine {
    drop :: (&mut Self) {
        default_draw_target.dispose()
        free(default_draw_target)
        default_draw_target = null
    }
}

impl PixelGameEngine {
    create :: (game: ^Game, screen_w: int, screen_h: int, pixel_w: int = 1, pixel_h: int = 1) -> ^PixelGameEngine {
        if screen_w <= 0 or screen_h <= 0 or pixel_w <= 0 or pixel_h <= 0 {
            return null
        }

        pge := alloc(PixelGameEngine)

        *pge = PixelGameEngine(
            game = game
            screen_width = screen_w
            screen_height = screen_h
            pixel_width = pixel_w
            pixel_height = pixel_h
            pixel_x = 2.0f / cast(float) screen_w
            pixel_y = 2.0f / cast(float) screen_h
            mapKeys = Table[int, Key].create(compare_ints)
            fps_string = String.empty()
        )

        pge.default_draw_target = alloc(Sprite)
        *pge.default_draw_target = Sprite.create(screen_w, screen_h)

        pge.set_draw_target(null)

        return pge
    }

    start :: (&mut Self) {
        wnd := self.olc_window_create()
        if wnd == null {
            return
        }

        active = true
        engine_thread()
    }

    engine_thread :: (&mut Self) {
        // Start OpenGL, the context is owned by the game thread
        olc_OpenGLCreate()
        self.olc_update_window_size(window_width, window_height)

        // Create Screen Texture - disable filtering
        glEnable(GL_TEXTURE_2D)
        glGenTextures(1, ^glBuffer)
        glBindTexture(GL_TEXTURE_2D, glBuffer)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, cast GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, cast GL_NEAREST)

        glTexEnvi :: (target: GLenum, pname: GLenum, param: GLint) #stdcall;
        // glTexEnvi(0x2200, GL_TEXTURE_ENV_MODE, cast GL_DECAL) // glTexEnvf?
        glTexEnvi(0x2300, 0x2200, 0x2101)

        glTexImage2D(GL_TEXTURE_2D, 0, cast GL_RGBA, cast screen_width, cast screen_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, default_draw_target.get_data())


        // Create user resources as part of this thread
        if !game.on_create(self) {
            active = false
        }

        mut tp1 := get_time_microseconds()
        mut tp2 := get_time_microseconds()

        nMousePosXPrev = nMousePosX
        nMousePosYPrev = nMousePosY
        mut total_frames := 0
        while active {
            // Run as fast as possible
            while active {
                msg : MSG = default
                while PeekMessageA(^msg, null, 0, 0, 0x0001) > 0 {
                    TranslateMessage(^msg)
                    DispatchMessageA(^msg)
                }
                // Handle Timing
                tp2 = get_time_microseconds()
                fElapsedTime := cast(float) (cast(double) tp2 - tp1) * 0.000001
                tp1 = tp2

                // Handle User Input - Keyboard
                for i in 0..256 {
                    pKeyboardState[i].pressed = false
                    pKeyboardState[i].released = false

                    if *pKeyNewState[i] != *pKeyOldState[i] {
                        if *pKeyNewState[i] {
                            pKeyboardState[i].pressed = !pKeyboardState[i].held
                            pKeyboardState[i].held = true
                        } else {
                            pKeyboardState[i].released = true
                            pKeyboardState[i].held = false
                        }
                    }

                    *pKeyOldState[i] = *pKeyNewState[i]
                }

                // Handle User Input - Mouse
                for i in 0..5 {
                    pMouseState[i].pressed = false
                    pMouseState[i].released = false

                    if *pMouseNewState[i] != *pMouseOldState[i] {
                        if *pMouseNewState[i] {
                            pMouseState[i].pressed = !pMouseState[i].held
                            pMouseState[i].held = true
                        } else {
                            pMouseState[i].released = true
                            pMouseState[i].held = false
                        }
                    }

                    *pMouseOldState[i] = *pMouseNewState[i]
                }

                // Cache mouse coordinates so they remain
                // consistent during frame
                nMousePosX = nMousePosXcache
                nMousePosY = nMousePosYcache

                if total_frames > 0 {
                    nMouseDeltaX = nMousePosX - nMousePosXPrev
                    nMouseDeltaY = nMousePosY - nMousePosYPrev
                }
                nMousePosXPrev = nMousePosX
                nMousePosYPrev = nMousePosY

                nMouseWheelDelta = nMouseWheelDeltaCache
                nMouseWheelDeltaCache = 0

                // Handle Frame Update
                // but only if windows is not minimized (size is not 0)
                if window_width != 0 and window_height != 0 {
                    if !game.on_update(fElapsedTime) {
                        active = false
                    }
                }

                // Display Graphics
                glClear(GL_COLOR_BUFFER_BIT)

                // TODO: This is a bit slow (especially in debug, but 100x faster in release mode???)
                // Copy pixel array into texture
                glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, cast screen_width, cast screen_height, GL_RGBA, GL_UNSIGNED_BYTE, default_draw_target.get_data())

                // declare legacy gl functions
                glBegin      :: (mode: GLenum) #stdcall;
                glEnd        :: () #stdcall;
                glVertex3f   :: (x: f32, y: f32, z: f32) #stdcall;
                glTexCoord2f :: (x: f32, y: f32) #stdcall;
                glTexEnvi    :: (target: GLenum, pname: GLenum, param: GLint) #stdcall;

                // Display texture on screen
                glBegin(GL_QUADS)
                    glTexCoord2f(0.0f, 1.0f)
                    glVertex3f(-1.0f + (fSubPixelOffsetX), -1.0f + (fSubPixelOffsetY), 0.0f)
                    glTexCoord2f(0.0f, 0.0f)
                    glVertex3f(-1.0f + (fSubPixelOffsetX),  1.0f + (fSubPixelOffsetY), 0.0f)
                    glTexCoord2f(1.0f, 0.0f)
                    glVertex3f( 1.0f + (fSubPixelOffsetX),  1.0f + (fSubPixelOffsetY), 0.0f)
                    glTexCoord2f(1.0f, 1.0f)
                    glVertex3f( 1.0f + (fSubPixelOffsetX), -1.0f + (fSubPixelOffsetY), 0.0f)
                glEnd()

                // Present Graphics to screen
                SwapBuffers(glDeviceContext)

                // Update Title Bar
                fFrameTimer += fElapsedTime
                nFrameCount += 1
                if fFrameTimer >= 1.0f {
                    fFrameTimer -= 1.0f
                    current_fps = nFrameCount

                    if auto_title {
                        fps_string.resize(0)
                        fps_string.appendf("OneLoneCoder.com - Pixel Game Engine - FPS: {}", nFrameCount)
                        &fps_string += cast(char) 0

                        match fps_string.slice().to_utf16() {
                            Ok($title) -> {
                                SetWindowTextW(olc_hWnd, title.get_raw())
                                // io.println(fps_string.clone())
                            }
                            Err($title) -> SetWindowTextA(olc_hWnd, "ERROR in to_utf16()"c)
                        }

                    }
                    nFrameCount = 0
                }

                total_frames += 1
            }

            // Allow the user to free resources if they have overrided the destroy function
            if !game.on_destroy() {
                // User denied destroy for some reason, so continue running
                active = true
            }
        }

        // wglDeleteContext(glRenderContext);
        PostMessageA(olc_hWnd, WM_DESTROY, 0, 0)
    }

    olc_OpenGLCreate :: (&mut Self) -> bool {
        glDeviceContext = GetDC(olc_hWnd)

        pfd := PIXELFORMATDESCRIPTOR(
            @sizeof(PIXELFORMATDESCRIPTOR), 1,
            @bin_or(PFD_DRAW_TO_WINDOW, PFD_SUPPORT_OPENGL, PFD_DOUBLEBUFFER),
            PFD_TYPE_RGBA, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            PFD_MAIN_PLANE, 0, 0, 0, 0
        )

        pf := ChoosePixelFormat(glDeviceContext, ^pfd)
        if pf == 0 {
            return false
        }
        SetPixelFormat(glDeviceContext, pf, ^pfd)

        glRenderContext = wglCreateContext(glDeviceContext)
        if glRenderContext == null {
            return false
        }
        wglMakeCurrent(glDeviceContext, glRenderContext)

        if gladLoadGL() == 0 {
            io.println("Failed to initialize glad")
            return false
        }

        // Remove Frame cap
        wglSwapInterval := cast(fn(i32) #stdcall)wglGetProcAddress("wglSwapIntervalEXT")
        if wglSwapInterval {
            wglSwapInterval(0)
        }

        opengl_initialized = true
        return true
    }
}
