use import pixel_game_engine
use import key
use import pixel
use import sprite
use import opengl.glad_binding
use import std.string
use import std.os.windows_functions

#export_scope

impl PixelGameEngine {
    

    // hardware interfaces
    is_focused :: (ref Self) -> bool {
        return bHasInputFocus
    }

    get_key :: (ref Self, key: Key) -> HWButton {
        return pKeyboardState[cast(int)key]
    }

    get_mouse :: (ref Self, b: int) -> HWButton {
        return pMouseState[b]
    }

    get_mouse_pos :: (ref Self) -> (x: int, y: int) {
        return (nMousePosX, nMousePosY)
    }

    get_mouse_delta :: (ref Self) -> (x: int, y: int) {
        return (nMouseDeltaX, nMouseDeltaY)
    }


    get_mouse_wheel :: (ref Self) -> int {
        return nMouseWheelDelta
    }

    get_width :: (ref Self) -> int { return screen_width }
    get_height :: (ref Self) -> int { return screen_height }

    // get_window_width :: (ref Self) -> int { return window_width }
    // get_window_height :: (ref Self) -> int { return window_height }

    //
    set_draw_target :: (ref Self, target: &Sprite) {
        draw_target = if target == null { default_draw_target } else { target }
    }

    set_pixel_blend :: (ref Self, fBlend: float) {
        fBlendFactor = fBlend
        if fBlendFactor < 0.0f { fBlendFactor = 0.0f }
        if fBlendFactor > 1.0f { fBlendFactor = 1.0f }
    }

    set_pixel_mode :: (ref Self, m: PixelMode) {
        nPixelMode = m
    }

    get_pixel_mode :: (ref Self) -> PixelMode {
        return nPixelMode
    }

    //
    olc_update_window_size :: (ref Self, x: int, y: int) {
        window_width = x
        window_height = y
        screen_width = x
        screen_height = y

        default_draw_target.dispose()
        <<default_draw_target = Sprite.create(screen_width, screen_height)
        // glViewport(0, 0, cast x/2, cast y/2)
        glViewport(0, 0, cast x, cast y)
        glTexImage2D(GL_TEXTURE_2D, 0, cast GL_RGBA, cast screen_width, cast screen_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, default_draw_target.get_data())
    }

    olc_update_mouse_wheel :: (ref Self, delta: int) {
        nMouseWheelDeltaCache += delta
    }

    olc_update_mouse :: (ref Self, x: int, y: int) {
        nMousePosXcache = cast(int) (cast(float)x) / (cast(float) window_width) * (cast(float)screen_width)
        nMousePosYcache = cast(int) (cast(float)y) / (cast(float) window_height) * (cast(float)screen_height)

        if nMousePosXcache >= screen_width { nMousePosXcache = screen_width - 1 }
        if nMousePosYcache >= screen_height { nMousePosYcache = screen_height - 1 }

        if nMousePosXcache < 0 { nMousePosXcache = 0 }
        if nMousePosYcache < 0 { nMousePosYcache = 0 }
    }

    //
    set_window_title :: (ref Self, title: ref String) {
        auto_title = false
        
        fps_string.resize(0)
        fps_string.append(title)
        fps_string += char(0)

        SetWindowTextA(olc_hWnd, cast fps_string.get_raw())
    }
}

