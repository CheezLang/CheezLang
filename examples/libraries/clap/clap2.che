use import std.box
use import std.array
use import std.string

C    :: import std.c
util :: import std.util
mem  :: import std.mem.allocator
fmt  :: import std.fmt
io   :: import std.io

#export_scope

Clap :: struct {

}

ClapToken :: struct {
    loc : Location
    raw : String
}

Location :: struct #copy {
    start   : int
    end     : int
}

ClapError :: struct {
    loc : Location
    msg : String
}

CustomParser :: trait {
    parse     :: (args: []ClapToken, loc: Location) -> Option[Box[Expr]], []ClapToken;
    validate  :: (ref CustomExpr) -> Result[(), ClapError];
    get_value :: (result: &void, expr: ref CustomExpr);
}

Expr :: struct #extendable {
    typ : &TypeInfo
    loc : Location
}

EnumExpr :: struct #extend(Expr) {
    mem := Option[&TypeInfoEnumMember].None
    sub := Option[Box[Expr]].None
}

StructExpr :: struct #extend(Expr) {
    subs := Array[StructMember].create()
}

StructMember :: struct {
    loc : Location
    mem : &TypeInfoStructMember
    sub : Option[Box[Expr]]
}

ValueExpr :: struct #extend(Expr) {
    raw : String
}

EmptyExpr :: struct #extend(Expr) {
}

CustomExpr :: struct #extend(Expr) {
    sub : Box[Expr]
}

///////////////
// utilities //
///////////////

#export_scope

get_pretty_error_message :: (command: string, err: ClapError) -> String {
    msg := String.empty()

    msg.appendf("[ERROR] {}`n", err.msg.slice())
    msg.appendf("> {}`n", command)

    // print location marker, ^----
    marker := String.empty()
    for 0 .. err.loc.start do marker.append_string(" ")
    marker.append_string("^")
    for err.loc.start .. (err.loc.end - 1) do marker.append_string("-")
    msg.appendf("  {}", marker.slice())

    return msg
}

impl Clap {
    tokenize :: (str: string) -> Array[ClapToken] {
        args := Array[ClapToken].create()

        State :: enum #copy {
            Unquoted, Whitespace, Escaped, Quoted
        }
        use State
        state := Whitespace
        start := 0

        loc := Location(0, 0)
        current := String.empty()

        for c : str {
            match state, c {
                (Escaped, $c) -> {
                    state = Quoted
                    current += c
                }

                (Unquoted, $c) if char.is_whitespace(c) -> {
                    args.add(ClapToken(loc, current.clone()))
                    current.clear()
                    state = Whitespace
                }
                (Unquoted, $c) -> {
                    current += c
                }

                (Whitespace, '"') -> {
                    state = Quoted

                    loc.start = it_index + 1
                    loc.end = loc.start
                }
                (Whitespace, $c) if !char.is_whitespace(c) -> {
                    current += c
                    state = Unquoted

                    loc.start = it_index
                    loc.end = loc.start
                }

                (Quoted, '"') -> {
                    loc.end -= 1
                    args.add(ClapToken(loc, current.clone()))
                    current.clear()
                    state = Whitespace
                }

                (Quoted, '``') -> {
                    state = Escaped
                }

                (Quoted, $c) -> {
                    current += c
                }
            }

            loc.end += 1
        }

        if state == Unquoted {
            args.add(ClapToken(loc, current.clone()))
            current.clear()
        }

        return args
    }
}

create_empty_expr :: (ti: &TypeInfo, loc: Location) -> Box[Expr] {
    result := mem.alloc(EmptyExpr)
    <<result = EmptyExpr(ti, loc)
    return Box[Expr].from_pointer(cast result)
}

create_raw_expr :: (ti: &TypeInfo, token: ref ClapToken) -> Box[Expr] {
    result := mem.alloc(ValueExpr)
    <<result = ValueExpr(ti, token.loc, token.raw.clone())
    return Box[Expr].from_pointer(cast result)
}

get_completions_at :: ($T: type, args: string, pos: int) -> Array[String] {
    tokens := Clap.tokenize(args)
    result := parse_args(@type_info(T), tokens.slice())

    return get_auto_completions_at(@type_info(T), result, pos)
}

/////////////
// parsing //
/////////////

#export_scope

parse_args_from_string :: ($T: type, args: string) -> Result[Box[T], ClapError] {
    tokens := Clap.tokenize(args)
    result := parse_args(@type_info(T), tokens.slice())

    return match ref result {
        Some($result) -> match get_value(T, result.get()) {
            Ok($result) -> Ok(result)
            Err($err)   -> Err(err)
        }

        None -> Err(ClapError(Location(0, args.bytes.length), String.from_string("No arguments provided")))
    }
}

parse_args :: (ti: &TypeInfo, args: []ClapToken) -> Option[Box[Expr]] {
    return parse_args_help(ti, args, Location(0, 0))[0]
}

#file_scope

parse_args_enum :: (ti: &TypeInfo, args: []ClapToken, loc: Location) -> Option[Box[Expr]], []ClapToken {
    if args.length == 0 {
        return None, args
        // return Some(Box[Expr].from_pointer(cast result)), args
    }

    result := mem.alloc(EnumExpr)
    <<result = EnumExpr(ti, loc)

    current := ref args[0]
    result.loc = current.loc
    args = args[1..args.length]

    for(by_ref=true) mem : ti.kind.Enum.members {
        display_name := get_display_name_for_member(mem)
        if streq(display_name, current.raw.slice()) {
            result.mem = Some(&mem)
            if mem.typ != null {
                result.sub, args = parse_args_help(mem.typ, args, Location(current.loc.end, current.loc.end))
                //result.loc = Location(result.loc.start, result.sub.loc.end)
            }
            break
        }
    }

    match result.mem {
        None -> {
            // no matching enum member found, so create raw expression used for error reporting/autocomplete later
            result.sub = Some(create_raw_expr(ti, current))
        }
    }

    return Some(Box[Expr].from_pointer(cast result)), args
}

parse_args_struct :: (ti: &TypeInfo, args: []ClapToken, loc: Location) -> Option[Box[Expr]], []ClapToken {
    result := mem.alloc(StructExpr)
    <<result = StructExpr(ti, loc)

    while args.length > 0 {
        current := ref args[0]
        result.loc.start = if result.loc.start >= 0 then result.loc.start else current.loc.start
        args = args[1..args.length]

        loc := current.loc
        mem_info : &TypeInfoStructMember = null
        sub := Option[Box[Expr]].None

        // todo: handle these error cases
        if current.raw.get_length() > 0 and current.raw[0] == '-' {
            // at this point current starts with -
            current_raw := current.raw.sliceF(1)

            for(by_ref=true) mem : ti.kind.Struct.members {
                display_name := get_display_name_for_member(mem)
                if streq(display_name, current_raw) {
                    mem_info = &mem
                    sub, args = parse_args_help(mem.typ, args, Location(current.loc.end, current.loc.end))
                    // match ref sub {
                    //     Some($sub) -> {
                    //         loc.end = sub.get().loc.end
                    //     }
                    // }
                    break
                }
            }
        }

        if mem_info == null {
            // no matching struct member found, so create raw expression used for error reporting/autocomplete later
            sub = Some(create_raw_expr(null, current))
        }

        member := StructMember(loc, mem_info, sub)
        result.loc.end = member.loc.end
        result.subs.add(member)
    }

    return Some(Box[Expr].from_pointer(cast result)), args
}

parse_args_help :: (ti: &TypeInfo, args: []ClapToken, loc: Location) -> Option[Box[Expr]], []ClapToken {
    return match ti.kind {
        TypeInfoKind.Enum($info)    -> parse_args_enum(ti, args, loc)
        TypeInfoKind.Struct($info)  -> {
            custom_parser := info.get_trait_impl(CustomParser)
            if custom_parser != null {
                func := custom_parser.get_function("parse", fn([]ClapToken, Location) -> (Option[Box[Expr]], []ClapToken))
                @assert(func != null)
                return func(args, loc)
            } else {
                parse_args_struct(ti, args, loc)
            }
        }
        _ -> if args.length == 0 {
            None, args
        } else {
            Some(create_raw_expr(ti, args[0])), args[1..args.length]
        }
    }
}

/////////////////////
// get value stuff //
/////////////////////

#export_scope

get_value :: ($T: type, expr: ref Expr) -> Result[Box[T], ClapError] {
    try(validate(expr))

    result := mem.alloc(T)
    get_value_help(result, expr)
    return Ok(Box[T].from_pointer(result))
}

#file_scope

get_value_raw :: (result: &void, expr: ref ValueExpr) {
    @assert(expr.typ != null)
    match expr.typ.kind {
        TypeInfoKind.Int($info) -> {
            num := fmt.parse_int(expr.raw.slice())
            match info.signed, expr.typ.size {
                true, 1  -> { <<cast(&i8)  result = cast num }
                true, 2  -> { <<cast(&i16) result = cast num }
                true, 4  -> { <<cast(&i32) result = cast num }
                true, 8  -> { <<cast(&i64) result = cast num }
                false, 1 -> { <<cast(&u8)  result = cast num }
                false, 2 -> { <<cast(&u16) result = cast num }
                false, 4 -> { <<cast(&u32) result = cast num }
                false, 8 -> { <<cast(&u64) result = cast num }
            }
        }

        TypeInfoKind.String -> {
            <<cast(&string) result = expr.raw.slice()
        }

        _ -> @assert(false)
    }
}

get_value_help :: (result: &void, expr: ref Expr) {
    match expr {
        EnumExpr($v) -> {
            tag_type := v.typ.kind.Enum.tag_type

            member_info := match v.mem {
                Some($info) -> info
                None        -> @assert(false)
            }

            // copy tag
            tag_ptr := cast(&int) result
            <<tag_ptr = member_info.tag

            if member_info.typ != null {
                sub : ref Expr = match ref v.sub {
                    Some($sub)  -> sub.get()
                    None        -> @assert(false)
                }
                get_value_help(util.pointer_add(result, tag_type.size), sub)
            }
        }
        StructExpr($v) -> {
            // stack allocated array to track which members have been provided
            members_set := @alloca(bool, v.typ.kind.Struct.members.length)
            C.memset(members_set.data, 0, cast members_set.length * @sizeof(bool))

            for mem : v.subs {
                @assert(mem.mem != null)
                offset := mem.mem.offset
                match ref mem.sub {
                    Some($sub)  -> get_value_help(util.pointer_add(result, offset), sub.get())
                    None        -> @assert(false)
                }
                members_set[mem.mem.index] = true
            }

            for set : members_set {
                if set then continue
                mem := ref v.typ.kind.Struct.members[it_index]
                @assert(mem.initializer != null)
                member_ptr := util.pointer_add(result, mem.offset)
                mem.initializer(member_ptr)
            }
        }
        ValueExpr($v) -> {
            get_value_raw(result, v)
        }

        CustomExpr($v) -> {
            custom_parser := v.typ.kind.Struct.get_trait_impl(CustomParser)
            @assert(custom_parser != null)
            get_value_func := custom_parser.get_function("get_value", fn(&void, ref CustomExpr))
            @assert(get_value_func != null)
            get_value_func(result, v)
        }
    }
}

////////////////
// validation //
////////////////

#export_scope

validate :: (expr: ref Expr) -> Result[(), ClapError] {
    if expr.typ == null {
        return Err(ClapError(expr.loc, String.from_string("Type of expr is null")))
    }

    return match expr {
        EnumExpr($v) -> {
            match ref v.mem {
                Some($mem) -> {
                    if mem.typ != null {
                        match ref v.sub {
                            Some($sub)  -> validate(sub.get())
                            None        -> Err(ClapError(Location(v.loc.end + 1, v.loc.end + 1), fmt.format("Missing argument for {}", [v.typ.kind.Enum.name])))
                        }
                    } else {
                        Ok(())
                    }
                }

                None -> {
                    match ref v.sub {
                        Some($sub) -> match ref sub.get() {
                            ValueExpr($raw) -> Err(ClapError(raw.loc, fmt.format("Unknown argument {}", [raw.raw.slice()])))
                            _               -> @assert(false)
                        }
                        None -> Err(ClapError(v.loc, fmt.format("Missing argument {}", [v.typ.kind.Enum.name])))
                    }
                }
            }
        }
        StructExpr($v) -> {
            // stack allocated array to track which members have been provided
            members_set := @alloca(bool, v.typ.kind.Struct.members.length)
            C.memset(members_set.data, 0, cast members_set.length * @sizeof(bool))

            for mem : v.subs {
                if mem.mem == null {
                    match ref mem.sub {
                        Some($sub) -> {
                            match sub.get() {
                                ValueExpr($raw) -> {
                                    return Err(ClapError(raw.loc, fmt.format("Unknown argument {}", [raw.raw.slice()])))
                                }
                                _ -> @assert(false)
                            }
                        }
                        None -> @assert(false)
                    }
                }

                match ref mem.sub {
                    Some($sub)  -> try(validate(sub.get()))
                    None        -> {
                        return Err(ClapError(mem.loc, fmt.format("Missing value for argument '{}'", [get_display_name_for_member(mem.mem)])))
                    }
                }

                if members_set[mem.mem.index] {
                    return Err(ClapError(mem.loc, fmt.format("Duplicate argument '{}'", [get_display_name_for_member(mem.mem)])))
                }
                members_set[mem.mem.index] = true
            }

            for set : members_set {
                if set then continue

                mem := ref v.typ.kind.Struct.members[it_index]
                if mem.initializer != null then continue

                return Err(ClapError(v.loc, fmt.format("Missing argument '{}'", [get_display_name_for_member(mem)])))
            }
            Ok(())
        }
        ValueExpr($v) -> validate_raw(v)

        CustomExpr($v) -> {
            custom_parser := v.typ.kind.Struct.get_trait_impl(CustomParser)
            @assert(custom_parser != null)
            validate_func := custom_parser.get_function("validate", fn(ref CustomExpr) -> Result[(), ClapError])
            @assert(validate_func != null)
            validate_func(v)
        }

        _ -> {
            @assert(false)
            Ok(())
        }
    }
}

#file_scope

validate_raw :: (expr: ref ValueExpr) -> Result[(), ClapError] {
    @assert(expr.typ != null)

    match expr.typ.kind {
        TypeInfoKind.Int($info) -> {
            // todo: check that the raw string is indeed a number
        }
    }
    return Ok(())
}

/////////////////////
// auto completion //
/////////////////////

#export_scope

get_auto_completions_at :: (ti: &TypeInfo, expr: ref Option[Box[Expr]], pos: int) -> Array[String] {
    result := Array[String].create()

    match expr {
        Some($expr) -> get_auto_completions_at_helper(result, expr.get(), pos)
        None        -> autocomplete_type_members(ti, "", result)
    }

    return result
}

#file_scope

get_auto_completions_at_helper :: (result: ref Array[String], expr: ref Expr, pos: int) {
    match expr {
        StructExpr($v)  -> get_auto_completions_at_struct(result, v, pos)
        EnumExpr($v)    -> get_auto_completions_at_enum(result, v, pos)
    }
}

get_auto_completions_at_struct :: (result: ref Array[String], expr: ref StructExpr, pos: int) {
    // find sub from back
    found_sub := false
    for(reverse=true) sub : expr.subs {
        if pos >= sub.loc.start {
            if sub.mem != null {
                match ref sub.sub {
                    Some($sub) if sub.get().loc.contains(pos) -> {
                        found_sub = true
                        get_auto_completions_at_helper(result, sub.get(), pos)
                    }

                    Some(_) if sub.loc.contains(pos) -> {
                        found_sub = true
                    }

                    None -> {
                        found_sub = true
                        autocomplete_type_members(sub.mem.typ, "", result)
                    }
                }

                match ref sub.sub {
                    Some($s) if pos > s.get().loc.end   -> autocomplete_type_members(sub.mem.typ, "", result)
                    None     if pos > sub.loc.end       -> autocomplete_type_members(sub.mem.typ, "", result)
                }
            } else {
                match ref sub.sub {
                    Some($sub) -> {
                        // sub must be a ValueExpr since mem is null
                        match ref sub.get() {
                            ValueExpr($val) -> {
                                // member name is not fully specified, so if its at the end
                                // of the name, complete it, otherwise don't

                                if val.loc.contains(pos) {
                                    found_sub = true

                                    offset := pos - val.loc.start
                                    raw := val.raw.slice()

                                    @assert(offset >= 0 and offset <= raw.bytes.length)

                                    string_to_complete := raw[0..offset]
                                    type_to_complete   := expr.typ
                                    // io.formatln("[mem] off: {}, raw: {}, to_complete: {}, typ: {}", [offset, raw, string_to_complete, int(type_to_complete)])
                                    autocomplete_type_members(type_to_complete, string_to_complete, result)
                                }
                            }

                            _ -> @assert(false)
                        }
                    }

                    None -> @assert(false)
                }
            }

            break
        }
    }

    if !found_sub {
        autocomplete_type_members(expr.typ, "", result)
    }
}

get_auto_completions_at_enum :: (result: ref Array[String], expr: ref EnumExpr, pos: int) {
    if pos < expr.loc.start {
        return
    }

    if expr.loc.contains(pos) {
        match ref expr.mem {
            Some($mem) -> {
                // full command, but maybe a prefix of a longer command
                // todo
                io.println("TODO")
            }

            None -> {
                // partial command
                @assert(expr.sub == Option[Box[Expr]].Some)
                match ref expr.sub.Some.get() {
                    ValueExpr($val) -> {
                        offset := pos - val.loc.start
                        raw := val.raw.slice()

                        @assert(offset >= 0 and offset <= raw.bytes.length)

                        string_to_complete := raw[0..offset]
                        type_to_complete   := val.typ
                        autocomplete_type_members(type_to_complete, string_to_complete, result)
                    }

                    _ -> @assert(false)
                }
            }
        }
        return
    }

    match ref expr.mem {
        None -> {
            // we don't even know which member, so no point in auto completing anything
        }

        Some($mem) -> {
            if mem.typ == null {
                // this enum member has no associated typ, so no need to do anything
                return
            }
            
            match ref expr.sub {
                Some($sub) -> {
                    if pos >= sub.get().loc.start {
                        get_auto_completions_at_helper(result, sub.get(), pos)
                    }
                }

                None -> {
                    // wo still need the member but nothing comes after the enum member
                    autocomplete_type_members(mem.typ, "", result)
                }
            }
        }
    }

}

autocomplete_type_members :: (ti: &TypeInfo, prefix: string, result: ref Array[String]) {
    match ti.kind {
        TypeInfoKind.Enum($info) -> {
            for(by_ref=true) mem : info.members {
                name := get_display_name_for_member(mem)
                if name.bytes.length != prefix.bytes.length and name.starts_with(prefix) {
                    remainder := name.sub_string(prefix.bytes.length)
                    result.add(String.from_string(remainder))
                }
            }
        }

        TypeInfoKind.Struct($info) -> {
            if prefix.bytes.length == 0 {
                for(by_ref=true) mem : info.members {
                    result.add(fmt.format("-{}", [mem.name]))
                }
            } else if prefix[0] == u8('-') {
                prefix := prefix.sub_string(1)
                for(by_ref=true) mem : info.members {
                    is_prefix := mem.name.starts_with(prefix)
                    if !is_prefix then continue
                    if mem.name.bytes.length < prefix.bytes.length {
                        remainder := mem.name.sub_string(prefix.bytes.length)
                        result.add(String.from_string(remainder))
                    }
                }
            } else {
                // prefix doesn't start with '-'
                // do nothing
            }
        }
    }
}

/////////////
// helpers //
/////////////

#file_scope

get_display_name_for_member :: (mem: ref $T) -> string {
    name_att := mem.get_attribute("name")
    if name_att == null {
        return mem.name
    }

    @assert(name_att.args.length == 1)
    @assert(@type_info_of_any(name_att.args[0]) == @type_info(string))
    name := <<cast(&string) @ptr_of_any(name_att.args[0])
    return name
}

impl Location {
    contains :: (ref Self, pos: int) -> bool {
        return pos >= start and pos <= end
    }

    before :: (ref Self, pos: int) -> bool {
        return pos >= end
    }
}