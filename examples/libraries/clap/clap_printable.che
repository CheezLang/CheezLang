use import std.box
use import std.string
use import std.printable
use import std.array

fmt  :: import std.fmt
io   :: import std.io

use import clap2

impl Printable for Expr {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            EnumExpr($v)    -> v.print(str, format)
            StructExpr($v)  -> v.print(str, format)
            ValueExpr($v)   -> v.print(str, format)
            CustomExpr($v)  -> str.append_string("custom()")
            EmptyExpr($v)   -> str.append_string("empty()")
        }
    }
}

impl Printable for EnumExpr {
    print :: (ref Self, str: ref String, format: string) {
        // str.appendf("{}", int(typ))
        sub_str := match ref sub {
            Some($sub)  -> fmt.format("Some({})", [sub.get()])
            None        -> String.from_string("None")
        }
        mem_name := match ref mem {
            Some($mem)  -> mem.name
            None        -> "?"
        }
        result := fmt.format("enum({}.{}, loc={}, sub={})", [typ.kind.Enum.name, mem_name, loc, sub_str.slice()])
        str.append(result)
    }
}

impl Printable for StructExpr {
    print :: (ref Self, str: ref String, format: string) {
        sub_str := String.empty()
        for mem : subs {
            if it_index > 0 {
                sub_str.append_string(", ")
            }
            sub_str.appendf("member({}, loc={}, sub=", (if mem.mem != null then mem.mem.name else "?", mem.loc))
            match ref mem.sub {
                Some($sub)  -> sub.get().print(sub_str, "")
                None        -> sub_str.append_string("None")
                _           -> @assert(false)
            }
            sub_str.append_string(")")
        }
        result := fmt.format("struct({}, loc={}, subs=[{}])", [typ.kind.Struct.name, loc, sub_str])
        str.append(result)
    }
}

impl Printable for ValueExpr {
    print :: (ref Self, str: ref String, format: string) {
        result := fmt.format("value(typ={}, loc={}, raw='{}')", [int(typ), loc, raw.slice()])
        str.append(result)
    }
}

impl Printable for Location {
    print :: (ref Self, str: ref String, format: string) {
        str.appendf("{}..{}", (start, end))
    }
}

impl Printable for ClapError {
    print :: (ref Self, str: ref String, format: string) {
        msg := fmt.format("{}, {}", [loc, msg])
        str.append(msg)
    }
}