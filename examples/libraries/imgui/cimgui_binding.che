#lib("./lib/cimgui.lib")

#export_scope

size_t          :: u64
ImGuiStorage    :: void
ImGuiTextFilter :: void
ImGuiTextBuffer :: void
ImDrawData      :: void
ImFontAtlas     :: void
ImGuiInputTextCallbackData :: void
ImGuiInputTextCallback :: fn(&void) -> int

ImVec2_Simple :: struct #copy {
    x : f32 = default
    y : f32 = default
}
ImVec4_Simple :: struct #copy {
    x : f32 = default
    y : f32 = default
    z : f32 = default
    w : f32 = default
}
ImColor_Simple :: struct #copy {
    Value : ImVec4_Simple = default
}
ImVec2_ImVec2 :: () -> &i32;
ImVec2_destroy :: (_self: &i32) -> void;
ImVec2_ImVec2Float :: () -> &i32;
ImVec4_ImVec4 :: () -> &i32;
ImVec4_destroy :: (_self: &i32) -> void;
ImVec4_ImVec4Float :: () -> &i32;
igCreateContext :: (shared_font_atlas: &ImFontAtlas) -> &i32;
igDestroyContext :: (_ctx: &i32) -> void;
igGetCurrentContext :: () -> &i32;
igSetCurrentContext :: (_ctx: &i32) -> void;
igDebugCheckVersionAndDataLayout :: (_version_str: &char8, _sz_io: size_t, _sz_style: size_t, _sz_vec2: size_t, _sz_vec4: size_t, _sz_drawvert: size_t, _sz_drawidx: size_t) -> bool;
igGetIO :: () -> &i32;
igGetStyle :: () -> &i32;
igNewFrame :: () -> void;
igEndFrame :: () -> void;
igRender :: () -> void;
igGetDrawData :: () -> &i32;
igShowDemoWindow :: (_p_open: &bool) -> void;
igShowAboutWindow :: (_p_open: &bool) -> void;
igShowMetricsWindow :: (_p_open: &bool) -> void;
igShowStyleEditor :: (_ref: &i32) -> void;
igShowStyleSelector :: (_label: &char8) -> bool;
igShowFontSelector :: (_label: &char8) -> void;
igShowUserGuide :: () -> void;
igGetVersion :: () -> &char8;
igStyleColorsDark :: (_dst: &i32) -> void;
igStyleColorsClassic :: (_dst: &i32) -> void;
igStyleColorsLight :: (_dst: &i32) -> void;
igBegin :: (_name: &char8, _p_open: &bool, _flags: i32) -> bool;
igEnd :: () -> void;
igBeginChild :: (_str_id: &char8, _size: i32, _border: bool, _flags: i32) -> bool;
igBeginChildID :: (_id: i32, _size: i32, _border: bool, _flags: i32) -> bool;
igEndChild :: () -> void;
igIsWindowAppearing :: () -> bool;
igIsWindowCollapsed :: () -> bool;
igIsWindowFocused :: (_flags: i32) -> bool;
igIsWindowHovered :: (_flags: i32) -> bool;
igGetWindowDrawList :: () -> &i32;
igGetWindowPos :: () -> i32;
igGetWindowSize :: () -> i32;
igGetWindowWidth :: () -> f32;
igGetWindowHeight :: () -> f32;
igSetNextWindowPos :: (_pos: i32, _cond: i32, _pivot: i32) -> void;
igSetNextWindowSize :: (_size: i32, _cond: i32) -> void;
igSetNextWindowSizeConstraints :: (_size_min: i32, _size_max: i32, _custom_callback: i32, _custom_callback_data: &void) -> void;
igSetNextWindowContentSize :: (_size: i32) -> void;
igSetNextWindowCollapsed :: (_collapsed: bool, _cond: i32) -> void;
igSetNextWindowFocus :: () -> void;
igSetNextWindowBgAlpha :: (_alpha: f32) -> void;
igSetWindowPosVec2 :: (_pos: i32, _cond: i32) -> void;
igSetWindowSizeVec2 :: (_size: i32, _cond: i32) -> void;
igSetWindowCollapsedBool :: (_collapsed: bool, _cond: i32) -> void;
igSetWindowFocus :: () -> void;
igSetWindowFontScale :: (_scale: f32) -> void;
igSetWindowPosStr :: (_name: &char8, _pos: i32, _cond: i32) -> void;
igSetWindowSizeStr :: (_name: &char8, _size: i32, _cond: i32) -> void;
igSetWindowCollapsedStr :: (_name: &char8, _collapsed: bool, _cond: i32) -> void;
igSetWindowFocusStr :: (_name: &char8) -> void;
igGetContentRegionMax :: () -> i32;
igGetContentRegionAvail :: () -> i32;
igGetWindowContentRegionMin :: () -> i32;
igGetWindowContentRegionMax :: () -> i32;
igGetWindowContentRegionWidth :: () -> f32;
igGetScrollX :: () -> f32;
igGetScrollY :: () -> f32;
igGetScrollMaxX :: () -> f32;
igGetScrollMaxY :: () -> f32;
igSetScrollX :: (_scroll_x: f32) -> void;
igSetScrollY :: (_scroll_y: f32) -> void;
igSetScrollHereX :: (_center_x_ratio: f32) -> void;
igSetScrollHereY :: (_center_y_ratio: f32) -> void;
igSetScrollFromPosX :: (_local_x: f32, _center_x_ratio: f32) -> void;
igSetScrollFromPosY :: (_local_y: f32, _center_y_ratio: f32) -> void;
igPushFont :: (_font: &i32) -> void;
igPopFont :: () -> void;
igPushStyleColorU32 :: (_idx: i32, _col: i32) -> void;
igPushStyleColor :: (_idx: i32, _col: i32) -> void;
igPopStyleColor :: (_count: i32) -> void;
igPushStyleVarFloat :: (_idx: i32, _val: f32) -> void;
igPushStyleVarVec2 :: (_idx: i32, _val: i32) -> void;
igPopStyleVar :: (_count: i32) -> void;
igGetStyleColorVec4 :: () -> &i32;
igGetFont :: () -> &i32;
igGetFontSize :: () -> f32;
igGetFontTexUvWhitePixel :: () -> i32;
igGetColorU32 :: () -> i32;
igGetColorU32Vec4 :: () -> i32;
igGetColorU32U32 :: () -> i32;
igPushItemWidth :: (_item_width: f32) -> void;
igPopItemWidth :: () -> void;
igSetNextItemWidth :: (_item_width: f32) -> void;
igCalcItemWidth :: () -> f32;
igPushTextWrapPos :: (_wrap_local_pos_x: f32) -> void;
igPopTextWrapPos :: () -> void;
igPushAllowKeyboardFocus :: (_allow_keyboard_focus: bool) -> void;
igPopAllowKeyboardFocus :: () -> void;
igPushButtonRepeat :: (_repeat: bool) -> void;
igPopButtonRepeat :: () -> void;
igSeparator :: () -> void;
igSameLine :: (_offset_from_start_x: f32, _spacing: f32) -> void;
igNewLine :: () -> void;
igSpacing :: () -> void;
igDummy :: (_size: i32) -> void;
igIndent :: (_indent_w: f32) -> void;
igUnindent :: (_indent_w: f32) -> void;
igBeginGroup :: () -> void;
igEndGroup :: () -> void;
igGetCursorPos :: () -> i32;
igGetCursorPosX :: () -> f32;
igGetCursorPosY :: () -> f32;
igSetCursorPos :: (_local_pos: i32) -> void;
igSetCursorPosX :: (_local_x: f32) -> void;
igSetCursorPosY :: (_local_y: f32) -> void;
igGetCursorStartPos :: () -> i32;
igGetCursorScreenPos :: () -> i32;
igSetCursorScreenPos :: (_pos: i32) -> void;
igAlignTextToFramePadding :: () -> void;
igGetTextLineHeight :: () -> f32;
igGetTextLineHeightWithSpacing :: () -> f32;
igGetFrameHeight :: () -> f32;
igGetFrameHeightWithSpacing :: () -> f32;
igPushIDStr :: (_str_id: &char8) -> void;
igPushIDRange :: (_str_id_begin: &char8, _str_id_end: &char8) -> void;
igPushIDPtr :: (_ptr_id: &void) -> void;
igPushIDInt :: (_int_id: i32) -> void;
igPopID :: () -> void;
igGetIDStr :: () -> i32;
igGetIDRange :: () -> i32;
igGetIDPtr :: () -> i32;
igTextUnformatted :: (_text: &char8, _text_end: &char8) -> void;
igText :: (_fmt: &char8) -> void;
igTextColored :: (_col: i32, _fmt: &char8) -> void;
igTextDisabled :: (_fmt: &char8) -> void;
igTextWrapped :: (_fmt: &char8) -> void;
igLabelText :: (_label: &char8, _fmt: &char8) -> void;
igBulletText :: (_fmt: &char8) -> void;
igButton :: (_label: &char8, _size: i32) -> bool;
igSmallButton :: (_label: &char8) -> bool;
igInvisibleButton :: (_str_id: &char8, _size: i32) -> bool;
igArrowButton :: (_str_id: &char8, _dir: i32) -> bool;
igImage :: (_user_texture_id: i32, _size: i32, _uv0: i32, _uv1: i32, _tint_col: i32, _border_col: i32) -> void;
igImageButton :: (_user_texture_id: i32, _size: i32, _uv0: i32, _uv1: i32, _frame_padding: i32, _bg_col: i32, _tint_col: i32) -> bool;
igCheckbox :: (_label: &char8, _v: &bool) -> bool;
igCheckboxFlags :: (_label: &char8, _flags: &u32, _flags_value: u32) -> bool;
igRadioButtonBool :: (_label: &char8, _active: bool) -> bool;
igRadioButtonIntPtr :: (_label: &char8, _v: &i32, _v_button: i32) -> bool;
igProgressBar :: (_fraction: f32, _size_arg: i32, _overlay: &char8) -> void;
igBullet :: () -> void;
igBeginCombo :: (_label: &char8, _preview_value: &char8, _flags: i32) -> bool;
igEndCombo :: () -> void;
igCombo :: (_label: &char8, _current_item: &i32, _items: &&char8, _items_count: i32, _popup_max_height_in_items: i32) -> bool;
igComboStr :: (_label: &char8, _current_item: &i32, _items_separated_by_zeros: &char8, _popup_max_height_in_items: i32) -> bool;
igComboFnPtr :: (_label: &char8, _current_item: &i32, _items_getter: fn(&void, i32, &&char8) -> bool, _data: &void, _items_count: i32, _popup_max_height_in_items: i32) -> bool;
igDragFloat :: (_label: &char8, _v: &f32, _v_speed: f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igDragFloat2 :: (_label: &char8, _v: &f32, _v_speed: f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igDragFloat3 :: (_label: &char8, _v: &f32, _v_speed: f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igDragFloat4 :: (_label: &char8, _v: &f32, _v_speed: f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igDragFloatRange2 :: (_label: &char8, _v_current_min: &f32, _v_current_max: &f32, _v_speed: f32, _v_min: f32, _v_max: f32, _format: &char8, _format_max: &char8, _power: f32) -> bool;
igDragInt :: (_label: &char8, _v: &i32, _v_speed: f32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igDragInt2 :: (_label: &char8, _v: &i32, _v_speed: f32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igDragInt3 :: (_label: &char8, _v: &i32, _v_speed: f32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igDragInt4 :: (_label: &char8, _v: &i32, _v_speed: f32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igDragIntRange2 :: (_label: &char8, _v_current_min: &i32, _v_current_max: &i32, _v_speed: f32, _v_min: i32, _v_max: i32, _format: &char8, _format_max: &char8) -> bool;
igDragScalar :: (_label: &char8, _data_type: i32, _p_data: &void, _v_speed: f32, _p_min: &void, _p_max: &void, _format: &char8, _power: f32) -> bool;
igDragScalarN :: (_label: &char8, _data_type: i32, _p_data: &void, _components: i32, _v_speed: f32, _p_min: &void, _p_max: &void, _format: &char8, _power: f32) -> bool;
igSliderFloat :: (_label: &char8, _v: &f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igSliderFloat2 :: (_label: &char8, _v: &f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igSliderFloat3 :: (_label: &char8, _v: &f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igSliderFloat4 :: (_label: &char8, _v: &f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igSliderAngle :: (_label: &char8, _v_rad: &f32, _v_degrees_min: f32, _v_degrees_max: f32, _format: &char8) -> bool;
igSliderInt :: (_label: &char8, _v: &i32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igSliderInt2 :: (_label: &char8, _v: &i32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igSliderInt3 :: (_label: &char8, _v: &i32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igSliderInt4 :: (_label: &char8, _v: &i32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igSliderScalar :: (_label: &char8, _data_type: i32, _p_data: &void, _p_min: &void, _p_max: &void, _format: &char8, _power: f32) -> bool;
igSliderScalarN :: (_label: &char8, _data_type: i32, _p_data: &void, _components: i32, _p_min: &void, _p_max: &void, _format: &char8, _power: f32) -> bool;
igVSliderFloat :: (_label: &char8, _size: i32, _v: &f32, _v_min: f32, _v_max: f32, _format: &char8, _power: f32) -> bool;
igVSliderInt :: (_label: &char8, _size: i32, _v: &i32, _v_min: i32, _v_max: i32, _format: &char8) -> bool;
igVSliderScalar :: (_label: &char8, _size: i32, _data_type: i32, _p_data: &void, _p_min: &void, _p_max: &void, _format: &char8, _power: f32) -> bool;
igInputText :: (_label: &char8, _buf: &char8, _buf_size: size_t, _flags: i32 = 0, _callback: ImGuiInputTextCallback = null, _user_data: &void = null) -> bool;
igInputTextMultiline :: (_label: &char8, _buf: &char8, _buf_size: size_t, _size: i32, _flags: i32, _callback: i32, _user_data: &void) -> bool;
igInputTextWithHint :: (_label: &char8, _hint: &char8, _buf: &char8, _buf_size: size_t, _flags: i32, _callback: i32, _user_data: &void) -> bool;
igInputFloat :: (_label: &char8, _v: &f32, _step: f32 = 0, _step_fast: f32 = 0, _format: &char8 = "%.3f", _flags: i32 = 0) -> bool;
igInputFloat2 :: (_label: &char8, _v: &f32, _format: &char8, _flags: i32) -> bool;
igInputFloat3 :: (_label: &char8, _v: &f32, _format: &char8, _flags: i32) -> bool;
igInputFloat4 :: (_label: &char8, _v: &f32, _format: &char8, _flags: i32) -> bool;
igInputInt :: (_label: &char8, _v: &i32, _step: i32, _step_fast: i32, _flags: i32) -> bool;
igInputInt2 :: (_label: &char8, _v: &i32, _flags: i32) -> bool;
igInputInt3 :: (_label: &char8, _v: &i32, _flags: i32) -> bool;
igInputInt4 :: (_label: &char8, _v: &i32, _flags: i32) -> bool;
igInputDouble :: (_label: &char8, _v: &f64, _step: f64 = 0, _step_fast: f64 = 0, _format: &char8 = "%.6f", _flags: i32 = 0) -> bool;
igInputScalar :: (_label: &char8, _data_type: i32, _p_data: &void, _p_step: &void, _p_step_fast: &void, _format: &char8, _flags: i32) -> bool;
igInputScalarN :: (_label: &char8, _data_type: i32, _p_data: &void, _components: i32, _p_step: &void, _p_step_fast: &void, _format: &char8, _flags: i32) -> bool;
igColorEdit3 :: (_label: &char8, _col: &f32, _flags: i32) -> bool;
igColorEdit4 :: (_label: &char8, _col: &f32, _flags: i32) -> bool;
igColorPicker3 :: (_label: &char8, _col: &f32, _flags: i32) -> bool;
igColorPicker4 :: (_label: &char8, _col: &f32, _flags: i32, _ref_col: &f32) -> bool;
igColorButton :: (_desc_id: &char8, _col: i32, _flags: i32, _size: i32) -> bool;
igSetColorEditOptions :: (_flags: i32) -> void;
igTreeNodeStr :: (_label: &char8) -> bool;
igTreeNodeStrStr :: (_str_id: &char8, _fmt: &char8) -> bool;
igTreeNodePtr :: (_ptr_id: &void, _fmt: &char8) -> bool;
igTreeNodeExStr :: (_label: &char8, _flags: i32) -> bool;
igTreeNodeExStrStr :: (_str_id: &char8, _flags: i32, _fmt: &char8) -> bool;
igTreeNodeExPtr :: (_ptr_id: &void, _flags: i32, _fmt: &char8) -> bool;
igTreePushStr :: (_str_id: &char8) -> void;
igTreePushPtr :: (_ptr_id: &void) -> void;
igTreePop :: () -> void;
igGetTreeNodeToLabelSpacing :: () -> f32;
igCollapsingHeader :: (_label: &char8, _flags: i32) -> bool;
igCollapsingHeaderBoolPtr :: (_label: &char8, _p_open: &bool, _flags: i32) -> bool;
igSetNextItemOpen :: (_is_open: bool, _cond: i32) -> void;
igSelectable :: (_label: &char8, _selected: bool, _flags: i32, _size: i32) -> bool;
igSelectableBoolPtr :: (_label: &char8, _p_selected: &bool, _flags: i32, _size: i32) -> bool;
igListBoxStr_arr :: (_label: &char8, _current_item: &i32, _items: &&char8, _items_count: i32, _height_in_items: i32) -> bool;
igListBoxFnPtr :: (_label: &char8, _current_item: &i32, _items_getter: fn(&void, i32, &&char8) -> bool, _data: &void, _items_count: i32, _height_in_items: i32 = -1) -> bool;
igListBoxHeaderVec2 :: (_label: &char8, _size: i32) -> bool;
igListBoxHeaderInt :: (_label: &char8, _items_count: i32, _height_in_items: i32) -> bool;
igListBoxFooter :: () -> void;
igPlotLines :: (_label: &char8, _values: &f32, _values_count: i32, _values_offset: i32, _overlay_text: &char8, _scale_min: f32, _scale_max: f32, _graph_size: i32, _stride: i32) -> void;
igPlotLinesFnPtr :: (_label: &char8, _values_getter: fn(&void, i32) -> f32, _data: &void, _values_count: i32, _values_offset: i32, _overlay_text: &char8, _scale_min: f32, _scale_max: f32, _graph_size: i32) -> void;
igPlotHistogramFloatPtr :: (_label: &char8, _values: &f32, _values_count: i32, _values_offset: i32, _overlay_text: &char8, _scale_min: f32, _scale_max: f32, _graph_size: i32, _stride: i32) -> void;
igPlotHistogramFnPtr :: (_label: &char8, _values_getter: fn(&void, i32) -> f32, _data: &void, _values_count: i32, _values_offset: i32, _overlay_text: &char8, _scale_min: f32, _scale_max: f32, _graph_size: i32) -> void;
igValueBool :: (_prefix: &char8, _b: bool) -> void;
igValueInt :: (_prefix: &char8, _v: i32) -> void;
igValueUint :: (_prefix: &char8, _v: u32) -> void;
igValueFloat :: (_prefix: &char8, _v: f32, _float_format: &char8) -> void;
igBeginMenuBar :: () -> bool;
igEndMenuBar :: () -> void;
igBeginMainMenuBar :: () -> bool;
igEndMainMenuBar :: () -> void;
igBeginMenu :: (_label: &char8, _enabled: bool) -> bool;
igEndMenu :: () -> void;
igMenuItemBool :: (_label: &char8, _shortcut: &char8, _selected: bool, _enabled: bool) -> bool;
igMenuItemBoolPtr :: (_label: &char8, _shortcut: &char8, _p_selected: &bool, _enabled: bool) -> bool;
igBeginTooltip :: () -> void;
igEndTooltip :: () -> void;
igSetTooltip :: (_fmt: &char8) -> void;
igOpenPopup :: (_str_id: &char8) -> void;
igBeginPopup :: (_str_id: &char8, _flags: i32) -> bool;
igBeginPopupContextItem :: (_str_id: &char8, _mouse_button: i32) -> bool;
igBeginPopupContextWindow :: (_str_id: &char8, _mouse_button: i32, _also_over_items: bool) -> bool;
igBeginPopupContextVoid :: (_str_id: &char8, _mouse_button: i32) -> bool;
igBeginPopupModal :: (_name: &char8, _p_open: &bool, _flags: i32) -> bool;
igEndPopup :: () -> void;
igOpenPopupOnItemClick :: (_str_id: &char8, _mouse_button: i32) -> bool;
igIsPopupOpen :: (_str_id: &char8) -> bool;
igCloseCurrentPopup :: () -> void;
igColumns :: (_count: i32, _id: &char8, _border: bool) -> void;
igNextColumn :: () -> void;
igGetColumnIndex :: () -> i32;
igGetColumnWidth :: (_column_index: i32) -> f32;
igSetColumnWidth :: (_column_index: i32, _width: f32) -> void;
igGetColumnOffset :: (_column_index: i32) -> f32;
igSetColumnOffset :: (_column_index: i32, _offset_x: f32) -> void;
igGetColumnsCount :: () -> i32;
igBeginTabBar :: (_str_id: &char8, _flags: i32) -> bool;
igEndTabBar :: () -> void;
igBeginTabItem :: (_label: &char8, _p_open: &bool, _flags: i32) -> bool;
igEndTabItem :: () -> void;
igSetTabItemClosed :: (_tab_or_docked_window_label: &char8) -> void;
igLogToTTY :: (_auto_open_depth: i32) -> void;
igLogToFile :: (_auto_open_depth: i32, _filename: &char8) -> void;
igLogToClipboard :: (_auto_open_depth: i32) -> void;
igLogFinish :: () -> void;
igLogButtons :: () -> void;
igBeginDragDropSource :: (_flags: i32) -> bool;
igSetDragDropPayload :: (_type: &char8, _data: &void, _sz: size_t, _cond: i32) -> bool;
igEndDragDropSource :: () -> void;
igBeginDragDropTarget :: () -> bool;
igAcceptDragDropPayload :: () -> &i32;
igEndDragDropTarget :: () -> void;
igGetDragDropPayload :: () -> &i32;
igPushClipRect :: (_clip_rect_min: i32, _clip_rect_max: i32, _intersect_with_current_clip_rect: bool) -> void;
igPopClipRect :: () -> void;
igSetItemDefaultFocus :: () -> void;
igSetKeyboardFocusHere :: (_offset: i32) -> void;
igIsItemHovered :: (_flags: i32) -> bool;
igIsItemActive :: () -> bool;
igIsItemFocused :: () -> bool;
igIsItemClicked :: (_mouse_button: i32) -> bool;
igIsItemVisible :: () -> bool;
igIsItemEdited :: () -> bool;
igIsItemActivated :: () -> bool;
igIsItemDeactivated :: () -> bool;
igIsItemDeactivatedAfterEdit :: () -> bool;
igIsItemToggledOpen :: () -> bool;
igIsAnyItemHovered :: () -> bool;
igIsAnyItemActive :: () -> bool;
igIsAnyItemFocused :: () -> bool;
igGetItemRectMin :: () -> i32;
igGetItemRectMax :: () -> i32;
igGetItemRectSize :: () -> i32;
igSetItemAllowOverlap :: () -> void;
igIsRectVisible :: (_size: i32) -> bool;
igIsRectVisibleVec2 :: (_rect_min: i32, _rect_max: i32) -> bool;
igGetTime :: () -> f64;
igGetFrameCount :: () -> i32;
igGetBackgroundDrawList :: () -> &i32;
igGetForegroundDrawList :: () -> &i32;
igGetDrawListSharedData :: () -> &i32;
igGetStyleColorName :: (_idx: i32) -> &char8;
igSetStateStorage :: (_storage: &ImGuiStorage) -> void;
igGetStateStorage :: () -> &ImGuiStorage;
igCalcTextSize :: () -> i32;
igCalcListClipping :: (_items_count: i32, _items_height: f32, _out_items_display_start: &i32, _out_items_display_end: &i32) -> void;
igBeginChildFrame :: (_id: i32, _size: i32, _flags: i32) -> bool;
igEndChildFrame :: () -> void;
igColorConvertU32ToFloat4 :: () -> i32;
igColorConvertFloat4ToU32 :: () -> i32;
igGetKeyIndex :: (_imgui_key: i32) -> i32;
igIsKeyDown :: (_user_key_index: i32) -> bool;
igIsKeyPressed :: (_user_key_index: i32, _repeat: bool) -> bool;
igIsKeyReleased :: (_user_key_index: i32) -> bool;
igGetKeyPressedAmount :: (_key_index: i32, _repeat_delay: f32, _rate: f32) -> i32;
igIsMouseDown :: (_button: i32) -> bool;
igIsAnyMouseDown :: () -> bool;
igIsMouseClicked :: (_button: i32, _repeat: bool) -> bool;
igIsMouseDoubleClicked :: (_button: i32) -> bool;
igIsMouseReleased :: (_button: i32) -> bool;
igIsMouseDragging :: (_button: i32, _lock_threshold: f32) -> bool;
igIsMouseHoveringRect :: (_r_min: i32, _r_max: i32, _clip: bool) -> bool;
igIsMousePosValid :: (_mouse_pos: &i32) -> bool;
igGetMousePos :: () -> i32;
igGetMousePosOnOpeningCurrentPopup :: () -> i32;
igGetMouseDragDelta :: () -> i32;
igResetMouseDragDelta :: (_button: i32) -> void;
igGetMouseCursor :: () -> i32;
igSetMouseCursor :: (_type: i32) -> void;
igCaptureKeyboardFromApp :: (_want_capture_keyboard_value: bool) -> void;
igCaptureMouseFromApp :: (_want_capture_mouse_value: bool) -> void;
igGetClipboardText :: () -> &char8;
igSetClipboardText :: (_text: &char8) -> void;
igLoadIniSettingsFromDisk :: (_ini_filename: &char8) -> void;
igLoadIniSettingsFromMemory :: (_ini_data: &char8, _ini_size: size_t) -> void;
igSaveIniSettingsToDisk :: (_ini_filename: &char8) -> void;
igSaveIniSettingsToMemory :: (_out_ini_size: &size_t) -> &char8;
igSetAllocatorFunctions :: (_alloc_func: fn(size_t, &void) -> &void, _free_func: fn(&void, &void) -> void, _user_data: &void) -> void;
igMemAlloc :: (_size: size_t) -> &void;
igMemFree :: (_ptr: &void) -> void;
ImGuiStyle_ImGuiStyle :: () -> &i32;
ImGuiStyle_destroy :: (_self: &i32) -> void;
ImGuiStyle_ScaleAllSizes :: (_self: &i32, _scale_factor: f32) -> void;
ImGuiIO_AddInputCharacter :: (_self: &i32, _c: u32) -> void;
ImGuiIO_AddInputCharactersUTF8 :: (_self: &i32, _str: &char8) -> void;
ImGuiIO_ClearInputCharacters :: (_self: &i32) -> void;
ImGuiIO_ImGuiIO :: () -> &i32;
ImGuiIO_destroy :: (_self: &i32) -> void;
ImGuiInputTextCallbackData_ImGuiInputTextCallbackData :: () -> &i32;
ImGuiInputTextCallbackData_destroy :: (_self: &i32) -> void;
ImGuiInputTextCallbackData_DeleteChars :: (_self: &i32, _pos: i32, _bytes_count: i32) -> void;
ImGuiInputTextCallbackData_InsertChars :: (_self: &i32, _pos: i32, _text: &char8, _text_end: &char8) -> void;
ImGuiInputTextCallbackData_HasSelection :: (_self: &i32) -> bool;
ImGuiPayload_ImGuiPayload :: () -> &i32;
ImGuiPayload_destroy :: (_self: &i32) -> void;
ImGuiPayload_Clear :: (_self: &i32) -> void;
ImGuiPayload_IsDataType :: (_self: &i32, _type: &char8) -> bool;
ImGuiPayload_IsPreview :: (_self: &i32) -> bool;
ImGuiPayload_IsDelivery :: (_self: &i32) -> bool;
ImGuiOnceUponAFrame_ImGuiOnceUponAFrame :: () -> &i32;
ImGuiOnceUponAFrame_destroy :: (_self: &i32) -> void;
ImGuiTextFilter_ImGuiTextFilter :: (_default_filter: &char8) -> &ImGuiTextFilter;
ImGuiTextFilter_destroy :: (_self: &ImGuiTextFilter) -> void;
ImGuiTextFilter_Draw :: (_self: &ImGuiTextFilter, _label: &char8, _width: f32) -> bool;
ImGuiTextFilter_PassFilter :: (_self: &ImGuiTextFilter, _text: &char8, _text_end: &char8) -> bool;
ImGuiTextFilter_Build :: (_self: &ImGuiTextFilter) -> void;
ImGuiTextFilter_Clear :: (_self: &ImGuiTextFilter) -> void;
ImGuiTextFilter_IsActive :: (_self: &ImGuiTextFilter) -> bool;
ImGuiTextRange_ImGuiTextRange :: () -> &i32;
ImGuiTextRange_destroy :: (_self: &i32) -> void;
ImGuiTextRange_ImGuiTextRangeStr :: () -> &i32;
ImGuiTextRange_empty :: (_self: &i32) -> bool;
ImGuiTextRange_split :: (_self: &i32, _separator: char8, _out: &i32) -> void;
ImGuiTextBuffer_ImGuiTextBuffer :: () -> &i32;
ImGuiTextBuffer_destroy :: (_self: &i32) -> void;
ImGuiTextBuffer_begin :: (_self: &i32) -> &char8;
ImGuiTextBuffer_end :: (_self: &i32) -> &char8;
ImGuiTextBuffer_size :: (_self: &i32) -> i32;
ImGuiTextBuffer_empty :: (_self: &i32) -> bool;
ImGuiTextBuffer_clear :: (_self: &i32) -> void;
ImGuiTextBuffer_reserve :: (_self: &i32, _capacity: i32) -> void;
ImGuiTextBuffer_c_str :: (_self: &i32) -> &char8;
ImGuiTextBuffer_append :: (_self: &i32, _str: &char8, _str_end: &char8) -> void;
ImGuiStoragePair_ImGuiStoragePairInt :: () -> &i32;
ImGuiStoragePair_destroy :: (_self: &i32) -> void;
ImGuiStoragePair_ImGuiStoragePairFloat :: () -> &i32;
ImGuiStoragePair_ImGuiStoragePairPtr :: () -> &i32;
ImGuiStorage_Clear :: (_self: &ImGuiStorage) -> void;
ImGuiStorage_GetInt :: (_self: &ImGuiStorage, _key: i32, _default_val: i32) -> i32;
ImGuiStorage_SetInt :: (_self: &ImGuiStorage, _key: i32, _val: i32) -> void;
ImGuiStorage_GetBool :: (_self: &ImGuiStorage, _key: i32, _default_val: bool) -> bool;
ImGuiStorage_SetBool :: (_self: &ImGuiStorage, _key: i32, _val: bool) -> void;
ImGuiStorage_GetFloat :: (_self: &ImGuiStorage, _key: i32, _default_val: f32) -> f32;
ImGuiStorage_SetFloat :: (_self: &ImGuiStorage, _key: i32, _val: f32) -> void;
ImGuiStorage_GetVoidPtr :: (_self: &ImGuiStorage, _key: i32) -> &void;
ImGuiStorage_SetVoidPtr :: (_self: &ImGuiStorage, _key: i32, _val: &void) -> void;
ImGuiStorage_GetIntRef :: (_self: &ImGuiStorage, _key: i32, _default_val: i32) -> &i32;
ImGuiStorage_GetBoolRef :: (_self: &ImGuiStorage, _key: i32, _default_val: bool) -> &bool;
ImGuiStorage_GetFloatRef :: (_self: &ImGuiStorage, _key: i32, _default_val: f32) -> &f32;
ImGuiStorage_GetVoidPtrRef :: (_self: &ImGuiStorage, _key: i32, _default_val: &void) -> &&void;
ImGuiStorage_SetAllInt :: (_self: &ImGuiStorage, _val: i32) -> void;
ImGuiStorage_BuildSortByKey :: (_self: &ImGuiStorage) -> void;
ImGuiListClipper_ImGuiListClipper :: () -> &i32;
ImGuiListClipper_destroy :: (_self: &i32) -> void;
ImGuiListClipper_Step :: (_self: &i32) -> bool;
ImGuiListClipper_Begin :: (_self: &i32, _items_count: i32, _items_height: f32) -> void;
ImGuiListClipper_End :: (_self: &i32) -> void;
ImColor_ImColor :: () -> &i32;
ImColor_destroy :: (_self: &i32) -> void;
ImColor_ImColorInt :: () -> &i32;
ImColor_ImColorU32 :: () -> &i32;
ImColor_ImColorFloat :: () -> &i32;
ImColor_ImColorVec4 :: () -> &i32;
ImColor_SetHSV :: (_self: &i32, _h: f32, _s: f32, _v: f32, _a: f32) -> void;
ImColor_HSV :: () -> i32;
ImDrawCmd_ImDrawCmd :: () -> &i32;
ImDrawCmd_destroy :: (_self: &i32) -> void;
ImDrawListSplitter_ImDrawListSplitter :: () -> &i32;
ImDrawListSplitter_destroy :: (_self: &i32) -> void;
ImDrawListSplitter_Clear :: (_self: &i32) -> void;
ImDrawListSplitter_ClearFreeMemory :: (_self: &i32) -> void;
ImDrawListSplitter_Split :: (_self: &i32, _draw_list: &i32, _count: i32) -> void;
ImDrawListSplitter_Merge :: (_self: &i32, _draw_list: &i32) -> void;
ImDrawListSplitter_SetCurrentChannel :: (_self: &i32, _draw_list: &i32, _channel_idx: i32) -> void;
ImDrawList_ImDrawList :: () -> &i32;
ImDrawList_destroy :: (_self: &i32) -> void;
ImDrawList_PushClipRect :: (_self: &i32, _clip_rect_min: i32, _clip_rect_max: i32, _intersect_with_current_clip_rect: bool) -> void;
ImDrawList_PushClipRectFullScreen :: (_self: &i32) -> void;
ImDrawList_PopClipRect :: (_self: &i32) -> void;
ImDrawList_PushTextureID :: (_self: &i32, _texture_id: i32) -> void;
ImDrawList_PopTextureID :: (_self: &i32) -> void;
ImDrawList_GetClipRectMin :: () -> i32;
ImDrawList_GetClipRectMax :: () -> i32;
ImDrawList_AddLine :: (_self: &i32, _p1: i32, _p2: i32, _col: i32, _thickness: f32) -> void;
ImDrawList_AddRect :: (_self: &i32, _p_min: i32, _p_max: i32, _col: i32, _rounding: f32, _rounding_corners: i32, _thickness: f32) -> void;
ImDrawList_AddRectFilled :: (_self: &i32, _p_min: i32, _p_max: i32, _col: i32, _rounding: f32, _rounding_corners: i32) -> void;
ImDrawList_AddRectFilledMultiColor :: (_self: &i32, _p_min: i32, _p_max: i32, _col_upr_left: i32, _col_upr_right: i32, _col_bot_right: i32, _col_bot_left: i32) -> void;
ImDrawList_AddQuad :: (_self: &i32, _p1: i32, _p2: i32, _p3: i32, _p4: i32, _col: i32, _thickness: f32) -> void;
ImDrawList_AddQuadFilled :: (_self: &i32, _p1: i32, _p2: i32, _p3: i32, _p4: i32, _col: i32) -> void;
ImDrawList_AddTriangle :: (_self: &i32, _p1: i32, _p2: i32, _p3: i32, _col: i32, _thickness: f32) -> void;
ImDrawList_AddTriangleFilled :: (_self: &i32, _p1: i32, _p2: i32, _p3: i32, _col: i32) -> void;
ImDrawList_AddCircle :: (_self: &i32, _center: i32, _radius: f32, _col: i32, _num_segments: i32, _thickness: f32) -> void;
ImDrawList_AddCircleFilled :: (_self: &i32, _center: i32, _radius: f32, _col: i32, _num_segments: i32) -> void;
ImDrawList_AddText :: (_self: &i32, _pos: i32, _col: i32, _text_begin: &char8, _text_end: &char8) -> void;
ImDrawList_AddTextFontPtr :: (_self: &i32, _font: &i32, _font_size: f32, _pos: i32, _col: i32, _text_begin: &char8, _text_end: &char8, _wrap_width: f32, _cpu_fine_clip_rect: &i32) -> void;
ImDrawList_AddPolyline :: (_self: &i32, _points: &i32, _num_points: i32, _col: i32, _closed: bool, _thickness: f32) -> void;
ImDrawList_AddConvexPolyFilled :: (_self: &i32, _points: &i32, _num_points: i32, _col: i32) -> void;
ImDrawList_AddBezierCurve :: (_self: &i32, _pos0: i32, _cp0: i32, _cp1: i32, _pos1: i32, _col: i32, _thickness: f32, _num_segments: i32) -> void;
ImDrawList_AddImage :: (_self: &i32, _user_texture_id: i32, _p_min: i32, _p_max: i32, _uv_min: i32, _uv_max: i32, _col: i32) -> void;
ImDrawList_AddImageQuad :: (_self: &i32, _user_texture_id: i32, _p1: i32, _p2: i32, _p3: i32, _p4: i32, _uv1: i32, _uv2: i32, _uv3: i32, _uv4: i32, _col: i32) -> void;
ImDrawList_AddImageRounded :: (_self: &i32, _user_texture_id: i32, _p_min: i32, _p_max: i32, _uv_min: i32, _uv_max: i32, _col: i32, _rounding: f32, _rounding_corners: i32) -> void;
ImDrawList_PathClear :: (_self: &i32) -> void;
ImDrawList_PathLineTo :: (_self: &i32, _pos: i32) -> void;
ImDrawList_PathLineToMergeDuplicate :: (_self: &i32, _pos: i32) -> void;
ImDrawList_PathFillConvex :: (_self: &i32, _col: i32) -> void;
ImDrawList_PathStroke :: (_self: &i32, _col: i32, _closed: bool, _thickness: f32) -> void;
ImDrawList_PathArcTo :: (_self: &i32, _center: i32, _radius: f32, _a_min: f32, _a_max: f32, _num_segments: i32) -> void;
ImDrawList_PathArcToFast :: (_self: &i32, _center: i32, _radius: f32, _a_min_of_12: i32, _a_max_of_12: i32) -> void;
ImDrawList_PathBezierCurveTo :: (_self: &i32, _p1: i32, _p2: i32, _p3: i32, _num_segments: i32) -> void;
ImDrawList_PathRect :: (_self: &i32, _rect_min: i32, _rect_max: i32, _rounding: f32, _rounding_corners: i32) -> void;
ImDrawList_AddCallback :: (_self: &i32, _callback: i32, _callback_data: &void) -> void;
ImDrawList_AddDrawCmd :: (_self: &i32) -> void;
ImDrawList_CloneOutput :: () -> &i32;
ImDrawList_ChannelsSplit :: (_self: &i32, _count: i32) -> void;
ImDrawList_ChannelsMerge :: (_self: &i32) -> void;
ImDrawList_ChannelsSetCurrent :: (_self: &i32, _n: i32) -> void;
ImDrawList_Clear :: (_self: &i32) -> void;
ImDrawList_ClearFreeMemory :: (_self: &i32) -> void;
ImDrawList_PrimReserve :: (_self: &i32, _idx_count: i32, _vtx_count: i32) -> void;
ImDrawList_PrimRect :: (_self: &i32, _a: i32, _b: i32, _col: i32) -> void;
ImDrawList_PrimRectUV :: (_self: &i32, _a: i32, _b: i32, _uv_a: i32, _uv_b: i32, _col: i32) -> void;
ImDrawList_PrimQuadUV :: (_self: &i32, _a: i32, _b: i32, _c: i32, _d: i32, _uv_a: i32, _uv_b: i32, _uv_c: i32, _uv_d: i32, _col: i32) -> void;
ImDrawList_PrimWriteVtx :: (_self: &i32, _pos: i32, _uv: i32, _col: i32) -> void;
ImDrawList_PrimWriteIdx :: (_self: &i32, _idx: i32) -> void;
ImDrawList_PrimVtx :: (_self: &i32, _pos: i32, _uv: i32, _col: i32) -> void;
ImDrawList_UpdateClipRect :: (_self: &i32) -> void;
ImDrawList_UpdateTextureID :: (_self: &i32) -> void;
ImDrawData_ImDrawData :: () -> &i32;
ImDrawData_destroy :: (_self: &i32) -> void;
ImDrawData_Clear :: (_self: &i32) -> void;
ImDrawData_DeIndexAllBuffers :: (_self: &i32) -> void;
ImDrawData_ScaleClipRects :: (_self: &i32, _fb_scale: i32) -> void;
ImFontConfig_ImFontConfig :: () -> &i32;
ImFontConfig_destroy :: (_self: &i32) -> void;
ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder :: () -> &i32;
ImFontGlyphRangesBuilder_destroy :: (_self: &i32) -> void;
ImFontGlyphRangesBuilder_Clear :: (_self: &i32) -> void;
ImFontGlyphRangesBuilder_GetBit :: (_self: &i32, _n: i32) -> bool;
ImFontGlyphRangesBuilder_SetBit :: (_self: &i32, _n: i32) -> void;
ImFontGlyphRangesBuilder_AddChar :: (_self: &i32, _c: i32) -> void;
ImFontGlyphRangesBuilder_AddText :: (_self: &i32, _text: &char8, _text_end: &char8) -> void;
ImFontGlyphRangesBuilder_AddRanges :: (_self: &i32, _ranges: &i32) -> void;
ImFontGlyphRangesBuilder_BuildRanges :: (_self: &i32, _out_ranges: &i32) -> void;
ImFontAtlasCustomRect_ImFontAtlasCustomRect :: () -> &i32;
ImFontAtlasCustomRect_destroy :: (_self: &i32) -> void;
ImFontAtlasCustomRect_IsPacked :: (_self: &i32) -> bool;
ImFontAtlas_ImFontAtlas :: () -> &i32;
ImFontAtlas_destroy :: (_self: &i32) -> void;
ImFontAtlas_AddFont :: () -> &i32;
ImFontAtlas_AddFontDefault :: () -> &i32;
ImFontAtlas_AddFontFromFileTTF :: () -> &i32;
ImFontAtlas_AddFontFromMemoryTTF :: () -> &i32;
ImFontAtlas_AddFontFromMemoryCompressedTTF :: () -> &i32;
ImFontAtlas_AddFontFromMemoryCompressedBase85TTF :: () -> &i32;
ImFontAtlas_ClearInputData :: (_self: &i32) -> void;
ImFontAtlas_ClearTexData :: (_self: &i32) -> void;
ImFontAtlas_ClearFonts :: (_self: &i32) -> void;
ImFontAtlas_Clear :: (_self: &i32) -> void;
ImFontAtlas_Build :: (_self: &i32) -> bool;
ImFontAtlas_GetTexDataAsAlpha8 :: (_self: &i32, _out_pixels: &&u8, _out_width: &i32, _out_height: &i32, _out_bytes_per_pixel: &i32) -> void;
ImFontAtlas_GetTexDataAsRGBA32 :: (_self: &i32, _out_pixels: &&u8, _out_width: &i32, _out_height: &i32, _out_bytes_per_pixel: &i32) -> void;
ImFontAtlas_IsBuilt :: (_self: &i32) -> bool;
ImFontAtlas_SetTexID :: (_self: &i32, _id: i32) -> void;
ImFontAtlas_GetGlyphRangesDefault :: () -> &i32;
ImFontAtlas_GetGlyphRangesKorean :: () -> &i32;
ImFontAtlas_GetGlyphRangesJapanese :: () -> &i32;
ImFontAtlas_GetGlyphRangesChineseFull :: () -> &i32;
ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon :: () -> &i32;
ImFontAtlas_GetGlyphRangesCyrillic :: () -> &i32;
ImFontAtlas_GetGlyphRangesThai :: () -> &i32;
ImFontAtlas_GetGlyphRangesVietnamese :: () -> &i32;
ImFontAtlas_AddCustomRectRegular :: (_self: &i32, _id: u32, _width: i32, _height: i32) -> i32;
ImFontAtlas_AddCustomRectFontGlyph :: (_self: &i32, _font: &i32, _id: i32, _width: i32, _height: i32, _advance_x: f32, _offset: i32) -> i32;
ImFontAtlas_GetCustomRectByIndex :: () -> &i32;
ImFontAtlas_CalcCustomRectUV :: (_self: &i32, _rect: &i32, _out_uv_min: &i32, _out_uv_max: &i32) -> void;
ImFontAtlas_GetMouseCursorTexData :: (_self: &i32, _cursor: i32, _out_offset: &i32, _out_size: &i32, _out_uv_border: &i32, _out_uv_fill: &i32) -> bool;
ImFont_ImFont :: () -> &i32;
ImFont_destroy :: (_self: &i32) -> void;
ImFont_FindGlyph :: () -> &i32;
ImFont_FindGlyphNoFallback :: () -> &i32;
ImFont_GetCharAdvance :: (_self: &i32, _c: i32) -> f32;
ImFont_IsLoaded :: (_self: &i32) -> bool;
ImFont_GetDebugName :: (_self: &i32) -> &char8;
ImFont_CalcTextSizeA :: () -> i32;
ImFont_CalcWordWrapPositionA :: (_self: &i32, _scale: f32, _text: &char8, _text_end: &char8, _wrap_width: f32) -> &char8;
ImFont_RenderChar :: (_self: &i32, _draw_list: &i32, _size: f32, _pos: i32, _col: i32, _c: i32) -> void;
ImFont_RenderText :: (_self: &i32, _draw_list: &i32, _size: f32, _pos: i32, _col: i32, _clip_rect: i32, _text_begin: &char8, _text_end: &char8, _wrap_width: f32, _cpu_fine_clip: bool) -> void;
ImFont_BuildLookupTable :: (_self: &i32) -> void;
ImFont_ClearOutputData :: (_self: &i32) -> void;
ImFont_GrowIndex :: (_self: &i32, _new_size: i32) -> void;
ImFont_AddGlyph :: (_self: &i32, _c: i32, _x0: f32, _y0: f32, _x1: f32, _y1: f32, _u0: f32, _v0: f32, _u1: f32, _v1: f32, _advance_x: f32) -> void;
ImFont_AddRemapChar :: (_self: &i32, _dst: i32, _src: i32, _overwrite_dst: bool) -> void;
ImFont_SetFallbackChar :: (_self: &i32, _c: i32) -> void;
igGetWindowPos_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetWindowPos_nonUDT2 :: (ret: &ImVec2_Simple);
igGetWindowPos_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetWindowPos_nonUDT2(&ret)
    return ret
}
igGetWindowSize_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetWindowSize_nonUDT2 :: (ret: &ImVec2_Simple);
igGetWindowSize_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetWindowSize_nonUDT2(&ret)
    return ret
}
igGetContentRegionMax_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetContentRegionMax_nonUDT2 :: (ret: &ImVec2_Simple);
igGetContentRegionMax_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetContentRegionMax_nonUDT2(&ret)
    return ret
}
igGetContentRegionAvail_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetContentRegionAvail_nonUDT2 :: (ret: &ImVec2_Simple);
igGetContentRegionAvail_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetContentRegionAvail_nonUDT2(&ret)
    return ret
}
igGetWindowContentRegionMin_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetWindowContentRegionMin_nonUDT2 :: (ret: &ImVec2_Simple);
igGetWindowContentRegionMin_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetWindowContentRegionMin_nonUDT2(&ret)
    return ret
}
igGetWindowContentRegionMax_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetWindowContentRegionMax_nonUDT2 :: (ret: &ImVec2_Simple);
igGetWindowContentRegionMax_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetWindowContentRegionMax_nonUDT2(&ret)
    return ret
}
igGetFontTexUvWhitePixel_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetFontTexUvWhitePixel_nonUDT2 :: (ret: &ImVec2_Simple);
igGetFontTexUvWhitePixel_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetFontTexUvWhitePixel_nonUDT2(&ret)
    return ret
}
igGetCursorPos_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetCursorPos_nonUDT2 :: (ret: &ImVec2_Simple);
igGetCursorPos_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetCursorPos_nonUDT2(&ret)
    return ret
}
igGetCursorStartPos_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetCursorStartPos_nonUDT2 :: (ret: &ImVec2_Simple);
igGetCursorStartPos_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetCursorStartPos_nonUDT2(&ret)
    return ret
}
igGetCursorScreenPos_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetCursorScreenPos_nonUDT2 :: (ret: &ImVec2_Simple);
igGetCursorScreenPos_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetCursorScreenPos_nonUDT2(&ret)
    return ret
}
igGetItemRectMin_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetItemRectMin_nonUDT2 :: (ret: &ImVec2_Simple);
igGetItemRectMin_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetItemRectMin_nonUDT2(&ret)
    return ret
}
igGetItemRectMax_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetItemRectMax_nonUDT2 :: (ret: &ImVec2_Simple);
igGetItemRectMax_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetItemRectMax_nonUDT2(&ret)
    return ret
}
igGetItemRectSize_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetItemRectSize_nonUDT2 :: (ret: &ImVec2_Simple);
igGetItemRectSize_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetItemRectSize_nonUDT2(&ret)
    return ret
}
igCalcTextSize_nonUDT :: (_pOut: &i32, _text: &char8, _text_end: &char8, _hide_text_after_double_hash: bool, _wrap_width: f32) -> void;
__bind__igCalcTextSize_nonUDT2 :: (ret: &ImVec2_Simple, _text: &char8, _text_end: &char8, _hide_text_after_double_hash: bool, _wrap_width: f32);
igCalcTextSize_nonUDT2 :: (_text: &char8, _text_end: &char8, _hide_text_after_double_hash: bool, _wrap_width: f32) -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igCalcTextSize_nonUDT2(&ret, _text, _text_end, _hide_text_after_double_hash, _wrap_width)
    return ret
}
igColorConvertU32ToFloat4_nonUDT :: (_pOut: &i32, _in: i32) -> void;
__bind__igColorConvertU32ToFloat4_nonUDT2 :: (ret: &ImVec4_Simple, _in: i32);
igColorConvertU32ToFloat4_nonUDT2 :: (_in: i32) -> ImVec4_Simple {
    ret: ImVec4_Simple = default
    __bind__igColorConvertU32ToFloat4_nonUDT2(&ret, _in)
    return ret
}
igGetMousePos_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetMousePos_nonUDT2 :: (ret: &ImVec2_Simple);
igGetMousePos_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetMousePos_nonUDT2(&ret)
    return ret
}
igGetMousePosOnOpeningCurrentPopup_nonUDT :: (_pOut: &i32) -> void;
__bind__igGetMousePosOnOpeningCurrentPopup_nonUDT2 :: (ret: &ImVec2_Simple);
igGetMousePosOnOpeningCurrentPopup_nonUDT2 :: () -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetMousePosOnOpeningCurrentPopup_nonUDT2(&ret)
    return ret
}
igGetMouseDragDelta_nonUDT :: (_pOut: &i32, _button: i32, _lock_threshold: f32) -> void;
__bind__igGetMouseDragDelta_nonUDT2 :: (ret: &ImVec2_Simple, _button: i32, _lock_threshold: f32);
igGetMouseDragDelta_nonUDT2 :: (_button: i32, _lock_threshold: f32) -> ImVec2_Simple {
    ret: ImVec2_Simple = default
    __bind__igGetMouseDragDelta_nonUDT2(&ret, _button, _lock_threshold)
    return ret
}
ImColor_HSV_nonUDT :: (_pOut: &i32, _self: &i32, _h: f32, _s: f32, _v: f32, _a: f32) -> void;
ImDrawList_GetClipRectMin_nonUDT :: (_pOut: &i32, _self: &i32) -> void;
ImDrawList_GetClipRectMax_nonUDT :: (_pOut: &i32, _self: &i32) -> void;
ImFont_CalcTextSizeA_nonUDT :: (_pOut: &i32, _self: &i32, _size: f32, _max_width: f32, _wrap_width: f32, _text_begin: &char8, _text_end: &char8, _remaining: &&char8) -> void;
igLogText :: (_fmt: &char8) -> void;
ImGuiTextBuffer_appendf :: (_buffer: &ImGuiTextBuffer, _fmt: &char8) -> void;
igGET_FLT_MAX :: () -> f32;
igColorConvertRGBtoHSV :: (_r: f32, _g: f32, _b: f32, _out_h: &f32, _out_s: &f32, _out_v: &f32) -> void;
igColorConvertHSVtoRGB :: (_h: f32, _s: f32, _v: f32, _out_r: &f32, _out_g: &f32, _out_b: &f32) -> void;
ImVector_ImWchar_create :: () -> &i32;
ImVector_ImWchar_destroy :: (_self: &i32) -> void;
ImVector_ImWchar_Init :: (_p: &i32) -> void;
ImVector_ImWchar_UnInit :: (_p: &i32) -> void;
