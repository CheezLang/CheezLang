#export_scope

ImDrawChannel :: struct #copy {}
ImDrawCmd :: struct #copy {}
ImDrawData :: struct #copy {}
ImDrawList :: struct #copy {}
ImDrawListSharedData :: struct #copy {}
ImDrawListSplitter :: struct #copy {}
ImFont :: struct #copy {}
ImFontAtlas :: struct #copy {}
ImFontConfig :: struct #copy {}
ImFontGlyphRangesBuilder :: struct #copy {}
ImColor :: struct #copy {}
ImGuiContext :: struct #copy {}
ImGuiIO :: struct #copy {}
ImGuiInputTextCallbackData :: struct #copy {}
ImGuiListClipper :: struct #copy {}
ImGuiOnceUponAFrame :: struct #copy {}
ImGuiPayload :: struct #copy {}
ImGuiStorage :: struct #copy {}
ImGuiStyle :: struct #copy {}
ImGuiTextBuffer :: struct #copy {}
ImGuiTextFilter :: struct #copy {}
ImTextureID :: &void
ImGuiID :: u32
ImWchar :: u16
ImGuiCol :: i32
ImGuiCond :: i32
ImGuiDataType :: i32
ImGuiDir :: i32
ImGuiKey :: i32
ImGuiNavInput :: i32
ImGuiMouseButton :: i32
ImGuiMouseCursor :: i32
ImGuiStyleVar :: i32
ImDrawCornerFlags :: i32
ImDrawListFlags :: i32
ImFontAtlasFlags :: i32
ImGuiBackendFlags :: i32
ImGuiColorEditFlags :: i32
ImGuiConfigFlags :: i32
ImGuiComboFlags :: i32
ImGuiDragDropFlags :: i32
ImGuiFocusedFlags :: i32
ImGuiHoveredFlags :: i32
ImGuiInputTextFlags :: i32
ImGuiSelectableFlags :: i32
ImGuiTabBarFlags :: i32
ImGuiTabItemFlags :: i32
ImGuiTreeNodeFlags :: i32
ImGuiWindowFlags :: i32
ImGuiInputTextCallback :: fn(&ImGuiInputTextCallbackData) -> i32
ImGuiSizeCallback :: fn(&ImGuiSizeCallbackData) -> void
ImS8 :: i8
ImU8 :: u8
ImS16 :: i16
ImU16 :: u16
ImS32 :: i32
ImU32 :: u32
ImS64 :: i64
ImU64 :: u64
ImVec2 :: struct #copy {
    x : f32 = default
    y : f32 = default
}
ImVec4 :: struct #copy {
    x : f32 = default
    y : f32 = default
    z : f32 = default
    w : f32 = default
}

ImGuiWindowFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                      = 0
    NoTitleBar                = @bin_lsl(1, 0)
    NoResize                  = @bin_lsl(1, 1)
    NoMove                    = @bin_lsl(1, 2)
    NoScrollbar               = @bin_lsl(1, 3)
    NoScrollWithMouse         = @bin_lsl(1, 4)
    NoCollapse                = @bin_lsl(1, 5)
    AlwaysAutoResize          = @bin_lsl(1, 6)
    NoBackground              = @bin_lsl(1, 7)
    NoSavedSettings           = @bin_lsl(1, 8)
    NoMouseInputs             = @bin_lsl(1, 9)
    MenuBar                   = @bin_lsl(1, 10)
    HorizontalScrollbar       = @bin_lsl(1, 11)
    NoFocusOnAppearing        = @bin_lsl(1, 12)
    NoBringToFrontOnFocus     = @bin_lsl(1, 13)
    AlwaysVerticalScrollbar   = @bin_lsl(1, 14)
    AlwaysHorizontalScrollbar = @bin_lsl(1, 15)
    AlwaysUseWindowPadding    = @bin_lsl(1, 16)
    NoNavInputs               = @bin_lsl(1, 18)
    NoNavFocus                = @bin_lsl(1, 19)
    UnsavedDocument           = @bin_lsl(1, 20)
    NoNav                     = @bin_or(NoNavInputs, NoNavFocus)
    NoDecoration              = @bin_or(NoTitleBar, NoResize, NoScrollbar, NoCollapse)
    NoInputs                  = @bin_or(NoMouseInputs, NoNavInputs, NoNavFocus)

    NavFlattened              = @bin_lsl(1, 23)
    ChildWindow               = @bin_lsl(1, 24)
    Tooltip                   = @bin_lsl(1, 25)
    Popup                     = @bin_lsl(1, 26)
    Modal                     = @bin_lsl(1, 27)
    ChildMenu                 = @bin_lsl(1, 28)
}

ImGuiInputTextFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                = 0x0
    CharsDecimal        = 0x1
    CharsHexadecimal    = 0x2
    CharsUppercase      = 0x4
    CharsNoBlank        = 0x8
    AutoSelectAll       = 0x10
    EnterReturnsTrue    = 0x20
    CallbackCompletion  = 0x40
    CallbackHistory     = 0x80
    CallbackAlways      = 0x100
    CallbackCharFilter  = 0x200
    AllowTabInput       = 0x400
    CtrlEnterForNewLine = 0x800
    NoHorizontalScroll  = 0x1000
    AlwaysInsertMode    = 0x2000
    ReadOnly            = 0x4000
    Password            = 0x8000
    NoUndoRedo          = 0x10000
    CharsScientific     = 0x20000
    CallbackResize      = 0x40000
    Multiline           = 0x100000
    NoMarkEdited        = 0x200000
}
ImGuiTreeNodeFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                 = 0x0
    Selected             = 0x1
    Framed               = 0x2
    AllowItemOverlap     = 0x4
    NoTreePushOnOpen     = 0x8
    NoAutoOpenOnLog      = 0x10
    DefaultOpen          = 0x20
    OpenOnDoubleClick    = 0x40
    OpenOnArrow          = 0x80
    Leaf                 = 0x100
    Bullet               = 0x200
    FramePadding         = 0x400
    SpanAvailWidth       = 0x800
    SpanFullWidth        = 0x1000
    NavLeftJumpsBackHere = 0x2000
    CollapsingHeader     = 0x1A
}
ImGuiSelectableFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None             = 0x0
    DontClosePopups  = 0x1
    SpanAllColumns   = 0x2
    AllowDoubleClick = 0x4
    Disabled         = 0x8
    AllowItemOverlap = 0x10
}
ImGuiComboFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None           = 0x0
    PopupAlignLeft = 0x1
    HeightSmall    = 0x2
    HeightRegular  = 0x4
    HeightLarge    = 0x8
    HeightLargest  = 0x10
    NoArrowButton  = 0x20
    NoPreview      = 0x40
    HeightMask_    = 0x1E
}
ImGuiTabBarFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                         = 0x0
    Reorderable                  = 0x1
    AutoSelectNewTabs            = 0x2
    TabListPopupButton           = 0x4
    NoCloseWithMiddleMouseButton = 0x8
    NoTabListScrollingButtons    = 0x10
    NoTooltip                    = 0x20
    FittingPolicyResizeDown      = 0x40
    FittingPolicyScroll          = 0x80
    FittingPolicyMask_           = 0xC0
    FittingPolicyDefault_        = 0x40
}
ImGuiTabItemFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                         = 0x0
    UnsavedDocument              = 0x1
    SetSelected                  = 0x2
    NoCloseWithMiddleMouseButton = 0x4
    NoPushId                     = 0x8
}
ImGuiFocusedFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                = 0x0
    ChildWindows        = 0x1
    RootWindow          = 0x2
    AnyWindow           = 0x4
    RootAndChildWindows = 0x3
}
ImGuiHoveredFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                         = 0x0
    ChildWindows                 = 0x1
    RootWindow                   = 0x2
    AnyWindow                    = 0x4
    AllowWhenBlockedByPopup      = 0x8
    AllowWhenBlockedByActiveItem = 0x20
    AllowWhenOverlapped          = 0x40
    AllowWhenDisabled            = 0x80
    RectOnly                     = 0x68
    RootAndChildWindows          = 0x3
}
ImGuiDragDropFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                     = 0x0
    SourceNoPreviewTooltip   = 0x1
    SourceNoDisableHover     = 0x2
    SourceNoHoldToOpenOthers = 0x4
    SourceAllowNullID        = 0x8
    SourceExtern             = 0x10
    SourceAutoExpirePayload  = 0x20
    AcceptBeforeDelivery     = 0x400
    AcceptNoDrawDefaultRect  = 0x800
    AcceptNoPreviewTooltip   = 0x1000
    AcceptPeekOnly           = 0xC00
}
ImGuiDataType_ :: enum #copy #repr("C") #tag_type(i32) {
    S8     = 0x0
    U8     = 0x1
    S16    = 0x2
    U16    = 0x3
    S32    = 0x4
    U32    = 0x5
    S64    = 0x6
    U64    = 0x7
    Float  = 0x8
    Double = 0x9
    COUNT  = 0xA
}
ImGuiDir_ :: enum #copy #repr("C") #tag_type(i32) {
    None  = -1
    Left  = 0x0
    Right = 0x1
    Up    = 0x2
    Down  = 0x3
    COUNT = 0x4
}
ImGuiKey_ :: enum #copy #repr("C") #tag_type(i32) {
    Tab         = 0x0
    LeftArrow   = 0x1
    RightArrow  = 0x2
    UpArrow     = 0x3
    DownArrow   = 0x4
    PageUp      = 0x5
    PageDown    = 0x6
    Home        = 0x7
    End         = 0x8
    Insert      = 0x9
    Delete      = 0xA
    Backspace   = 0xB
    Space       = 0xC
    Enter       = 0xD
    Escape      = 0xE
    KeyPadEnter = 0xF
    A           = 0x10
    C           = 0x11
    V           = 0x12
    X           = 0x13
    Y           = 0x14
    Z           = 0x15
    COUNT       = 0x16
}
ImGuiNavInput_ :: enum #copy #repr("C") #tag_type(i32) {
    Activate       = 0x0
    Cancel         = 0x1
    Input          = 0x2
    Menu           = 0x3
    DpadLeft       = 0x4
    DpadRight      = 0x5
    DpadUp         = 0x6
    DpadDown       = 0x7
    LStickLeft     = 0x8
    LStickRight    = 0x9
    LStickUp       = 0xA
    LStickDown     = 0xB
    FocusPrev      = 0xC
    FocusNext      = 0xD
    TweakSlow      = 0xE
    TweakFast      = 0xF
    KeyMenu_       = 0x10
    KeyLeft_       = 0x11
    KeyRight_      = 0x12
    KeyUp_         = 0x13
    KeyDown_       = 0x14
    COUNT          = 0x15
    InternalStart_ = 0x10
}
ImGuiConfigFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                 = 0x0
    NavEnableKeyboard    = 0x1
    NavEnableGamepad     = 0x2
    NavEnableSetMousePos = 0x4
    NavNoCaptureKeyboard = 0x8
    NoMouse              = 0x10
    NoMouseCursorChange  = 0x20
    IsSRGB               = 0x100000
    IsTouchScreen        = 0x200000
}
ImGuiBackendFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                 = 0x0
    HasGamepad           = 0x1
    HasMouseCursors      = 0x2
    HasSetMousePos       = 0x4
    RendererHasVtxOffset = 0x8
}
ImGuiCol_ :: enum #copy #repr("C") #tag_type(i32) {
    Text                  = 0x0
    TextDisabled          = 0x1
    WindowBg              = 0x2
    ChildBg               = 0x3
    PopupBg               = 0x4
    Border                = 0x5
    BorderShadow          = 0x6
    FrameBg               = 0x7
    FrameBgHovered        = 0x8
    FrameBgActive         = 0x9
    TitleBg               = 0xA
    TitleBgActive         = 0xB
    TitleBgCollapsed      = 0xC
    MenuBarBg             = 0xD
    ScrollbarBg           = 0xE
    ScrollbarGrab         = 0xF
    ScrollbarGrabHovered  = 0x10
    ScrollbarGrabActive   = 0x11
    CheckMark             = 0x12
    SliderGrab            = 0x13
    SliderGrabActive      = 0x14
    Button                = 0x15
    ButtonHovered         = 0x16
    ButtonActive          = 0x17
    Header                = 0x18
    HeaderHovered         = 0x19
    HeaderActive          = 0x1A
    Separator             = 0x1B
    SeparatorHovered      = 0x1C
    SeparatorActive       = 0x1D
    ResizeGrip            = 0x1E
    ResizeGripHovered     = 0x1F
    ResizeGripActive      = 0x20
    Tab                   = 0x21
    TabHovered            = 0x22
    TabActive             = 0x23
    TabUnfocused          = 0x24
    TabUnfocusedActive    = 0x25
    PlotLines             = 0x26
    PlotLinesHovered      = 0x27
    PlotHistogram         = 0x28
    PlotHistogramHovered  = 0x29
    TextSelectedBg        = 0x2A
    DragDropTarget        = 0x2B
    NavHighlight          = 0x2C
    NavWindowingHighlight = 0x2D
    NavWindowingDimBg     = 0x2E
    ModalWindowDimBg      = 0x2F
    COUNT                 = 0x30
    ModalWindowDarkening  = 0x2F
}
ImGuiStyleVar_ :: enum #copy #repr("C") #tag_type(i32) {
    Alpha               = 0x0
    WindowPadding       = 0x1
    WindowRounding      = 0x2
    WindowBorderSize    = 0x3
    WindowMinSize       = 0x4
    WindowTitleAlign    = 0x5
    ChildRounding       = 0x6
    ChildBorderSize     = 0x7
    PopupRounding       = 0x8
    PopupBorderSize     = 0x9
    FramePadding        = 0xA
    FrameRounding       = 0xB
    FrameBorderSize     = 0xC
    ItemSpacing         = 0xD
    ItemInnerSpacing    = 0xE
    IndentSpacing       = 0xF
    ScrollbarSize       = 0x10
    ScrollbarRounding   = 0x11
    GrabMinSize         = 0x12
    GrabRounding        = 0x13
    TabRounding         = 0x14
    ButtonTextAlign     = 0x15
    SelectableTextAlign = 0x16
    COUNT               = 0x17
    Count_              = 0x17
}
ImGuiColorEditFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None             = 0x0
    NoAlpha          = 0x2
    NoPicker         = 0x4
    NoOptions        = 0x8
    NoSmallPreview   = 0x10
    NoInputs         = 0x20
    NoTooltip        = 0x40
    NoLabel          = 0x80
    NoSidePreview    = 0x100
    NoDragDrop       = 0x200
    AlphaBar         = 0x10000
    AlphaPreview     = 0x20000
    AlphaPreviewHalf = 0x40000
    HDR              = 0x80000
    DisplayRGB       = 0x100000
    DisplayHSV       = 0x200000
    DisplayHex       = 0x400000
    Uint8            = 0x800000
    Float            = 0x1000000
    PickerHueBar     = 0x2000000
    PickerHueWheel   = 0x4000000
    InputRGB         = 0x8000000
    InputHSV         = 0x10000000
    _OptionsDefault  = 0xA900000
    _DisplayMask     = 0x700000
    _DataTypeMask    = 0x1800000
    _PickerMask      = 0x6000000
    _InputMask       = 0x18000000
    RGB              = 0x100000
    HSV              = 0x200000
    HEX              = 0x400000
}
ImGuiMouseButton_ :: enum #copy #repr("C") #tag_type(i32) {
    Left   = 0x0
    Right  = 0x1
    Middle = 0x2
    COUNT  = 0x5
}
ImGuiMouseCursor_ :: enum #copy #repr("C") #tag_type(i32) {
    None       = -1
    Arrow      = 0x0
    TextInput  = 0x1
    ResizeAll  = 0x2
    ResizeNS   = 0x3
    ResizeEW   = 0x4
    ResizeNESW = 0x5
    ResizeNWSE = 0x6
    Hand       = 0x7
    NotAllowed = 0x8
    COUNT      = 0x9
    Count_     = 0x9
}
ImGuiCond_ :: enum #copy #repr("C") #tag_type(i32) {
    Always       = 0x1
    Once         = 0x2
    FirstUseEver = 0x4
    Appearing    = 0x8
}
ImNewDummy :: struct #copy {}
/*
ImGuiStyle :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1316
    Alpha                    : f32 = default
    WindowPadding            : ImVec2 = default
    WindowRounding           : f32 = default
    WindowBorderSize         : f32 = default
    WindowMinSize            : ImVec2 = default
    WindowTitleAlign         : ImVec2 = default
    WindowMenuButtonPosition : i32 = default
    ChildRounding            : f32 = default
    ChildBorderSize          : f32 = default
    PopupRounding            : f32 = default
    PopupBorderSize          : f32 = default
    FramePadding             : ImVec2 = default
    FrameRounding            : f32 = default
    FrameBorderSize          : f32 = default
    ItemSpacing              : ImVec2 = default
    ItemInnerSpacing         : ImVec2 = default
    TouchExtraPadding        : ImVec2 = default
    IndentSpacing            : f32 = default
    ColumnsMinSpacing        : f32 = default
    ScrollbarSize            : f32 = default
    ScrollbarRounding        : f32 = default
    GrabMinSize              : f32 = default
    GrabRounding             : f32 = default
    TabRounding              : f32 = default
    TabBorderSize            : f32 = default
    ColorButtonPosition      : i32 = default
    ButtonTextAlign          : ImVec2 = default
    SelectableTextAlign      : ImVec2 = default
    DisplayWindowPadding     : ImVec2 = default
    DisplaySafeAreaPadding   : ImVec2 = default
    MouseCursorScale         : f32 = default
    AntiAliasedLines         : i32 = default
    AntiAliasedFill          : i32 = default
    CurveTessellationTol     : f32 = default
    Colors                   : [48]ImVec4 = default
    ImGuiStyle               : fn() -> i32 = default
    ScaleAllSizes            : fn(f32) -> void = default
}
*/
/*
ImGuiIO :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1364
    ConfigFlags                       : i32 = default
    BackendFlags                      : i32 = default
    DisplaySize                       : ImVec2 = default
    DeltaTime                         : f32 = default
    IniSavingRate                     : f32 = default
    IniFilename                       : &char8 = default
    LogFilename                       : &char8 = default
    MouseDoubleClickTime              : f32 = default
    MouseDoubleClickMaxDist           : f32 = default
    MouseDragThreshold                : f32 = default
    KeyMap                            : [22]i32 = default
    KeyRepeatDelay                    : f32 = default
    KeyRepeatRate                     : f32 = default
    UserData                          : &void = default
    Fonts                             : &ImFontAtlas = default
    FontGlobalScale                   : f32 = default
    FontAllowUserScaling              : i32 = default
    FontDefault                       : &ImFont = default
    DisplayFramebufferScale           : ImVec2 = default
    MouseDrawCursor                   : i32 = default
    ConfigMacOSXBehaviors             : i32 = default
    ConfigInputTextCursorBlink        : i32 = default
    ConfigWindowsResizeFromEdges      : i32 = default
    ConfigWindowsMoveFromTitleBarOnly : i32 = default
    ConfigWindowsMemoryCompactTimer   : f32 = default
    BackendPlatformName               : &char8 = default
    BackendRendererName               : &char8 = default
    BackendPlatformUserData           : &void = default
    BackendRendererUserData           : &void = default
    BackendLanguageUserData           : &void = default
    GetClipboardTextFn                : fn(&void) -> &char8 = default
    SetClipboardTextFn                : fn(&void, &char8) -> void = default
    ClipboardUserData                 : &void = default
    ImeSetInputScreenPosFn            : fn(i32, i32) -> void = default
    ImeWindowHandle                   : &void = default
    RenderDrawListsFn                 : fn(&ImDrawData) -> void = default
    MousePos                          : ImVec2 = default
    MouseDown                         : [5]i32 = default
    MouseWheel                        : f32 = default
    MouseWheelH                       : f32 = default
    KeyCtrl                           : i32 = default
    KeyShift                          : i32 = default
    KeyAlt                            : i32 = default
    KeySuper                          : i32 = default
    KeysDown                          : [512]i32 = default
    NavInputs                         : [21]f32 = default
    AddInputCharacter                 : fn(u32) -> void = default
    AddInputCharactersUTF8            : fn(&char8) -> void = default
    ClearInputCharacters              : fn() -> void = default
    WantCaptureMouse                  : i32 = default
    WantCaptureKeyboard               : i32 = default
    WantTextInput                     : i32 = default
    WantSetMousePos                   : i32 = default
    WantSaveIniSettings               : i32 = default
    NavActive                         : i32 = default
    NavVisible                        : i32 = default
    Framerate                         : f32 = default
    MetricsRenderVertices             : i32 = default
    MetricsRenderIndices              : i32 = default
    MetricsRenderWindows              : i32 = default
    MetricsActiveWindows              : i32 = default
    MetricsActiveAllocations          : i32 = default
    MouseDelta                        : ImVec2 = default
    MousePosPrev                      : ImVec2 = default
    MouseClickedPos                   : [5]ImVec2 = default
    MouseClickedTime                  : [5]f64 = default
    MouseClicked                      : [5]i32 = default
    MouseDoubleClicked                : [5]i32 = default
    MouseReleased                     : [5]i32 = default
    MouseDownOwned                    : [5]i32 = default
    MouseDownWasDoubleClick           : [5]i32 = default
    MouseDownDuration                 : [5]f32 = default
    MouseDownDurationPrev             : [5]f32 = default
    MouseDragMaxDistanceAbs           : [5]ImVec2 = default
    MouseDragMaxDistanceSqr           : [5]f32 = default
    KeysDownDuration                  : [512]f32 = default
    KeysDownDurationPrev              : [512]f32 = default
    NavInputsDownDuration             : [21]f32 = default
    NavInputsDownDurationPrev         : [21]f32 = default
                                      : i32 = default
    ImGuiIO                           : fn() -> i32 = default
}
*/
/*
ImGuiInputTextCallbackData :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1507
    EventFlag      : i32 = default
    Flags          : i32 = default
    UserData       : &void = default
    EventChar      : u16 = default
    EventKey       : i32 = default
    Buf            : &char8 = default
    BufTextLen     : i32 = default
    BufSize        : i32 = default
    BufDirty       : i32 = default
    CursorPos      : i32 = default
    SelectionStart : i32 = default
    SelectionEnd   : i32 = default
    ImGuiInputTextCallbackData : fn() -> i32 = default
    DeleteChars    : fn(i32, i32) -> void = default
    InsertChars    : fn(i32, &char8, &char8) -> void = default
    HasSelection   : fn() -> i32 = default
}
*/
ImGuiSizeCallbackData :: struct #copy {
    UserData    : &void = default
    Pos         : ImVec2 = default
    CurrentSize : ImVec2 = default
    DesiredSize : ImVec2 = default
}
/*
ImGuiPayload :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1545
    Data           : &void = default
    DataSize       : i32 = default
    SourceId       : u32 = default
    SourceParentId : u32 = default
    DataFrameCount : i32 = default
    DataType       : [33]char8 = default
    Preview        : i32 = default
    Delivery       : i32 = default
    ImGuiPayload   : fn() -> i32 = default
}
*/
/*
ImGuiOnceUponAFrame :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1606
    ImGuiOnceUponAFrame : fn() -> i32 = default
    bool : fn() -> i32 = default
}
*/
/*
ImGuiTextFilter :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1614
    ImGuiTextFilter : fn(&char8) -> i32 = default
    Draw      : fn(&char8, f32) -> i32 = default
    PassFilter : fn(&char8, &char8) -> i32 = default
    Build     : fn() -> void = default
    Clear     : fn() -> void = default
    InputBuf  : [256]char8 = default
              : i32 = default
    CountGrep : i32 = default
}
*/
/*
ImGuiTextBuffer :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1641
                : i32 = default
    EmptyString : [1]char8 = default
    ImGuiTextBuffer : fn() -> i32 = default
    appendf     : fn(&char8) -> void = default
    appendfv    : fn(&char8, &char8) -> void = default
}
*/
/*
ImGuiStorage :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1668
     : i32 = default
    Clear : fn() -> void = default
    SetInt : fn(u32, i32) -> void = default
    GetBool : fn(u32, i32) -> i32 = default
    SetBool : fn(u32, i32) -> void = default
    GetFloat : fn(u32, f32) -> f32 = default
    SetFloat : fn(u32, f32) -> void = default
    GetVoidPtr : fn(u32) -> &void = default
    SetVoidPtr : fn(u32, &void) -> void = default
    GetIntRef : fn(u32, i32) -> &i32 = default
    GetBoolRef : fn(u32, i32) -> &i32 = default
    GetFloatRef : fn(u32, f32) -> &f32 = default
    GetVoidPtrRef : fn(u32, &void) -> &&void = default
    SetAllInt : fn(i32) -> void = default
    BuildSortByKey : fn() -> void = default
}
*/
/*
ImGuiListClipper :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1724
    StartPosY    : f32 = default
    ItemsHeight  : f32 = default
    ItemsCount   : i32 = default
    StepNo       : i32 = default
    DisplayStart : i32 = default
    DisplayEnd   : i32 = default
    ImGuiListClipper : fn(i32, f32) -> i32 = default
    Begin        : fn(i32, f32) -> void = default
    End          : fn() -> void = default
}
*/
/*
ImColor :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1764
    Value : ImVec4 = default
    ImColor : fn() -> i32 = default
}
*/
ImDrawCallback :: fn(&ImDrawList, &ImDrawCmd) -> void
/*
ImDrawCmd :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1806
    ElemCount        : u32 = default
    ClipRect         : ImVec4 = default
    TextureId        : &void = default
    VtxOffset        : u32 = default
    IdxOffset        : u32 = default
    UserCallback     : fn(&ImDrawList, &ImDrawCmd) -> void = default
    UserCallbackData : &void = default
    ImDrawCmd        : fn() -> i32 = default
}
*/
ImDrawIdx :: u16
ImDrawVert :: struct #copy {
    pos : ImVec2 = default
    uv  : ImVec2 = default
    col : u32 = default
}
/*
ImDrawChannel :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1843
     : i32 = default
     : i32 = default
}
*/
/*
ImDrawListSplitter :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1851
    _Current : i32 = default
    _Count   : i32 = default
             : i32 = default
    ImDrawListSplitter : fn() -> i32 = default
    Split    : fn(&ImDrawList, i32) -> void = default
    Merge    : fn(&ImDrawList) -> void = default
    SetCurrentChannel : fn(&ImDrawList, i32) -> void = default
}
*/
ImDrawCornerFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None     = 0x0
    TopLeft  = 0x1
    TopRight = 0x2
    BotLeft  = 0x4
    BotRight = 0x8
    Top      = 0x3
    Bot      = 0xC
    Left     = 0x5
    Right    = 0xA
    All      = 0xF
}
ImDrawListFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None             = 0x0
    AntiAliasedLines = 0x1
    AntiAliasedFill  = 0x2
    AllowVtxOffset   = 0x4
}
/*
ImDrawList :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1896
                      : i32 = default
                      : i32 = default
                      : i32 = default
    Flags             : i32 = default
    _Data             : &ImDrawListSharedData = default
    _OwnerName        : &char8 = default
    _VtxCurrentOffset : u32 = default
    _VtxCurrentIdx    : u32 = default
    _VtxWritePtr      : &ImDrawVert = default
    _IdxWritePtr      : &u16 = default
                      : i32 = default
                      : i32 = default
                      : i32 = default
    _Splitter         : ImDrawListSplitter = default
    ImDrawList        : fn(&ImDrawListSharedData) -> i32 = default
    PushClipRectFullScreen : fn() -> void = default
    PopClipRect       : fn() -> void = default
    PushTextureID     : fn(&void) -> void = default
    PopTextureID      : fn() -> void = default
    GetClipRectMin    : fn() -> ImVec2 = default
    AddRect           : fn(ImVec2) -> void = default
    AddRectFilled     : fn(ImVec2) -> void = default
    AddRectFilledMultiColor : fn(ImVec2) -> void = default
    AddQuad           : fn(ImVec2) -> void = default
    AddQuadFilled     : fn(ImVec2) -> void = default
    AddTriangle       : fn(ImVec2) -> void = default
    AddTriangleFilled : fn(ImVec2) -> void = default
    AddCircle         : fn(ImVec2) -> void = default
    AddCircleFilled   : fn(ImVec2) -> void = default
    AddNgon           : fn(ImVec2) -> void = default
    AddNgonFilled     : fn(ImVec2) -> void = default
    AddText           : fn(ImVec2) -> void = default
    AddPolyline       : fn(&ImVec2, i32, u32, i32, f32) -> void = default
    AddConvexPolyFilled : fn(&ImVec2, i32, u32) -> void = default
    AddBezierCurve    : fn(ImVec2) -> void = default
    AddImage          : fn(&void, ImVec2) -> void = default
    AddImageQuad      : fn(&void, ImVec2) -> void = default
    AddImageRounded   : fn(&void, ImVec2) -> void = default
    PathClear         : fn() -> void = default
    PathArcToFast     : fn(ImVec2) -> void = default
    PathBezierCurveTo : fn(ImVec2) -> void = default
    PathRect          : fn(ImVec2) -> void = default
    AddCallback       : fn(fn(&ImDrawList, &ImDrawCmd) -> void, &void) -> void = default
    AddDrawCmd        : fn() -> void = default
    CloneOutput       : fn() -> &ImDrawList = default
    ChannelsSplit     : fn(i32) -> void = default
    ClearFreeMemory   : fn() -> void = default
    PrimReserve       : fn(i32, i32) -> void = default
    PrimUnreserve     : fn(i32, i32) -> void = default
    PrimRect          : fn(ImVec2) -> void = default
    PrimRectUV        : fn(ImVec2) -> void = default
    PrimQuadUV        : fn(ImVec2) -> void = default
    PrimWriteVtx      : fn(ImVec2) -> void = default
    UpdateTextureID   : fn() -> void = default
}
*/
/*
ImDrawData :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:1997
    Valid            : i32 = default
    CmdLists         : &&ImDrawList = default
    CmdListsCount    : i32 = default
    TotalIdxCount    : i32 = default
    TotalVtxCount    : i32 = default
    DisplayPos       : ImVec2 = default
    DisplaySize      : ImVec2 = default
    FramebufferScale : ImVec2 = default
    ImDrawData       : fn() -> i32 = default
    ScaleClipRects   : fn(ImVec2) -> void = default
}
*/
/*
ImFontConfig :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:2020
    FontData             : &void = default
    FontDataSize         : i32 = default
    FontDataOwnedByAtlas : i32 = default
    FontNo               : i32 = default
    SizePixels           : f32 = default
    OversampleH          : i32 = default
    OversampleV          : i32 = default
    PixelSnapH           : i32 = default
    GlyphExtraSpacing    : ImVec2 = default
    GlyphOffset          : ImVec2 = default
    GlyphRanges          : &u16 = default
    GlyphMinAdvanceX     : f32 = default
    GlyphMaxAdvanceX     : f32 = default
    MergeMode            : i32 = default
    RasterizerFlags      : u32 = default
    RasterizerMultiply   : f32 = default
    EllipsisChar         : u16 = default
    Name                 : [40]char8 = default
    DstFont              : &ImFont = default
    ImFontConfig         : fn() -> i32 = default
}
*/
ImFontGlyph :: struct #copy {
    Codepoint : u16 = default
    AdvanceX  : f32 = default
    X0        : f32 = default
    Y0        : f32 = default
    X1        : f32 = default
    Y1        : f32 = default
    U0        : f32 = default
    V0        : f32 = default
    U1        : f32 = default
    V1        : f32 = default
}
/*
ImFontGlyphRangesBuilder :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:2057
     : i32 = default
    ImFontGlyphRangesBuilder : fn() -> i32 = default
    AddRanges : fn(&u16) -> void = default
    BuildRanges : fn(i32) -> void = default
}
*/
/*
ImFontAtlasCustomRect :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:2072
    ID            : u32 = default
    Width         : u16 = default
    Height        : u16 = default
    X             : u16 = default
    Y             : u16 = default
    GlyphAdvanceX : f32 = default
    GlyphOffset   : ImVec2 = default
    Font          : &ImFont = default
    ImFontAtlasCustomRect : fn() -> i32 = default
}
*/
ImFontAtlasFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None               = 0x0
    NoPowerOfTwoHeight = 0x1
    NoMouseCursors     = 0x2
}
/*
ImFontAtlas :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:2108
    ImFontAtlas        : fn() -> i32 = default
                       : i32 = default
    AddFont            : fn(&ImFontConfig) -> &ImFont = default
    AddFontDefault     : fn(&ImFontConfig) -> &ImFont = default
    AddFontFromFileTTF : fn(&char8, f32, &ImFontConfig, &u16) -> &ImFont = default
    AddFontFromMemoryTTF : fn(&void, i32, f32, &ImFontConfig, &u16) -> &ImFont = default
    AddFontFromMemoryCompressedTTF : fn(&void, i32, f32, &ImFontConfig, &u16) -> &ImFont = default
    AddFontFromMemoryCompressedBase85TTF : fn(&char8, f32, &ImFontConfig, &u16) -> &ImFont = default
    ClearInputData     : fn() -> void = default
    ClearTexData       : fn() -> void = default
    ClearFonts         : fn() -> void = default
    Clear              : fn() -> void = default
    Build              : fn() -> i32 = default
    GetTexDataAsAlpha8 : fn(&&u8, &i32, &i32, &i32) -> void = default
    GetTexDataAsRGBA32 : fn(&&u8, &i32, &i32, &i32) -> void = default
    IsBuilt            : fn() -> i32 = default
    GetGlyphRangesKorean : fn() -> &u16 = default
    GetGlyphRangesJapanese : fn() -> &u16 = default
    GetGlyphRangesChineseFull : fn() -> &u16 = default
    GetGlyphRangesChineseSimplifiedCommon : fn() -> &u16 = default
    GetGlyphRangesCyrillic : fn() -> &u16 = default
    GetGlyphRangesThai : fn() -> &u16 = default
    GetGlyphRangesVietnamese : fn() -> &u16 = default
    AddCustomRectRegular : fn(u32, i32, i32) -> i32 = default
    AddCustomRectFontGlyph : fn(&ImFont, u16, i32, i32, f32, ImVec2) -> i32 = default
    GetCustomRectByIndex : fn(i32) -> &ImFontAtlasCustomRect = default
    GetMouseCursorTexData : fn(i32, &ImVec2, &ImVec2, [2]ImVec2, [2]ImVec2) -> i32 = default
    Locked             : i32 = default
    Flags              : i32 = default
    TexID              : &void = default
    TexDesiredWidth    : i32 = default
    TexGlyphPadding    : i32 = default
    TexPixelsAlpha8    : &u8 = default
    TexPixelsRGBA32    : &u32 = default
    TexWidth           : i32 = default
    TexHeight          : i32 = default
    TexUvScale         : ImVec2 = default
    TexUvWhitePixel    : ImVec2 = default
                       : i32 = default
                       : i32 = default
                       : i32 = default
    CustomRectIds      : [1]i32 = default
    CustomRect         : ImFontAtlasCustomRect = default
    GlyphRangesBuilder : ImFontGlyphRangesBuilder = default
}
*/
/*
ImFont :: struct #copy {
    // TODO: D:\Programming\C++ Projects\imgui\imgui\imgui.h:2198
                        : i32 = default
    FallbackAdvanceX    : f32 = default
    FontSize            : f32 = default
                        : i32 = default
                        : i32 = default
    FallbackGlyph       : &ImFontGlyph = default
    DisplayOffset       : ImVec2 = default
    ContainerAtlas      : &ImFontAtlas = default
    ConfigData          : &ImFontConfig = default
    ConfigDataCount     : i16 = default
    FallbackChar        : u16 = default
    EllipsisChar        : u16 = default
    Scale               : f32 = default
    Ascent              : f32 = default
    Descent             : f32 = default
    MetricsTotalSurface : i32 = default
    DirtyLookupTables   : i32 = default
    ImFont              : fn() -> i32 = default
                        : i32 = default
    FindGlyph           : fn(u16) -> &ImFontGlyph = default
    FindGlyphNoFallback : fn(u16) -> &ImFontGlyph = default
    GetCharAdvance      : fn(u16) -> f32 = default
    CalcWordWrapPositionA : fn(f32, &char8, &char8, f32) -> &char8 = default
    RenderChar          : fn(&ImDrawList, f32, ImVec2, u32, u16) -> void = default
    RenderText          : fn(&ImDrawList, f32, ImVec2, u32, ImVec4) -> void = default
    BuildLookupTable    : fn() -> void = default
    ClearOutputData     : fn() -> void = default
    GrowIndex           : fn(i32) -> void = default
    AddGlyph            : fn(u16, f32, f32, f32, f32, f32, f32, f32, f32, f32) -> void = default
    AddRemapChar        : fn(u16, u16, i32) -> void = default
    SetFallbackChar     : fn(u16) -> void = default
}
*/
