#export_scope
// beta stuff
ImGuiWindowClass :: struct #copy {
    ClassId                    : ImGuiID            = 0     // User data. 0 = Default class (unclassed)
    ParentViewportId           : ImGuiID            = 0     // Hint for the platform back-end. If non-zero, the platform back-end can create a parent<>child relationship between the platform windows. Not conforming back-ends are free to e.g. parent every viewport to the main viewport or not.
    ViewportFlagsOverrideSet   := ImGuiViewportFlags.None   // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    ViewportFlagsOverrideClear := ImGuiViewportFlags.None   // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.
    DockingAlwaysTabBar        : bool               = false // Set to true to enforce windows of this class always having their own tab (equivalent of setting the global io.ConfigDockingAlwaysTabBar)
    DockingAllowUnclassed      : bool               = false // Set to true to allow windows of this class to be docked/merged with an unclassed window.

    // ImGuiWindowClass() { ClassId = 0; ParentViewportId = 0; ViewportFlagsOverrideSet = ViewportFlagsOverrideClear = 0x00; DockingAlwaysTabBar = false; DockingAllowUnclassed = true; }
}

ImGuiViewportFlags :: enum #copy #repr("C") #tag_type(i32) {
    None                     = @bin_lsl(0, 0)
    NoDecoration             = @bin_lsl(1, 0) // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)
    NoTaskBarIcon            = @bin_lsl(1, 1) // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)
    NoFocusOnAppearing       = @bin_lsl(1, 2) // Platform Window: Don't take focus when created.
    NoFocusOnClick           = @bin_lsl(1, 3) // Platform Window: Don't take focus when clicked on.
    NoInputs                 = @bin_lsl(1, 4) // Platform Window: Make mouse pass through so we can drag this window while peaking behind it.
    NoRendererClear          = @bin_lsl(1, 5) // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).
    TopMost                  = @bin_lsl(1, 6) // Platform Window: Display on top (for tooltips only).
    Minimized                = @bin_lsl(1, 7) // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.
    NoAutoMerge              = @bin_lsl(1, 8) // Platform Window: Avoid merging this widow into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).
    CanHostOtherWindows      = @bin_lsl(1, 9) // Main viewport: can host multiple imgui windows (secondary viewports are associated to a single window).
}

ImGuiDockNodeFlags :: i32
ImGuiDockNodeFlags_ :: enum #copy #repr("C") #tag_type(i32) {
    None                         = 0
    KeepAliveOnly                = @bin_lsl(1, 0) // Shared       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.
    NoCentralNode                = @bin_lsl(1, 1) // Shared       // Disable Central Node (the node which can stay empty)
    NoDockingInCentralNode       = @bin_lsl(1, 2) // Shared       // Disable docking inside the Central Node, which will be always kept empty.
    PassthruCentralNode          = @bin_lsl(1, 3) // Shared       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.
    NoSplit                      = @bin_lsl(1, 4) // Shared/Local // Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved.
    NoResize                     = @bin_lsl(1, 5) // Shared/Local // Disable resizing node using the splitter/separators. Useful with programatically setup dockspaces.
    AutoHideTabBar               = @bin_lsl(1, 6) // Shared/Local // Tab bar will automatically hide when there is a single window in the dock node.
}

ImGuiViewport :: struct #copy {
    ID                    : ImGuiID            // Unique identifier for the viewport
    Flags                 : ImGuiViewportFlags // See ImGuiViewportFlags_
    Pos                   : ImVec2             // Position of viewport both in imgui space and in OS desktop/native space
    Size                  : ImVec2             // Size of viewport in pixel
    DpiScale              : float              // 1.0f = 96 DPI = No extra scale
    DrawData              : &ImDrawData        // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().
    ParentViewportId      : ImGuiID            // (Advanced) 0: no parent. Instruct the platform back-end to setup a parent/child relationship between platform windows.
    RendererUserData      : &void              // void* to hold custom data structure for the renderer (e.g. swap chain, frame-buffers etc.)
    PlatformUserData      : &void              // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context)
    PlatformHandle        : &void              // void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)
    PlatformHandleRaw     : &void              // void* to hold low-level, platform-native window handle (e.g. the HWND) when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)
    PlatformRequestClose  : bool               // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)
    PlatformRequestMove   : bool               // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)
    PlatformRequestResize : bool               // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)
}

//

ImDrawListSharedData    :: struct #copy {}
ImGuiContext            :: struct #copy {}

ImTextureID             :: &void
ImGuiID                 :: u32
ImWchar                 :: u16
ImGuiCol                :: i32
ImGuiCond               :: i32
ImGuiDataType           :: i32
ImGuiDir                :: i32
ImGuiKey                :: i32
ImGuiNavInput           :: i32
ImGuiMouseCursor        :: i32
ImGuiStyleVar           :: i32
ImDrawCornerFlags       :: i32
ImDrawListFlags         :: i32
ImFontAtlasFlags        :: i32
ImGuiBackendFlags       :: i32
ImGuiColorEditFlags     :: i32
ImGuiConfigFlags        :: i32
ImGuiComboFlags         :: i32
ImGuiDragDropFlags      :: i32
ImGuiFocusedFlags       :: i32
ImGuiHoveredFlags       :: i32
ImGuiInputTextFlags     :: i32
ImGuiSelectableFlags    :: i32
ImGuiTabBarFlags        :: i32
ImGuiTabItemFlags       :: i32
ImGuiTreeNodeFlags      :: i32
ImGuiWindowFlags        :: i32
ImGuiInputTextCallback  :: fn(&ImGuiInputTextCallbackData) -> i32
ImGuiSizeCallback       :: fn(&ImGuiSizeCallbackData)
ImS8                    :: i8
ImU8                    :: u8
ImS16                   :: i16
ImU16                   :: u16
ImS32                   :: i32
ImU32                   :: u32
ImS64                   :: i64
ImU64                   :: u64
ImDrawCallback          :: fn(&ImDrawList, &ImDrawCmd)
ImDrawIdx               :: u16

ImVector :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &void
}

ImVector_float :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &f32
}

ImVector_ImWchar :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImWchar
}

ImVector_ImDrawVert :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImDrawVert
}

ImVector_ImFontGlyph :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImFontGlyph
}

ImVector_ImGuiTextRange :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImGuiTextRange
}

ImVector_ImGuiStoragePair :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImGuiStoragePair
}

ImVector_ImDrawChannel :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImDrawChannel
}

ImVector_char :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &i8
}

ImVector_ImU32 :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImU32
}

ImVector_ImFontAtlasCustomRect :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImFontAtlasCustomRect
}

ImVector_ImTextureID :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImTextureID
}

ImVector_ImFontConfig :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImFontConfig
}

ImVector_ImFontPtr :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &&ImFont
}

ImVector_ImDrawCmd :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImDrawCmd
}

ImVector_ImVec4 :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImVec4
}

ImVector_ImDrawIdx :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImDrawIdx
}

ImVector_ImVec2 :: struct #copy {
    Size     : i32
    Capacity : i32
    Data     : &ImVec2
}

ImVec2 :: struct #copy {
    x : f32
    y : f32
}

ImVec4 :: struct #copy {
    x : f32
    y : f32
    z : f32
    w : f32
}

ImGuiWindowFlags_ :: enum #copy #repr("C") {
    None                      = 0
    NoTitleBar                = @bin_lsl(1, 0)
    NoResize                  = @bin_lsl(1, 1)
    NoMove                    = @bin_lsl(1, 2)
    NoScrollbar               = @bin_lsl(1, 3)
    NoScrollWithMouse         = @bin_lsl(1, 4)
    NoCollapse                = @bin_lsl(1, 5)
    AlwaysAutoResize          = @bin_lsl(1, 6)
    NoBackground              = @bin_lsl(1, 7)
    NoSavedSettings           = @bin_lsl(1, 8)
    NoMouseInputs             = @bin_lsl(1, 9)
    MenuBar                   = @bin_lsl(1, 10)
    HorizontalScrollbar       = @bin_lsl(1, 11)
    NoFocusOnAppearing        = @bin_lsl(1, 12)
    NoBringToFrontOnFocus     = @bin_lsl(1, 13)
    AlwaysVerticalScrollbar   = @bin_lsl(1, 14)
    AlwaysHorizontalScrollbar = @bin_lsl(1, 15)
    AlwaysUseWindowPadding    = @bin_lsl(1, 16)
    NoNavInputs               = @bin_lsl(1, 18)
    NoNavFocus                = @bin_lsl(1, 19)
    UnsavedDocument           = @bin_lsl(1, 20)
    NoDocking                 = @bin_lsl(1, 21)
    NoNav                     = @bin_or(NoNavInputs, NoNavFocus)
    NoDecoration              = @bin_or(NoTitleBar, NoResize, NoScrollbar, NoCollapse)
    NoInputs                  = @bin_or(NoMouseInputs, NoNavInputs, NoNavFocus)
    NavFlattened              = @bin_lsl(1, 23)
    ChildWindow               = @bin_lsl(1, 24)
    Tooltip                   = @bin_lsl(1, 25)
    Popup                     = @bin_lsl(1, 26)
    Modal                     = @bin_lsl(1, 27)
    ChildMenu                 = @bin_lsl(1, 28)
}

ImGuiInputTextFlags_ :: enum #copy #repr("C") {
    ImGuiInputTextFlags_None                = 0
    ImGuiInputTextFlags_CharsDecimal        = @bin_lsl(1, 0)
    ImGuiInputTextFlags_CharsHexadecimal    = @bin_lsl(1, 1)
    ImGuiInputTextFlags_CharsUppercase      = @bin_lsl(1, 2)
    ImGuiInputTextFlags_CharsNoBlank        = @bin_lsl(1, 3)
    ImGuiInputTextFlags_AutoSelectAll       = @bin_lsl(1, 4)
    ImGuiInputTextFlags_EnterReturnsTrue    = @bin_lsl(1, 5)
    ImGuiInputTextFlags_CallbackCompletion  = @bin_lsl(1, 6)
    ImGuiInputTextFlags_CallbackHistory     = @bin_lsl(1, 7)
    ImGuiInputTextFlags_CallbackAlways      = @bin_lsl(1, 8)
    ImGuiInputTextFlags_CallbackCharFilter  = @bin_lsl(1, 9)
    ImGuiInputTextFlags_AllowTabInput       = @bin_lsl(1, 10)
    ImGuiInputTextFlags_CtrlEnterForNewLine = @bin_lsl(1, 11)
    ImGuiInputTextFlags_NoHorizontalScroll  = @bin_lsl(1, 12)
    ImGuiInputTextFlags_AlwaysInsertMode    = @bin_lsl(1, 13)
    ImGuiInputTextFlags_ReadOnly            = @bin_lsl(1, 14)
    ImGuiInputTextFlags_Password            = @bin_lsl(1, 15)
    ImGuiInputTextFlags_NoUndoRedo          = @bin_lsl(1, 16)
    ImGuiInputTextFlags_CharsScientific     = @bin_lsl(1, 17)
    ImGuiInputTextFlags_CallbackResize      = @bin_lsl(1, 18)
    ImGuiInputTextFlags_Multiline           = @bin_lsl(1, 20)
    ImGuiInputTextFlags_NoMarkEdited        = @bin_lsl(1, 21)
}

ImGuiTreeNodeFlags_ :: enum #copy #repr("C") {
    ImGuiTreeNodeFlags_None                 = 0
    ImGuiTreeNodeFlags_Selected             = @bin_lsl(1, 0)
    ImGuiTreeNodeFlags_Framed               = @bin_lsl(1, 1)
    ImGuiTreeNodeFlags_AllowItemOverlap     = @bin_lsl(1, 2)
    ImGuiTreeNodeFlags_NoTreePushOnOpen     = @bin_lsl(1, 3)
    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = @bin_lsl(1, 4)
    ImGuiTreeNodeFlags_DefaultOpen          = @bin_lsl(1, 5)
    ImGuiTreeNodeFlags_OpenOnDoubleClick    = @bin_lsl(1, 6)
    ImGuiTreeNodeFlags_OpenOnArrow          = @bin_lsl(1, 7)
    ImGuiTreeNodeFlags_Leaf                 = @bin_lsl(1, 8)
    ImGuiTreeNodeFlags_Bullet               = @bin_lsl(1, 9)
    ImGuiTreeNodeFlags_FramePadding         = @bin_lsl(1, 10)
    ImGuiTreeNodeFlags_SpanAvailWidth       = @bin_lsl(1, 11)
    ImGuiTreeNodeFlags_SpanFullWidth        = @bin_lsl(1, 12)
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = @bin_lsl(1, 13)
    ImGuiTreeNodeFlags_CollapsingHeader     = @bin_or(ImGuiTreeNodeFlags_Framed, ImGuiTreeNodeFlags_NoTreePushOnOpen, ImGuiTreeNodeFlags_NoAutoOpenOnLog)
}

ImGuiSelectableFlags_ :: enum #copy #repr("C") {
    ImGuiSelectableFlags_None             = 0,
    ImGuiSelectableFlags_DontClosePopups  = @bin_lsl(1, 0)
    ImGuiSelectableFlags_SpanAllColumns   = @bin_lsl(1, 1)
    ImGuiSelectableFlags_AllowDoubleClick = @bin_lsl(1, 2)
    ImGuiSelectableFlags_Disabled         = @bin_lsl(1, 3)
    ImGuiSelectableFlags_AllowItemOverlap = @bin_lsl(1, 4)
}

ImGuiComboFlags_ :: enum #copy #repr("C") {
    ImGuiComboFlags_None           = 0
    ImGuiComboFlags_PopupAlignLeft = @bin_lsl(1, 0)
    ImGuiComboFlags_HeightSmall    = @bin_lsl(1, 1)
    ImGuiComboFlags_HeightRegular  = @bin_lsl(1, 2)
    ImGuiComboFlags_HeightLarge    = @bin_lsl(1, 3)
    ImGuiComboFlags_HeightLargest  = @bin_lsl(1, 4)
    ImGuiComboFlags_NoArrowButton  = @bin_lsl(1, 5)
    ImGuiComboFlags_NoPreview      = @bin_lsl(1, 6)
    ImGuiComboFlags_HeightMask_    = @bin_or(ImGuiComboFlags_HeightSmall, ImGuiComboFlags_HeightRegular, ImGuiComboFlags_HeightLarge, ImGuiComboFlags_HeightLargest)
}

ImGuiTabBarFlags_ :: enum #copy #repr("C") {
    ImGuiTabBarFlags_None                         = 0
    ImGuiTabBarFlags_Reorderable                  = @bin_lsl(1, 0)
    ImGuiTabBarFlags_AutoSelectNewTabs            = @bin_lsl(1, 1)
    ImGuiTabBarFlags_TabListPopupButton           = @bin_lsl(1, 2)
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = @bin_lsl(1, 3)
    ImGuiTabBarFlags_NoTabListScrollingButtons    = @bin_lsl(1, 4)
    ImGuiTabBarFlags_NoTooltip                    = @bin_lsl(1, 5)
    ImGuiTabBarFlags_FittingPolicyResizeDown      = @bin_lsl(1, 6)
    ImGuiTabBarFlags_FittingPolicyScroll          = @bin_lsl(1, 7)
    ImGuiTabBarFlags_FittingPolicyMask_           = @bin_or(ImGuiTabBarFlags_FittingPolicyResizeDown, ImGuiTabBarFlags_FittingPolicyScroll)
    ImGuiTabBarFlags_FittingPolicyDefault_        = ImGuiTabBarFlags_FittingPolicyResizeDown
}

ImGuiTabItemFlags_ :: enum #copy #repr("C") {
    ImGuiTabItemFlags_None                         = 0
    ImGuiTabItemFlags_UnsavedDocument              = @bin_lsl(1, 0)
    ImGuiTabItemFlags_SetSelected                  = @bin_lsl(1, 1)
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = @bin_lsl(1, 2)
    ImGuiTabItemFlags_NoPushId                     = @bin_lsl(1, 3)
}

ImGuiFocusedFlags_ :: enum #copy #repr("C") {
    ImGuiFocusedFlags_None                = 0
    ImGuiFocusedFlags_ChildWindows        = @bin_lsl(1, 0)
    ImGuiFocusedFlags_RootWindow          = @bin_lsl(1, 1)
    ImGuiFocusedFlags_AnyWindow           = @bin_lsl(1, 2)
    ImGuiFocusedFlags_RootAndChildWindows = @bin_or(ImGuiFocusedFlags_RootWindow, ImGuiFocusedFlags_ChildWindows)
}

ImGuiHoveredFlags_ :: enum #copy #repr("C") {
    ImGuiHoveredFlags_None                         = 0
    ImGuiHoveredFlags_ChildWindows                 = @bin_lsl(1, 0)
    ImGuiHoveredFlags_RootWindow                   = @bin_lsl(1, 1)
    ImGuiHoveredFlags_AnyWindow                    = @bin_lsl(1, 2)
    ImGuiHoveredFlags_AllowWhenBlockedByPopup      = @bin_lsl(1, 3)
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = @bin_lsl(1, 5)
    ImGuiHoveredFlags_AllowWhenOverlapped          = @bin_lsl(1, 6)
    ImGuiHoveredFlags_AllowWhenDisabled            = @bin_lsl(1, 7)
    ImGuiHoveredFlags_RectOnly                     = @bin_or(ImGuiHoveredFlags_AllowWhenBlockedByPopup, ImGuiHoveredFlags_AllowWhenBlockedByActiveItem, ImGuiHoveredFlags_AllowWhenOverlapped)
    ImGuiHoveredFlags_RootAndChildWindows          = @bin_or(ImGuiHoveredFlags_RootWindow, ImGuiHoveredFlags_ChildWindows)
}

ImGuiDragDropFlags_ :: enum #copy #repr("C") {
    ImGuiDragDropFlags_None                     = 0
    ImGuiDragDropFlags_SourceNoPreviewTooltip   = @bin_lsl(1, 0)
    ImGuiDragDropFlags_SourceNoDisableHover     = @bin_lsl(1, 1)
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = @bin_lsl(1, 2)
    ImGuiDragDropFlags_SourceAllowNullID        = @bin_lsl(1, 3)
    ImGuiDragDropFlags_SourceExtern             = @bin_lsl(1, 4)
    ImGuiDragDropFlags_SourceAutoExpirePayload  = @bin_lsl(1, 5)
    ImGuiDragDropFlags_AcceptBeforeDelivery     = @bin_lsl(1, 10)
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect  = @bin_lsl(1, 11)
    ImGuiDragDropFlags_AcceptNoPreviewTooltip   = @bin_lsl(1, 12)
    ImGuiDragDropFlags_AcceptPeekOnly           = @bin_or(ImGuiDragDropFlags_AcceptBeforeDelivery, ImGuiDragDropFlags_AcceptNoDrawDefaultRect)
}

ImGuiDataType_ :: enum #copy #repr("C") {
    ImGuiDataType_S8
    ImGuiDataType_U8
    ImGuiDataType_S16
    ImGuiDataType_U16
    ImGuiDataType_S32
    ImGuiDataType_U32
    ImGuiDataType_S64
    ImGuiDataType_U64
    ImGuiDataType_Float
    ImGuiDataType_Double
    ImGuiDataType_COUNT
}

ImGuiDir_ :: enum #copy #repr("C") {
    ImGuiDir_None  = -1
    ImGuiDir_Left  = 0
    ImGuiDir_Right = 1
    ImGuiDir_Up    = 2
    ImGuiDir_Down  = 3
    ImGuiDir_COUNT
}

ImGuiKey_ :: enum #copy #repr("C") {
    ImGuiKey_Tab
    ImGuiKey_LeftArrow
    ImGuiKey_RightArrow
    ImGuiKey_UpArrow
    ImGuiKey_DownArrow
    ImGuiKey_PageUp
    ImGuiKey_PageDown
    ImGuiKey_Home
    ImGuiKey_End
    ImGuiKey_Insert
    ImGuiKey_Delete
    ImGuiKey_Backspace
    ImGuiKey_Space
    ImGuiKey_Enter
    ImGuiKey_Escape
    ImGuiKey_KeyPadEnter
    ImGuiKey_A
    ImGuiKey_C
    ImGuiKey_V
    ImGuiKey_X
    ImGuiKey_Y
    ImGuiKey_Z
    ImGuiKey_COUNT
}

ImGuiNavInput_ :: enum #copy #repr("C") {
    ImGuiNavInput_Activate
    ImGuiNavInput_Cancel
    ImGuiNavInput_Input
    ImGuiNavInput_Menu
    ImGuiNavInput_DpadLeft
    ImGuiNavInput_DpadRight
    ImGuiNavInput_DpadUp
    ImGuiNavInput_DpadDown
    ImGuiNavInput_LStickLeft
    ImGuiNavInput_LStickRight
    ImGuiNavInput_LStickUp
    ImGuiNavInput_LStickDown
    ImGuiNavInput_FocusPrev
    ImGuiNavInput_FocusNext
    ImGuiNavInput_TweakSlow
    ImGuiNavInput_TweakFast
    ImGuiNavInput_KeyMenu_
    ImGuiNavInput_KeyTab_
    ImGuiNavInput_KeyLeft_
    ImGuiNavInput_KeyRight_
    ImGuiNavInput_KeyUp_
    ImGuiNavInput_KeyDown_
    ImGuiNavInput_COUNT
    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
}

// ImGuiConfigFlags_ :: enum #copy #repr("C") {
//     ImGuiConfigFlags_None                 = 0
//     ImGuiConfigFlags_NavEnableKeyboard    = @bin_lsl(1, 0)
//     ImGuiConfigFlags_NavEnableGamepad     = @bin_lsl(1, 1)
//     ImGuiConfigFlags_NavEnableSetMousePos = @bin_lsl(1, 2)
//     ImGuiConfigFlags_NavNoCaptureKeyboard = @bin_lsl(1, 3)
//     ImGuiConfigFlags_NoMouse              = @bin_lsl(1, 4)
//     ImGuiConfigFlags_NoMouseCursorChange  = @bin_lsl(1, 5)
//     ImGuiConfigFlags_IsSRGB               = @bin_lsl(1, 20)
//     ImGuiConfigFlags_IsTouchScreen        = @bin_lsl(1, 21)
// }

ImGuiConfigFlags_ :: enum #copy #repr("C") {
    None                   = 0
    NavEnableKeyboard      = @bin_lsl(1, 0)   // Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[].
    NavEnableGamepad       = @bin_lsl(1, 1)   // Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[]. Back-end also needs to set ImGuiBackendFlags_HasGamepad.
    NavEnableSetMousePos   = @bin_lsl(1, 2)   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth.
    NavNoCaptureKeyboard   = @bin_lsl(1, 3)   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.
    NoMouse                = @bin_lsl(1, 4)   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the back-end.
    NoMouseCursorChange    = @bin_lsl(1, 5)   // Instruct back-end to not alter mouse cursor shape and visibility. Use if the back-end cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.

    // [BETA] Docking
    DockingEnable          = @bin_lsl(1, 6)   // Docking enable flags.

    // [BETA] Viewports
    // When using viewports it is recommended that your default value for ImGuiCol_WindowBg is opaque (Alpha=1.0) so transition to a viewport won't be noticeable.
    ViewportsEnable        = @bin_lsl(1, 10)  // Viewport enable flags (require both PlatformHasViewports + RendererHasViewports set by the respective back-ends)
    DpiEnableScaleViewports= @bin_lsl(1, 14)  // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.
    DpiEnableScaleFonts    = @bin_lsl(1, 15)  // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.

    // User storage (to allow your back-end/engine to communicate to code that may be shared between multiple projects. Those flags are not used by core Dear ImGui)
    IsSRGB                 = @bin_lsl(1, 20)  // Application is SRGB-aware.
    IsTouchScreen          = @bin_lsl(1, 21)   // Application is using a touch screen instead of a mouse.
}

ImGuiBackendFlags_ :: enum #copy #repr("C") {
    ImGuiBackendFlags_None                 = 0
    ImGuiBackendFlags_HasGamepad           = @bin_lsl(1, 0)
    ImGuiBackendFlags_HasMouseCursors      = @bin_lsl(1, 1)
    ImGuiBackendFlags_HasSetMousePos       = @bin_lsl(1, 2)
    ImGuiBackendFlags_RendererHasVtxOffset = @bin_lsl(1, 3)
}

ImGuiCol_ :: enum #copy #repr("C") {
    ImGuiCol_Text
    ImGuiCol_TextDisabled
    ImGuiCol_WindowBg
    ImGuiCol_ChildBg
    ImGuiCol_PopupBg
    ImGuiCol_Border
    ImGuiCol_BorderShadow
    ImGuiCol_FrameBg
    ImGuiCol_FrameBgHovered
    ImGuiCol_FrameBgActive
    ImGuiCol_TitleBg
    ImGuiCol_TitleBgActive
    ImGuiCol_TitleBgCollapsed
    ImGuiCol_MenuBarBg
    ImGuiCol_ScrollbarBg
    ImGuiCol_ScrollbarGrab
    ImGuiCol_ScrollbarGrabHovered
    ImGuiCol_ScrollbarGrabActive
    ImGuiCol_CheckMark
    ImGuiCol_SliderGrab
    ImGuiCol_SliderGrabActive
    ImGuiCol_Button
    ImGuiCol_ButtonHovered
    ImGuiCol_ButtonActive
    ImGuiCol_Header
    ImGuiCol_HeaderHovered
    ImGuiCol_HeaderActive
    ImGuiCol_Separator
    ImGuiCol_SeparatorHovered
    ImGuiCol_SeparatorActive
    ImGuiCol_ResizeGrip
    ImGuiCol_ResizeGripHovered
    ImGuiCol_ResizeGripActive
    ImGuiCol_Tab
    ImGuiCol_TabHovered
    ImGuiCol_TabActive
    ImGuiCol_TabUnfocused
    ImGuiCol_TabUnfocusedActive
    ImGuiCol_PlotLines
    ImGuiCol_PlotLinesHovered
    ImGuiCol_PlotHistogram
    ImGuiCol_PlotHistogramHovered
    ImGuiCol_TextSelectedBg
    ImGuiCol_DragDropTarget
    ImGuiCol_NavHighlight
    ImGuiCol_NavWindowingHighlight
    ImGuiCol_NavWindowingDimBg
    ImGuiCol_ModalWindowDimBg
    ImGuiCol_COUNT
}

ImGuiStyleVar_ :: enum #copy #repr("C") {
    Alpha
    WindowPadding
    WindowRounding
    WindowBorderSize
    WindowMinSize
    WindowTitleAlign
    ChildRounding
    ChildBorderSize
    PopupRounding
    PopupBorderSize
    FramePadding
    FrameRounding
    FrameBorderSize
    ItemSpacing
    ItemInnerSpacing
    IndentSpacing
    ScrollbarSize
    ScrollbarRounding
    GrabMinSize
    GrabRounding
    TabRounding
    ButtonTextAlign
    SelectableTextAlign
    COUNT
}

ImGuiColorEditFlags_ :: enum #copy #repr("C") {
    ImGuiColorEditFlags_None             = 0
    ImGuiColorEditFlags_NoAlpha          = @bin_lsl(1, 1)
    ImGuiColorEditFlags_NoPicker         = @bin_lsl(1, 2)
    ImGuiColorEditFlags_NoOptions        = @bin_lsl(1, 3)
    ImGuiColorEditFlags_NoSmallPreview   = @bin_lsl(1, 4)
    ImGuiColorEditFlags_NoInputs         = @bin_lsl(1, 5)
    ImGuiColorEditFlags_NoTooltip        = @bin_lsl(1, 6)
    ImGuiColorEditFlags_NoLabel          = @bin_lsl(1, 7)
    ImGuiColorEditFlags_NoSidePreview    = @bin_lsl(1, 8)
    ImGuiColorEditFlags_NoDragDrop       = @bin_lsl(1, 9)
    ImGuiColorEditFlags_AlphaBar         = @bin_lsl(1, 16)
    ImGuiColorEditFlags_AlphaPreview     = @bin_lsl(1, 17)
    ImGuiColorEditFlags_AlphaPreviewHalf = @bin_lsl(1, 18)
    ImGuiColorEditFlags_HDR              = @bin_lsl(1, 19)
    ImGuiColorEditFlags_DisplayRGB       = @bin_lsl(1, 20)
    ImGuiColorEditFlags_DisplayHSV       = @bin_lsl(1, 21)
    ImGuiColorEditFlags_DisplayHex       = @bin_lsl(1, 22)
    ImGuiColorEditFlags_Uint8            = @bin_lsl(1, 23)
    ImGuiColorEditFlags_Float            = @bin_lsl(1, 24)
    ImGuiColorEditFlags_PickerHueBar     = @bin_lsl(1, 25)
    ImGuiColorEditFlags_PickerHueWheel   = @bin_lsl(1, 26)
    ImGuiColorEditFlags_InputRGB         = @bin_lsl(1, 27)
    ImGuiColorEditFlags_InputHSV         = @bin_lsl(1, 28)
    ImGuiColorEditFlags__OptionsDefault  = @bin_or(ImGuiColorEditFlags_Uint8, ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_InputRGB, ImGuiColorEditFlags_PickerHueBar)
    ImGuiColorEditFlags__DisplayMask     = @bin_or(ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_DisplayHex)
    ImGuiColorEditFlags__DataTypeMask    = @bin_or(ImGuiColorEditFlags_Uint8, ImGuiColorEditFlags_Float)
    ImGuiColorEditFlags__PickerMask      = @bin_or(ImGuiColorEditFlags_PickerHueWheel, ImGuiColorEditFlags_PickerHueBar)
    ImGuiColorEditFlags__InputMask       = @bin_or(ImGuiColorEditFlags_InputRGB, ImGuiColorEditFlags_InputHSV)
}

ImGuiMouseCursor_ :: enum #copy #repr("C") {
    ImGuiMouseCursor_None       = -1
    ImGuiMouseCursor_Arrow      = 0
    ImGuiMouseCursor_TextInput
    ImGuiMouseCursor_ResizeAll
    ImGuiMouseCursor_ResizeNS
    ImGuiMouseCursor_ResizeEW
    ImGuiMouseCursor_ResizeNESW
    ImGuiMouseCursor_ResizeNWSE
    ImGuiMouseCursor_Hand
    ImGuiMouseCursor_COUNT
}

ImGuiCond_ :: enum #copy #repr("C") {
    ImGuiCond_Always       = @bin_lsl(1, 0)
    ImGuiCond_Once         = @bin_lsl(1, 1)
    ImGuiCond_FirstUseEver = @bin_lsl(1, 2)
    ImGuiCond_Appearing    = @bin_lsl(1, 3)
}

ImGuiStyle :: struct #copy {
    Alpha                    : f32
    WindowPadding            : ImVec2
    WindowRounding           : f32
    WindowBorderSize         : f32
    WindowMinSize            : ImVec2
    WindowTitleAlign         : ImVec2
    WindowMenuButtonPosition : ImGuiDir
    ChildRounding            : f32
    ChildBorderSize          : f32
    PopupRounding            : f32
    PopupBorderSize          : f32
    FramePadding             : ImVec2
    FrameRounding            : f32
    FrameBorderSize          : f32
    ItemSpacing              : ImVec2
    ItemInnerSpacing         : ImVec2
    TouchExtraPadding        : ImVec2
    IndentSpacing            : f32
    ColumnsMinSpacing        : f32
    ScrollbarSize            : f32
    ScrollbarRounding        : f32
    GrabMinSize              : f32
    GrabRounding             : f32
    TabRounding              : f32
    TabBorderSize            : f32
    ColorButtonPosition      : ImGuiDir
    ButtonTextAlign          : ImVec2
    SelectableTextAlign      : ImVec2
    DisplayWindowPadding     : ImVec2
    DisplaySafeAreaPadding   : ImVec2
    MouseCursorScale         : f32
    AntiAliasedLines         : bool
    AntiAliasedFill          : bool
    CurveTessellationTol     : f32
    Colors                   : [int(ImGuiCol_.ImGuiCol_COUNT)]ImVec4
}

ImGuiIO :: struct #copy {
    ConfigFlags                       : ImGuiConfigFlags
    BackendFlags                      : ImGuiBackendFlags
    DisplaySize                       : ImVec2
    DeltaTime                         : f32
    IniSavingRate                     : f32
    IniFilename                       : c_string
    LogFilename                       : c_string
    MouseDoubleClickTime              : f32
    MouseDoubleClickMaxDist           : f32
    MouseDragThreshold                : f32
    KeyMap                            : [int(ImGuiKey_.ImGuiKey_COUNT)]i32
    KeyRepeatDelay                    : f32
    KeyRepeatRate                     : f32
    UserData                          : &void
    Fonts                             : &ImFontAtlas
    FontGlobalScale                   : f32
    FontAllowUserScaling              : bool
    FontDefault                       : &ImFont
    DisplayFramebufferScale           : ImVec2
    ConfigDockingNoSplit              : bool
    ConfigDockingWithShift            : bool
    ConfigDockingAlwaysTabBar         : bool
    ConfigDockingTransparentPayload   : bool
    ConfigViewportsNoAutoMerge        : bool
    ConfigViewportsNoTaskBarIcon      : bool
    ConfigViewportsNoDecoration       : bool
    ConfigViewportsNoDefaultParent    : bool
    MouseDrawCursor                   : bool
    ConfigMacOSXBehaviors             : bool
    ConfigInputTextCursorBlink        : bool
    ConfigWindowsResizeFromEdges      : bool
    ConfigWindowsMoveFromTitleBarOnly : bool
    ConfigWindowsMemoryCompactTimer   : f32
    BackendPlatformName               : c_string
    BackendRendererName               : c_string
    BackendPlatformUserData           : &void
    BackendRendererUserData           : &void
    BackendLanguageUserData           : &void
    GetClipboardTextFn                : fn(&void) -> c_string
    SetClipboardTextFn                : fn(&void, c_string) -> void
    ClipboardUserData                 : &void
    RenderDrawListsFnUnused           : &void
    MousePos                          : ImVec2
    MouseDown                         : [5]bool
    MouseWheel                        : f32
    MouseWheelH                       : f32
    MouseHoveredViewport              : ImGuiID
    KeyCtrl                           : bool
    KeyShift                          : bool
    KeyAlt                            : bool
    KeySuper                          : bool
    KeysDown                          : [512]bool
    NavInputs                         : [int(ImGuiNavInput_.ImGuiNavInput_COUNT)]f32
    WantCaptureMouse                  : bool
    WantCaptureKeyboard               : bool
    WantTextInput                     : bool
    WantSetMousePos                   : bool
    WantSaveIniSettings               : bool
    NavActive                         : bool
    NavVisible                        : bool
    Framerate                         : f32
    MetricsRenderVertices             : i32
    MetricsRenderIndices              : i32
    MetricsRenderWindows              : i32
    MetricsActiveWindows              : i32
    MetricsActiveAllocations          : i32
    MouseDelta                        : ImVec2
    MousePosPrev                      : ImVec2
    MouseClickedPos                   : [5]ImVec2
    MouseClickedTime                  : [5]f64
    MouseClicked                      : [5]bool
    MouseDoubleClicked                : [5]bool
    MouseReleased                     : [5]bool
    MouseDownOwned                    : [5]bool
    MouseDownWasDoubleClick           : [5]bool
    MouseDownDuration                 : [5]f32
    MouseDownDurationPrev             : [5]f32
    MouseDragMaxDistanceAbs           : [5]ImVec2
    MouseDragMaxDistanceSqr           : [5]f32
    KeysDownDuration                  : [512]f32
    KeysDownDurationPrev              : [512]f32
    NavInputsDownDuration             : [int(ImGuiNavInput_.ImGuiNavInput_COUNT)]f32
    NavInputsDownDurationPrev         : [int(ImGuiNavInput_.ImGuiNavInput_COUNT)]f32
    InputQueueCharacters              : ImVector_ImWchar
}

ImGuiInputTextCallbackData :: struct #copy {
    EventFlag      : ImGuiInputTextFlags
    Flags          : ImGuiInputTextFlags
    UserData       : &void
    EventChar      : ImWchar
    EventKey       : ImGuiKey
    Buf            : &i8
    BufTextLen     : i32
    BufSize        : i32
    BufDirty       : bool
    CursorPos      : i32
    SelectionStart : i32
    SelectionEnd   : i32
}

ImGuiSizeCallbackData :: struct #copy {
    UserData    : &void
    Pos         : ImVec2
    CurrentSize : ImVec2
    DesiredSize : ImVec2
}

ImGuiPayload :: struct #copy {
    Data           : &void
    DataSize       : i32
    SourceId       : ImGuiID
    SourceParentId : ImGuiID
    DataFrameCount : i32
    DataType       : [32+1]i8
    Preview        : bool
    Delivery       : bool
}

ImGuiOnceUponAFrame :: struct #copy {
    RefFrame : i32
}

ImGuiTextFilter :: struct #copy {
    InputBuf  : [256]i8
    Filters   : ImVector_ImGuiTextRange
    CountGrep : i32
}

ImGuiTextBuffer :: struct #copy {
    Buf : ImVector_char
}

ImGuiStorage :: struct #copy {
    Data : ImVector_ImGuiStoragePair
}

ImGuiListClipper :: struct #copy {
    StartPosY    : f32
    ItemsHeight  : f32
    ItemsCount   : i32
    StepNo       : i32
    DisplayStart : i32
    DisplayEnd   : i32
}

ImColor :: struct #copy {
    Value : ImVec4
}

ImDrawCmd :: struct #copy {
    ElemCount        : u32
    ClipRect         : ImVec4
    TextureId        : ImTextureID
    VtxOffset        : u32
    IdxOffset        : u32
    UserCallback     : ImDrawCallback
    UserCallbackData : &void
}

ImDrawVert :: struct #copy {
    pos : ImVec2
    uv  : ImVec2
    col : ImU32
}

ImDrawChannel :: struct #copy {
    _CmdBuffer : ImVector_ImDrawCmd
    _IdxBuffer : ImVector_ImDrawIdx
}

ImDrawListSplitter :: struct #copy {
    _Current  : i32
    _Count    : i32
    _Channels : ImVector_ImDrawChannel
}

ImDrawCornerFlags_ :: enum #copy #repr("C") {
    ImDrawCornerFlags_None     = 0
    ImDrawCornerFlags_TopLeft  = @bin_lsl(1, 0)
    ImDrawCornerFlags_TopRight = @bin_lsl(1, 1)
    ImDrawCornerFlags_BotLeft  = @bin_lsl(1, 2)
    ImDrawCornerFlags_BotRight = @bin_lsl(1, 3)
    ImDrawCornerFlags_Top      = @bin_or(ImDrawCornerFlags_TopLeft, ImDrawCornerFlags_TopRight)
    ImDrawCornerFlags_Bot      = @bin_or(ImDrawCornerFlags_BotLeft, ImDrawCornerFlags_BotRight)
    ImDrawCornerFlags_Left     = @bin_or(ImDrawCornerFlags_TopLeft, ImDrawCornerFlags_BotLeft)
    ImDrawCornerFlags_Right    = @bin_or(ImDrawCornerFlags_TopRight, ImDrawCornerFlags_BotRight)
    ImDrawCornerFlags_All      = 0xF
}

ImDrawListFlags_ :: enum #copy #repr("C") {
    ImDrawListFlags_None             = 0,
    ImDrawListFlags_AntiAliasedLines = @bin_lsl(1, 0)
    ImDrawListFlags_AntiAliasedFill  = @bin_lsl(1, 1)
    ImDrawListFlags_AllowVtxOffset   = @bin_lsl(1, 2)
}

ImDrawList :: struct #copy {
    CmdBuffer         : ImVector_ImDrawCmd
    IdxBuffer         : ImVector_ImDrawIdx
    VtxBuffer         : ImVector_ImDrawVert
    Flags             : ImDrawListFlags
    _Data             : &ImDrawListSharedData
    _OwnerName        : &i8
    _VtxCurrentOffset : u32
    _VtxCurrentIdx    : u32
    _VtxWritePtr      : &ImDrawVert
    _IdxWritePtr      : &ImDrawIdx
    _ClipRectStack    : ImVector_ImVec4
    _TextureIdStack   : ImVector_ImTextureID
    _Path             : ImVector_ImVec2
    _Splitter         : ImDrawListSplitter
}

ImDrawData :: struct #copy {
    Valid            : bool
    CmdLists         : &&ImDrawList
    CmdListsCount    : i32
    TotalIdxCount    : i32
    TotalVtxCount    : i32
    DisplayPos       : ImVec2
    DisplaySize      : ImVec2
    FramebufferScale : ImVec2
}

ImFontConfig :: struct #copy {
    FontData             : &void
    FontDataSize         : i32
    FontDataOwnedByAtlas : bool
    FontNo               : i32
    SizePixels           : f32
    OversampleH          : i32
    OversampleV          : i32
    PixelSnapH           : bool
    GlyphExtraSpacing    : ImVec2
    GlyphOffset          : ImVec2
    GlyphRanges          : &ImWchar
    GlyphMinAdvanceX     : f32
    GlyphMaxAdvanceX     : f32
    MergeMode            : bool
    RasterizerFlags      : u32
    RasterizerMultiply   : f32
    EllipsisChar         : ImWchar
    Name                 : [40]i8
    DstFont              : &ImFont
}

ImFontGlyph :: struct #copy {
    Codepoint : ImWchar
    AdvanceX  : f32
    X0        : f32
    Y0        : f32
    X1        : f32
    Y1        : f32
    U0        : f32
    V0        : f32
    U1        : f32
    V1        : f32
}

ImFontGlyphRangesBuilder :: struct #copy {
    UsedChars : ImVector_ImU32
}

ImFontAtlasCustomRect :: struct #copy {
    ID            : u32
    Width         : u16
    Height        : u16
    X             : u16
    Y             : u16
    GlyphAdvanceX : f32
    GlyphOffset   : ImVec2
    Font          : &ImFont
}

ImFontAtlasFlags_ :: enum #copy #repr("C") {
    ImFontAtlasFlags_None               = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight = @bin_lsl(1, 0)
    ImFontAtlasFlags_NoMouseCursors     = @bin_lsl(1, 1)
}

ImFontAtlas :: struct #copy {
    Locked          : bool
    Flags           : ImFontAtlasFlags
    TexID           : ImTextureID
    TexDesiredWidth : i32
    TexGlyphPadding : i32
    TexPixelsAlpha8 : &u8
    TexPixelsRGBA32 : &u32
    TexWidth        : i32
    TexHeight       : i32
    TexUvScale      : ImVec2
    TexUvWhitePixel : ImVec2
    Fonts           : ImVector_ImFontPtr
    CustomRects     : ImVector_ImFontAtlasCustomRect
    ConfigData      : ImVector_ImFontConfig
    CustomRectIds   : [1]i32
}

ImFont :: struct #copy {
    IndexAdvanceX       : ImVector_float
    FallbackAdvanceX    : f32
    FontSize            : f32
    IndexLookup         : ImVector_ImWchar
    Glyphs              : ImVector_ImFontGlyph
    FallbackGlyph       : &ImFontGlyph
    DisplayOffset       : ImVec2
    ContainerAtlas      : &ImFontAtlas
    ConfigData          : &ImFontConfig
    ConfigDataCount     : i16
    FallbackChar        : ImWchar
    EllipsisChar        : ImWchar
    Scale               : f32
    Ascent              : f32
    Descent             : f32
    MetricsTotalSurface : i32
    DirtyLookupTables   : bool
}

ImGuiTextRange :: struct #copy {
    b : &i8
    e : &i8
}

ImGuiStoragePair :: struct #copy {
    key : ImGuiID
    val : u64
    // union { i32 val_i f32 val_f &void val_p }
}

ImVec2_Simple  :: struct #copy {
    x : f32
    y : f32
}
ImVec4_Simple  :: struct #copy {
    x : f32
    y : f32
    z : f32
    w : f32
}
ImColor_Simple :: struct #copy {
    Value : ImVec4_Simple
}
