ImVec2_ImVec2                                         :: () -> &ImVec2;
ImVec2_destroy                                        :: (self : &ImVec2) -> void;
ImVec2_ImVec2Float                                    :: (_x : f32, _y : f32) -> &ImVec2;
ImVec4_ImVec4                                         :: () -> &ImVec4;
ImVec4_destroy                                        :: (self : &ImVec4) -> void;
ImVec4_ImVec4Float                                    :: (_x : f32, _y : f32, _z : f32, _w : f32) -> &ImVec4;
igCreateContext                                       :: (shared_font_atlas : &ImFontAtlas) -> &ImGuiContext;
igDestroyContext                                      :: (ctx : &ImGuiContext) -> void;
igGetCurrentContext                                   :: () -> &ImGuiContext;
igSetCurrentContext                                   :: (ctx : &ImGuiContext) -> void;
igDebugCheckVersionAndDataLayout                      :: (version_str : &i8, sz_io : u64, sz_style : u64, sz_vec2 : u64, sz_vec4 : u64, sz_drawvert : u64, sz_drawidx : u64) -> bool;
igGetIO                                               :: () -> &ImGuiIO;
igGetStyle                                            :: () -> &ImGuiStyle;
igNewFrame                                            :: () -> void;
igEndFrame                                            :: () -> void;
igUpdatePlatformWindows                               :: () -> void;
igRenderPlatformWindowsDefault                        :: () -> void;
igRender                                              :: () -> void;
igGetDrawData                                         :: () -> &ImDrawData;
igShowDemoWindow                                      :: (p_open : &bool) -> void;
igShowAboutWindow                                     :: (p_open : &bool) -> void;
igShowMetricsWindow                                   :: (p_open : &bool) -> void;
igShowStyleEditor                                     :: (_ref : &ImGuiStyle) -> void;
igShowStyleSelector                                   :: (label : &i8) -> bool;
igShowFontSelector                                    :: (label : &i8) -> void;
igShowUserGuide                                       :: () -> void;
igGetVersion                                          :: () -> &i8;
igStyleColorsDark                                     :: (dst : &ImGuiStyle) -> void;
igStyleColorsClassic                                  :: (dst : &ImGuiStyle) -> void;
igStyleColorsLight                                    :: (dst : &ImGuiStyle) -> void;
igBegin                                               :: (name : &i8, p_open : &bool, flags : ImGuiWindowFlags) -> bool;
igEnd                                                 :: () -> void;
igBeginChild                                          :: (str_id : &i8, size : ImVec2, border : bool, flags : ImGuiWindowFlags) -> bool;
igBeginChildID                                        :: (id : ImGuiID, size : ImVec2, border : bool, flags : ImGuiWindowFlags) -> bool;
igEndChild                                            :: () -> void;
igIsWindowAppearing                                   :: () -> bool;
igIsWindowCollapsed                                   :: () -> bool;
igIsWindowFocused                                     :: (flags : ImGuiFocusedFlags) -> bool;
igIsWindowHovered                                     :: (flags : ImGuiHoveredFlags) -> bool;
igGetWindowDrawList                                   :: () -> &ImDrawList;
igGetWindowPos                                        :: () -> ImVec2;
igGetWindowSize                                       :: () -> ImVec2;
igGetWindowWidth                                      :: () -> f32;
igGetWindowHeight                                     :: () -> f32;
igSetNextWindowPos                                    :: (pos : ImVec2, cond : ImGuiCond, pivot : ImVec2) -> void;
igSetNextWindowSize                                   :: (size : ImVec2, cond : ImGuiCond) -> void;
igSetNextWindowSizeConstraints                        :: (size_min : ImVec2, size_max : ImVec2, custom_callback : ImGuiSizeCallback, custom_callback_data : &void) -> void;
igSetNextWindowContentSize                            :: (size : ImVec2) -> void;
igSetNextWindowCollapsed                              :: (collapsed : bool, cond : ImGuiCond) -> void;
igSetNextWindowFocus                                  :: () -> void;
igSetNextWindowBgAlpha                                :: (alpha : f32) -> void;
igSetWindowPosVec2                                    :: (pos : ImVec2, cond : ImGuiCond) -> void;
igSetWindowSizeVec2                                   :: (size : ImVec2, cond : ImGuiCond) -> void;
igSetWindowCollapsedBool                              :: (collapsed : bool, cond : ImGuiCond) -> void;
igSetWindowFocus                                      :: () -> void;
igSetWindowFontScale                                  :: (scale : f32) -> void;
igSetWindowPosStr                                     :: (name : &i8, pos : ImVec2, cond : ImGuiCond) -> void;
igSetWindowSizeStr                                    :: (name : &i8, size : ImVec2, cond : ImGuiCond) -> void;
igSetWindowCollapsedStr                               :: (name : &i8, collapsed : bool, cond : ImGuiCond) -> void;
igSetWindowFocusStr                                   :: (name : &i8) -> void;
igGetContentRegionMax                                 :: () -> ImVec2;
igGetContentRegionAvail                               :: () -> ImVec2;
igGetWindowContentRegionMin                           :: () -> ImVec2;
igGetWindowContentRegionMax                           :: () -> ImVec2;
igGetWindowContentRegionWidth                         :: () -> f32;
igGetScrollX                                          :: () -> f32;
igGetScrollY                                          :: () -> f32;
igGetScrollMaxX                                       :: () -> f32;
igGetScrollMaxY                                       :: () -> f32;
igSetScrollX                                          :: (scroll_x : f32) -> void;
igSetScrollY                                          :: (scroll_y : f32) -> void;
igSetScrollHereX                                      :: (center_x_ratio : f32) -> void;
igSetScrollHereY                                      :: (center_y_ratio : f32) -> void;
igSetScrollFromPosX                                   :: (local_x : f32, center_x_ratio : f32) -> void;
igSetScrollFromPosY                                   :: (local_y : f32, center_y_ratio : f32) -> void;
igPushFont                                            :: (font : &ImFont) -> void;
igPopFont                                             :: () -> void;
igPushStyleColorU32                                   :: (idx : ImGuiCol, col : ImU32) -> void;
igPushStyleColor                                      :: (idx : ImGuiCol, col : ImVec4) -> void;
igPopStyleColor                                       :: (count : i32) -> void;
igPushStyleVarFloat                                   :: (idx : ImGuiStyleVar, val : f32) -> void;
igPushStyleVarVec2                                    :: (idx : ImGuiStyleVar, val : ImVec2) -> void;
igPopStyleVar                                         :: (count : i32) -> void;
igGetStyleColorVec4                                   :: (idx : ImGuiCol) -> &ImVec4;
igGetFont                                             :: () -> &ImFont;
igGetFontSize                                         :: () -> f32;
igGetFontTexUvWhitePixel                              :: () -> ImVec2;
igGetColorU32                                         :: (idx : ImGuiCol, alpha_mul : f32) -> ImU32;
igGetColorU32Vec4                                     :: (col : ImVec4) -> ImU32;
igGetColorU32U32                                      :: (col : ImU32) -> ImU32;
igPushItemWidth                                       :: (item_width : f32) -> void;
igPopItemWidth                                        :: () -> void;
igSetNextItemWidth                                    :: (item_width : f32) -> void;
igCalcItemWidth                                       :: () -> f32;
igPushTextWrapPos                                     :: (wrap_local_pos_x : f32) -> void;
igPopTextWrapPos                                      :: () -> void;
igPushAllowKeyboardFocus                              :: (allow_keyboard_focus : bool) -> void;
igPopAllowKeyboardFocus                               :: () -> void;
igPushButtonRepeat                                    :: (repeat : bool) -> void;
igPopButtonRepeat                                     :: () -> void;
igSeparator                                           :: () -> void;
igSameLine                                            :: (offset_from_start_x : f32, spacing : f32) -> void;
igNewLine                                             :: () -> void;
igSpacing                                             :: () -> void;
igDummy                                               :: (size : ImVec2) -> void;
igIndent                                              :: (indent_w : f32) -> void;
igUnindent                                            :: (indent_w : f32) -> void;
igBeginGroup                                          :: () -> void;
igEndGroup                                            :: () -> void;
igGetCursorPos                                        :: () -> ImVec2;
igGetCursorPosX                                       :: () -> f32;
igGetCursorPosY                                       :: () -> f32;
igSetCursorPos                                        :: (local_pos : ImVec2) -> void;
igSetCursorPosX                                       :: (local_x : f32) -> void;
igSetCursorPosY                                       :: (local_y : f32) -> void;
igGetCursorStartPos                                   :: () -> ImVec2;
igGetCursorScreenPos                                  :: () -> ImVec2;
igSetCursorScreenPos                                  :: (pos : ImVec2) -> void;
igAlignTextToFramePadding                             :: () -> void;
igGetTextLineHeight                                   :: () -> f32;
igGetTextLineHeightWithSpacing                        :: () -> f32;
igGetFrameHeight                                      :: () -> f32;
igGetFrameHeightWithSpacing                           :: () -> f32;
igPushIDStr                                           :: (str_id : &i8) -> void;
igPushIDRange                                         :: (str_id_begin : &i8, str_id_end : &i8) -> void;
igPushIDPtr                                           :: (ptr_id : &void) -> void;
igPushIDInt                                           :: (int_id : i32) -> void;
igPopID                                               :: () -> void;
igGetIDStr                                            :: (str_id : &i8) -> ImGuiID;
igGetIDRange                                          :: (str_id_begin : &i8, str_id_end : &i8) -> ImGuiID;
igGetIDPtr                                            :: (ptr_id : &void) -> ImGuiID;
igTextUnformatted                                     :: (text : &i8, text_end : &i8) -> void;
igText                                                :: (fmt : &i8) -> void #varargs;
// igTextV                                            :: (fmt : &i8, args : va_list) -> void;
igTextColored                                         :: (col : ImVec4, fmt : &i8) -> void #varargs;
// igTextColoredV                                     :: (col : ImVec4, fmt : &i8, args : va_list) -> void;
igTextDisabled                                        :: (fmt : &i8) -> void #varargs;
// igTextDisabledV                                    :: (fmt : &i8, args : va_list) -> void;
igTextWrapped                                         :: (fmt : &i8) -> void #varargs;
// igTextWrappedV                                     :: (fmt : &i8, args : va_list) -> void;
igLabelText                                           :: (label : &i8, fmt : &i8) -> void #varargs;
// igLabelTextV                                       :: (label : &i8, fmt : &i8, args : va_list) -> void;
igBulletText                                          :: (fmt : &i8) -> void #varargs;
// igBulletTextV                                      :: (fmt : &i8, args : va_list) -> void;
igButton                                              :: (label : &i8, size : ImVec2) -> bool;
igSmallButton                                         :: (label : &i8) -> bool;
igInvisibleButton                                     :: (str_id : &i8, size : ImVec2) -> bool;
igArrowButton                                         :: (str_id : &i8, dir : ImGuiDir) -> bool;
igImage                                               :: (user_texture_id : ImTextureID, size : ImVec2, uv0 : ImVec2, uv1 : ImVec2, tint_col : ImVec4, border_col : ImVec4) -> void;
igImageButton                                         :: (user_texture_id : ImTextureID, size : ImVec2, uv0 : ImVec2, uv1 : ImVec2, frame_padding : i32, bg_col : ImVec4, tint_col : ImVec4) -> bool;
igCheckbox                                            :: (label : &i8, v: &bool) -> bool;
igCheckboxFlags                                       :: (label : &i8, flags : &u32, flags_value : u32) -> bool;
igRadioButtonBool                                     :: (label : &i8, active : bool) -> bool;
igRadioButtonIntPtr                                   :: (label : &i8, v: &i32, v_button : i32) -> bool;
igProgressBar                                         :: (fraction : f32, size_arg : ImVec2, overlay : &i8) -> void;
igBullet                                              :: () -> void;
igBeginCombo                                          :: (label : &i8, preview_value : &i8, flags : ImGuiComboFlags) -> bool;
igEndCombo                                            :: () -> void;
igCombo                                               :: (label : &i8, current_item : &i32, items : &i8, items_count : i32, popup_max_height_in_items : i32) -> bool;
igComboStr                                            :: (label : &i8, current_item : &i32, items_separated_by_zeros : &i8, popup_max_height_in_items : i32) -> bool;
igComboFnPtr                                          :: (label : &i8, current_item : &i32, items_getter : fn(&void, i32, &&i8) -> bool, data : &void, items_count : i32, popup_max_height_in_items : i32) -> bool;
igDragFloat                                           :: (label : &i8, v: &f32, v_speed : f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igDragFloat2                                          :: (label : &i8, v: [2]f32, v_speed : f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igDragFloat3                                          :: (label : &i8, v: [3]f32, v_speed : f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igDragFloat4                                          :: (label : &i8, v: [4]f32, v_speed : f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igDragFloatRange2                                     :: (label : &i8, v_current_min : &f32, v_current_max : &f32, v_speed : f32, v_min : f32, v_max : f32, format : &i8, format_max : &i8, power : f32) -> bool;
igDragInt                                             :: (label : &i8, v: &i32, v_speed : f32, v_min : i32, v_max : i32, format : &i8) -> bool;
igDragInt2                                            :: (label : &i8, v: [2]i32, v_speed : f32, v_min : i32, v_max : i32, format : &i8) -> bool;
igDragInt3                                            :: (label : &i8, v: [3]i32, v_speed : f32, v_min : i32, v_max : i32, format : &i8) -> bool;
igDragInt4                                            :: (label : &i8, v: [4]i32, v_speed : f32, v_min : i32, v_max : i32, format : &i8) -> bool;
igDragIntRange2                                       :: (label : &i8, v_current_min : &i32, v_current_max : &i32, v_speed : f32, v_min : i32, v_max : i32, format : &i8, format_max : &i8) -> bool;
igDragScalar                                          :: (label : &i8, data_type : ImGuiDataType, v: &void, v_speed : f32, v_min : &void, v_max : &void, format : &i8, power : f32) -> bool;
igDragScalarN                                         :: (label : &i8, data_type : ImGuiDataType, v: &void, components : i32, v_speed : f32, v_min : &void, v_max : &void, format : &i8, power : f32) -> bool;
igSliderFloat                                         :: (label : &i8, v: &f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igSliderFloat2                                        :: (label : &i8, v: [2]f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igSliderFloat3                                        :: (label : &i8, v: [3]f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igSliderFloat4                                        :: (label : &i8, v: [4]f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igSliderAngle                                         :: (label : &i8, v_rad : &f32, v_degrees_min : f32, v_degrees_max : f32, format : &i8) -> bool;
igSliderInt                                           :: (label : &i8, v: &i32, v_min : i32, v_max : i32, format : &i8) -> bool;
igSliderInt2                                          :: (label : &i8, v: [2]i32, v_min : i32, v_max : i32, format : &i8) -> bool;
igSliderInt3                                          :: (label : &i8, v: [3]i32, v_min : i32, v_max : i32, format : &i8) -> bool;
igSliderInt4                                          :: (label : &i8, v: [4]i32, v_min : i32, v_max : i32, format : &i8) -> bool;
igSliderScalar                                        :: (label : &i8, data_type : ImGuiDataType, v: &void, v_min : &void, v_max : &void, format : &i8, power : f32) -> bool;
igSliderScalarN                                       :: (label : &i8, data_type : ImGuiDataType, v: &void, components : i32, v_min : &void, v_max : &void, format : &i8, power : f32) -> bool;
igVSliderFloat                                        :: (label : &i8, size : ImVec2, v: &f32, v_min : f32, v_max : f32, format : &i8, power : f32) -> bool;
igVSliderInt                                          :: (label : &i8, size : ImVec2, v: &i32, v_min : i32, v_max : i32, format : &i8) -> bool;
igVSliderScalar                                       :: (label : &i8, size : ImVec2, data_type : ImGuiDataType, v: &void, v_min : &void, v_max : &void, format : &i8, power : f32) -> bool;
igInputText                                           :: (label : &i8, buf : &i8, buf_size : u64, flags : ImGuiInputTextFlags, callback : ImGuiInputTextCallback, user_data : &void) -> bool;
igInputTextMultiline                                  :: (label : &i8, buf : &i8, buf_size : u64, size : ImVec2, flags : ImGuiInputTextFlags, callback : ImGuiInputTextCallback, user_data : &void) -> bool;
igInputTextWithHint                                   :: (label : &i8, hint : &i8, buf : &i8, buf_size : u64, flags : ImGuiInputTextFlags, callback : ImGuiInputTextCallback, user_data : &void) -> bool;
igInputFloat                                          :: (label : &i8, v: &f32, step : f32, step_fast : f32, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputFloat2                                         :: (label : &i8, v: [2]f32, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputFloat3                                         :: (label : &i8, v: [3]f32, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputFloat4                                         :: (label : &i8, v: [4]f32, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputInt                                            :: (label : &i8, v: &i32, step : i32, step_fast : i32, flags : ImGuiInputTextFlags) -> bool;
igInputInt2                                           :: (label : &i8, v: [2]i32, flags : ImGuiInputTextFlags) -> bool;
igInputInt3                                           :: (label : &i8, v: [3]i32, flags : ImGuiInputTextFlags) -> bool;
igInputInt4                                           :: (label : &i8, v: [4]i32, flags : ImGuiInputTextFlags) -> bool;
igInputDouble                                         :: (label : &i8, v: &f64, step : f64, step_fast : f64, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputScalar                                         :: (label : &i8, data_type : ImGuiDataType, v: &void, step : &void, step_fast : &void, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igInputScalarN                                        :: (label : &i8, data_type : ImGuiDataType, v: &void, components : i32, step : &void, step_fast : &void, format : &i8, flags : ImGuiInputTextFlags) -> bool;
igColorEdit3                                          :: (label : &i8, col : [3]f32, flags : ImGuiColorEditFlags) -> bool;
igColorEdit4                                          :: (label : &i8, col : [4]f32, flags : ImGuiColorEditFlags) -> bool;
igColorPicker3                                        :: (label : &i8, col : [3]f32, flags : ImGuiColorEditFlags) -> bool;
igColorPicker4                                        :: (label : &i8, col : [4]f32, flags : ImGuiColorEditFlags, ref_col : &f32) -> bool;
igColorButton                                         :: (desc_id : &i8, col : ImVec4, flags : ImGuiColorEditFlags, size : ImVec2) -> bool;
igSetColorEditOptions                                 :: (flags : ImGuiColorEditFlags) -> void;
igTreeNodeStr                                         :: (label : &i8) -> bool;
igTreeNodeStrStr                                      :: (str_id : &i8, fmt : &i8) -> bool #varargs;
igTreeNodePtr                                         :: (ptr_id : &void, fmt : &i8) -> bool #varargs;
// igTreeNodeVStr                                     :: (str_id : &i8, fmt : &i8, args : va_list) -> bool;
// igTreeNodeVPtr                                     :: (ptr_id : &void, fmt : &i8, args : va_list) -> bool;
igTreeNodeExStr                                       :: (label : &i8, flags : ImGuiTreeNodeFlags) -> bool;
igTreeNodeExStrStr                                    :: (str_id : &i8, flags : ImGuiTreeNodeFlags, fmt : &i8) -> bool #varargs;
igTreeNodeExPtr                                       :: (ptr_id : &void, flags : ImGuiTreeNodeFlags, fmt : &i8) -> bool #varargs;
// igTreeNodeExVStr                                   :: (str_id : &i8, flags : ImGuiTreeNodeFlags, fmt : &i8, args : va_list) -> bool;
// igTreeNodeExVPtr                                   :: (ptr_id : &void, flags : ImGuiTreeNodeFlags, fmt : &i8, args : va_list) -> bool;
igTreePushStr                                         :: (str_id : &i8) -> void;
igTreePushPtr                                         :: (ptr_id : &void) -> void;
igTreePop                                             :: () -> void;
igGetTreeNodeToLabelSpacing                           :: () -> f32;
igCollapsingHeader                                    :: (label : &i8, flags : ImGuiTreeNodeFlags) -> bool;
igCollapsingHeaderBoolPtr                             :: (label : &i8, p_open : &bool, flags : ImGuiTreeNodeFlags) -> bool;
igSetNextItemOpen                                     :: (is_open : bool, cond : ImGuiCond) -> void;
igSelectable                                          :: (label : &i8, selected : bool, flags : ImGuiSelectableFlags, size : ImVec2) -> bool;
igSelectableBoolPtr                                   :: (label : &i8, p_selected : &bool, flags : ImGuiSelectableFlags, size : ImVec2) -> bool;
igListBoxStr_arr                                      :: (label : &i8, current_item : &i32, items : &i8, items_count : i32, height_in_items : i32) -> bool;
igListBoxFnPtr                                        :: (label : &i8, current_item : &i32, items_getter : fn(&void, i32, &&i8) -> bool, data : &void, items_count : i32, height_in_items : i32) -> bool;
igListBoxHeaderVec2                                   :: (label : &i8, size : ImVec2) -> bool;
igListBoxHeaderInt                                    :: (label : &i8, items_count : i32, height_in_items : i32) -> bool;
igListBoxFooter                                       :: () -> void;
igPlotLines                                           :: (label : &i8, values : &f32, values_count : i32, values_offset : i32, overlay_text : &i8, scale_min : f32, scale_max : f32, graph_size : ImVec2, stride : i32) -> void;
igPlotLinesFnPtr                                      :: (label : &i8, values_getter : fn(&void, i32) -> f32, data : &void, values_count : i32, values_offset : i32, overlay_text : &i8, scale_min : f32, scale_max : f32, graph_size : ImVec2) -> void;
igPlotHistogramFloatPtr                               :: (label : &i8, values : &f32, values_count : i32, values_offset : i32, overlay_text : &i8, scale_min : f32, scale_max : f32, graph_size : ImVec2, stride : i32) -> void;
igPlotHistogramFnPtr                                  :: (label : &i8, values_getter : fn(&void, i32) -> f32, data : &void, values_count : i32, values_offset : i32, overlay_text : &i8, scale_min : f32, scale_max : f32, graph_size : ImVec2) -> void;
igValueBool                                           :: (prefix : &i8, b: bool) -> void;
igValueInt                                            :: (prefix : &i8, v: i32) -> void;
igValueUint                                           :: (prefix : &i8, v: u32) -> void;
igValueFloat                                          :: (prefix : &i8, v: f32, float_format : &i8) -> void;
igBeginMainMenuBar                                    :: () -> bool;
igEndMainMenuBar                                      :: () -> void;
igBeginMenuBar                                        :: () -> bool;
igEndMenuBar                                          :: () -> void;
igBeginMenu                                           :: (label : &i8, enabled : bool) -> bool;
igEndMenu                                             :: () -> void;
igMenuItemBool                                        :: (label : &i8, shortcut : &i8, selected : bool, enabled : bool) -> bool;
igMenuItemBoolPtr                                     :: (label : &i8, shortcut : &i8, p_selected : &bool, enabled : bool) -> bool;
igBeginTooltip                                        :: () -> void;
igEndTooltip                                          :: () -> void;
igSetTooltip                                          :: (fmt : &i8) -> void #varargs;
// igSetTooltipV                                      :: (fmt : &i8, args : va_list) -> void;
igOpenPopup                                           :: (str_id : &i8) -> void;
igBeginPopup                                          :: (str_id : &i8, flags : ImGuiWindowFlags) -> bool;
igBeginPopupContextItem                               :: (str_id : &i8, mouse_button : i32) -> bool;
igBeginPopupContextWindow                             :: (str_id : &i8, mouse_button : i32, also_over_items : bool) -> bool;
igBeginPopupContextVoid                               :: (str_id : &i8, mouse_button : i32) -> bool;
igBeginPopupModal                                     :: (name : &i8, p_open : &bool, flags : ImGuiWindowFlags) -> bool;
igEndPopup                                            :: () -> void;
igOpenPopupOnItemClick                                :: (str_id : &i8, mouse_button : i32) -> bool;
igIsPopupOpen                                         :: (str_id : &i8) -> bool;
igCloseCurrentPopup                                   :: () -> void;
igColumns                                             :: (count : i32, id : &i8, border : bool) -> void;
igNextColumn                                          :: () -> void;
igGetColumnIndex                                      :: () -> i32;
igGetColumnWidth                                      :: (column_index : i32) -> f32;
igSetColumnWidth                                      :: (column_index : i32, width : f32) -> void;
igGetColumnOffset                                     :: (column_index : i32) -> f32;
igSetColumnOffset                                     :: (column_index : i32, offset_x : f32) -> void;
igGetColumnsCount                                     :: () -> i32;
igBeginTabBar                                         :: (str_id : &i8, flags : ImGuiTabBarFlags) -> bool;
igEndTabBar                                           :: () -> void;
igBeginTabItem                                        :: (label : &i8, p_open : &bool, flags : ImGuiTabItemFlags) -> bool;
igEndTabItem                                          :: () -> void;
igSetTabItemClosed                                    :: (tab_or_docked_window_label : &i8) -> void;
igLogToTTY                                            :: (auto_open_depth : i32) -> void;
igLogToFile                                           :: (auto_open_depth : i32, filename : &i8) -> void;
igLogToClipboard                                      :: (auto_open_depth : i32) -> void;
igLogFinish                                           :: () -> void;
igLogButtons                                          :: () -> void;
igBeginDragDropSource                                 :: (flags : ImGuiDragDropFlags) -> bool;
igSetDragDropPayload                                  :: (type : &i8, data : &void, sz : u64, cond : ImGuiCond) -> bool;
igEndDragDropSource                                   :: () -> void;
igBeginDragDropTarget                                 :: () -> bool;
igAcceptDragDropPayload                               :: (type : &i8, flags : ImGuiDragDropFlags) -> &ImGuiPayload;
igEndDragDropTarget                                   :: () -> void;
igGetDragDropPayload                                  :: () -> &ImGuiPayload;
igPushClipRect                                        :: (clip_rect_min : ImVec2, clip_rect_max : ImVec2, intersect_with_current_clip_rect : bool) -> void;
igPopClipRect                                         :: () -> void;
igSetItemDefaultFocus                                 :: () -> void;
igSetKeyboardFocusHere                                :: (offset : i32) -> void;
igIsItemHovered                                       :: (flags : ImGuiHoveredFlags) -> bool;
igIsItemActive                                        :: () -> bool;
igIsItemFocused                                       :: () -> bool;
igIsItemClicked                                       :: (mouse_button : i32) -> bool;
igIsItemVisible                                       :: () -> bool;
igIsItemEdited                                        :: () -> bool;
igIsItemActivated                                     :: () -> bool;
igIsItemDeactivated                                   :: () -> bool;
igIsItemDeactivatedAfterEdit                          :: () -> bool;
igIsAnyItemHovered                                    :: () -> bool;
igIsAnyItemActive                                     :: () -> bool;
igIsAnyItemFocused                                    :: () -> bool;
igGetItemRectMin                                      :: () -> ImVec2;
igGetItemRectMax                                      :: () -> ImVec2;
igGetItemRectSize                                     :: () -> ImVec2;
igSetItemAllowOverlap                                 :: () -> void;
igIsRectVisible                                       :: (size : ImVec2) -> bool;
igIsRectVisibleVec2                                   :: (rect_min : ImVec2, rect_max : ImVec2) -> bool;
igGetTime                                             :: () -> f64;
igGetFrameCount                                       :: () -> i32;
igGetBackgroundDrawList                               :: () -> &ImDrawList;
igGetForegroundDrawList                               :: () -> &ImDrawList;
igGetDrawListSharedData                               :: () -> &ImDrawListSharedData;
igGetStyleColorName                                   :: (idx : ImGuiCol) -> &i8;
igSetStateStorage                                     :: (storage : &ImGuiStorage) -> void;
igGetStateStorage                                     :: () -> &ImGuiStorage;
igCalcTextSize                                        :: (text : &i8, text_end : &i8, hide_text_after_double_hash : bool, wrap_width : f32) -> ImVec2;
igCalcListClipping                                    :: (items_count : i32, items_height : f32, out_items_display_start : &i32, out_items_display_end : &i32) -> void;
igBeginChildFrame                                     :: (id : ImGuiID, size : ImVec2, flags : ImGuiWindowFlags) -> bool;
igEndChildFrame                                       :: () -> void;
igColorConvertU32ToFloat4                             :: (in : ImU32) -> ImVec4;
igColorConvertFloat4ToU32                             :: (in : ImVec4) -> ImU32;
igGetKeyIndex                                         :: (imgui_key : ImGuiKey) -> i32;
igIsKeyDown                                           :: (user_key_index : i32) -> bool;
igIsKeyPressed                                        :: (user_key_index : i32, repeat : bool) -> bool;
igIsKeyReleased                                       :: (user_key_index : i32) -> bool;
igGetKeyPressedAmount                                 :: (key_index : i32, repeat_delay : f32, rate : f32) -> i32;
igIsMouseDown                                         :: (button : i32) -> bool;
igIsAnyMouseDown                                      :: () -> bool;
igIsMouseClicked                                      :: (button : i32, repeat : bool) -> bool;
igIsMouseDoubleClicked                                :: (button : i32) -> bool;
igIsMouseReleased                                     :: (button : i32) -> bool;
igIsMouseDragging                                     :: (button : i32, lock_threshold : f32) -> bool;
igIsMouseHoveringRect                                 :: (r_min : ImVec2, r_max : ImVec2, clip : bool) -> bool;
igIsMousePosValid                                     :: (mouse_pos : &ImVec2) -> bool;
igGetMousePos                                         :: () -> ImVec2;
igGetMousePosOnOpeningCurrentPopup                    :: () -> ImVec2;
igGetMouseDragDelta                                   :: (button : i32, lock_threshold : f32) -> ImVec2;
igResetMouseDragDelta                                 :: (button : i32) -> void;
igGetMouseCursor                                      :: () -> ImGuiMouseCursor;
igSetMouseCursor                                      :: (type : ImGuiMouseCursor) -> void;
igCaptureKeyboardFromApp                              :: (want_capture_keyboard_value : bool) -> void;
igCaptureMouseFromApp                                 :: (want_capture_mouse_value : bool) -> void;
igGetClipboardText                                    :: () -> &i8;
igSetClipboardText                                    :: (text : &i8) -> void;
igLoadIniSettingsFromDisk                             :: (ini_filename : &i8) -> void;
igLoadIniSettingsFromMemory                           :: (ini_data : &i8, ini_size : u64) -> void;
igSaveIniSettingsToDisk                               :: (ini_filename : &i8) -> void;
igSaveIniSettingsToMemory                             :: (out_ini_size : &u64) -> &i8;
igSetAllocatorFunctions                               :: (alloc_func : fn(u64, &void) -> &void, free_func : fn(&void, &void) -> void, user_data : &void) -> void;
igMemAlloc                                            :: (size : u64) -> &void;
igMemFree                                             :: (ptr : &void) -> void;
ImGuiStyle_ImGuiStyle                                 :: () -> &ImGuiStyle;
ImGuiStyle_destroy                                    :: (self : &ImGuiStyle) -> void;
ImGuiStyle_ScaleAllSizes                              :: (self : &ImGuiStyle, scale_factor : f32) -> void;
ImGuiIO_AddInputCharacter                             :: (self : &ImGuiIO, c: u32) -> void;
ImGuiIO_AddInputCharactersUTF8                        :: (self : &ImGuiIO, str : &i8) -> void;
ImGuiIO_ClearInputCharacters                          :: (self : &ImGuiIO) -> void;
ImGuiIO_ImGuiIO                                       :: () -> &ImGuiIO;
ImGuiIO_destroy                                       :: (self : &ImGuiIO) -> void;
ImGuiInputTextCallbackData_ImGuiInputTextCallbackData :: () -> &ImGuiInputTextCallbackData;
ImGuiInputTextCallbackData_destroy                    :: (self : &ImGuiInputTextCallbackData) -> void;
ImGuiInputTextCallbackData_DeleteChars                :: (self : &ImGuiInputTextCallbackData, pos : i32, bytes_count : i32) -> void;
ImGuiInputTextCallbackData_InsertChars                :: (self : &ImGuiInputTextCallbackData, pos : i32, text : &i8, text_end : &i8) -> void;
ImGuiInputTextCallbackData_HasSelection               :: (self : &ImGuiInputTextCallbackData) -> bool;
ImGuiPayload_ImGuiPayload                             :: () -> &ImGuiPayload;
ImGuiPayload_destroy                                  :: (self : &ImGuiPayload) -> void;
ImGuiPayload_Clear                                    :: (self : &ImGuiPayload) -> void;
ImGuiPayload_IsDataType                               :: (self : &ImGuiPayload, type : &i8) -> bool;
ImGuiPayload_IsPreview                                :: (self : &ImGuiPayload) -> bool;
ImGuiPayload_IsDelivery                               :: (self : &ImGuiPayload) -> bool;
ImGuiOnceUponAFrame_ImGuiOnceUponAFrame               :: () -> &ImGuiOnceUponAFrame;
ImGuiOnceUponAFrame_destroy                           :: (self : &ImGuiOnceUponAFrame) -> void;
ImGuiTextFilter_ImGuiTextFilter                       :: (default_filter : &i8) -> &ImGuiTextFilter;
ImGuiTextFilter_destroy                               :: (self : &ImGuiTextFilter) -> void;
ImGuiTextFilter_Draw                                  :: (self : &ImGuiTextFilter, label : &i8, width : f32) -> bool;
ImGuiTextFilter_PassFilter                            :: (self : &ImGuiTextFilter, text : &i8, text_end : &i8) -> bool;
ImGuiTextFilter_Build                                 :: (self : &ImGuiTextFilter) -> void;
ImGuiTextFilter_Clear                                 :: (self : &ImGuiTextFilter) -> void;
ImGuiTextFilter_IsActive                              :: (self : &ImGuiTextFilter) -> bool;
ImGuiTextRange_ImGuiTextRange                         :: () -> &ImGuiTextRange;
ImGuiTextRange_destroy                                :: (self : &ImGuiTextRange) -> void;
ImGuiTextRange_ImGuiTextRangeStr                      :: (_b : &i8, _e : &i8) -> &ImGuiTextRange;
ImGuiTextRange_empty                                  :: (self : &ImGuiTextRange) -> bool;
ImGuiTextRange_split                                  :: (self : &ImGuiTextRange, separator : i8, out : &ImVector_ImGuiTextRange) -> void;
ImGuiTextBuffer_ImGuiTextBuffer                       :: () -> &ImGuiTextBuffer;
ImGuiTextBuffer_destroy                               :: (self : &ImGuiTextBuffer) -> void;
ImGuiTextBuffer_begin                                 :: (self : &ImGuiTextBuffer) -> &i8;
ImGuiTextBuffer_end                                   :: (self : &ImGuiTextBuffer) -> &i8;
ImGuiTextBuffer_size                                  :: (self : &ImGuiTextBuffer) -> i32;
ImGuiTextBuffer_empty                                 :: (self : &ImGuiTextBuffer) -> bool;
ImGuiTextBuffer_clear                                 :: (self : &ImGuiTextBuffer) -> void;
ImGuiTextBuffer_reserve                               :: (self : &ImGuiTextBuffer, capacity : i32) -> void;
ImGuiTextBuffer_c_str                                 :: (self : &ImGuiTextBuffer) -> &i8;
ImGuiTextBuffer_append                                :: (self : &ImGuiTextBuffer, str : &i8, str_end : &i8) -> void;
// ImGuiTextBuffer_appendfv                           :: (self : &ImGuiTextBuffer, fmt : &i8, args : va_list) -> void;
ImGuiStoragePair_ImGuiStoragePairInt                  :: (_key : ImGuiID, _val_i : i32) -> &ImGuiStoragePair;
ImGuiStoragePair_destroy                              :: (self : &ImGuiStoragePair) -> void;
ImGuiStoragePair_ImGuiStoragePairFloat                :: (_key : ImGuiID, _val_f : f32) -> &ImGuiStoragePair;
ImGuiStoragePair_ImGuiStoragePairPtr                  :: (_key : ImGuiID, _val_p : &void) -> &ImGuiStoragePair;
ImGuiStorage_Clear                                    :: (self : &ImGuiStorage) -> void;
ImGuiStorage_GetInt                                   :: (self : &ImGuiStorage, key : ImGuiID, default_val : i32) -> i32;
ImGuiStorage_SetInt                                   :: (self : &ImGuiStorage, key : ImGuiID, val : i32) -> void;
ImGuiStorage_GetBool                                  :: (self : &ImGuiStorage, key : ImGuiID, default_val : bool) -> bool;
ImGuiStorage_SetBool                                  :: (self : &ImGuiStorage, key : ImGuiID, val : bool) -> void;
ImGuiStorage_GetFloat                                 :: (self : &ImGuiStorage, key : ImGuiID, default_val : f32) -> f32;
ImGuiStorage_SetFloat                                 :: (self : &ImGuiStorage, key : ImGuiID, val : f32) -> void;
ImGuiStorage_GetVoidPtr                               :: (self : &ImGuiStorage, key : ImGuiID) -> &void;
ImGuiStorage_SetVoidPtr                               :: (self : &ImGuiStorage, key : ImGuiID, val : &void) -> void;
ImGuiStorage_GetIntRef                                :: (self : &ImGuiStorage, key : ImGuiID, default_val : i32) -> &i32;
ImGuiStorage_GetBoolRef                               :: (self : &ImGuiStorage, key : ImGuiID, default_val : bool) -> &bool;
ImGuiStorage_GetFloatRef                              :: (self : &ImGuiStorage, key : ImGuiID, default_val : f32) -> &f32;
ImGuiStorage_GetVoidPtrRef                            :: (self : &ImGuiStorage, key : ImGuiID, default_val : &void) -> &&void;
ImGuiStorage_SetAllInt                                :: (self : &ImGuiStorage, val : i32) -> void;
ImGuiStorage_BuildSortByKey                           :: (self : &ImGuiStorage) -> void;
ImGuiListClipper_ImGuiListClipper                     :: (items_count : i32, items_height : f32) -> &ImGuiListClipper;
ImGuiListClipper_destroy                              :: (self : &ImGuiListClipper) -> void;
ImGuiListClipper_Step                                 :: (self : &ImGuiListClipper) -> bool;
ImGuiListClipper_Begin                                :: (self : &ImGuiListClipper, items_count : i32, items_height : f32) -> void;
ImGuiListClipper_End                                  :: (self : &ImGuiListClipper) -> void;
ImColor_ImColor                                       :: () -> &ImColor;
ImColor_destroy                                       :: (self : &ImColor) -> void;
ImColor_ImColorInt                                    :: (r: i32, g: i32, b: i32, a: i32) -> &ImColor;
ImColor_ImColorU32                                    :: (rgba : ImU32) -> &ImColor;
ImColor_ImColorFloat                                  :: (r: f32, g: f32, b: f32, a: f32) -> &ImColor;
ImColor_ImColorVec4                                   :: (col : ImVec4) -> &ImColor;
ImColor_SetHSV                                        :: (self : &ImColor, h: f32, s: f32, v: f32, a: f32) -> void;
ImColor_HSV                                           :: (self : &ImColor, h: f32, s: f32, v: f32, a: f32) -> ImColor;
ImDrawCmd_ImDrawCmd                                   :: () -> &ImDrawCmd;
ImDrawCmd_destroy                                     :: (self : &ImDrawCmd) -> void;
ImDrawListSplitter_ImDrawListSplitter                 :: () -> &ImDrawListSplitter;
ImDrawListSplitter_destroy                            :: (self : &ImDrawListSplitter) -> void;
ImDrawListSplitter_Clear                              :: (self : &ImDrawListSplitter) -> void;
ImDrawListSplitter_ClearFreeMemory                    :: (self : &ImDrawListSplitter) -> void;
ImDrawListSplitter_Split                              :: (self : &ImDrawListSplitter, draw_list : &ImDrawList, count : i32) -> void;
ImDrawListSplitter_Merge                              :: (self : &ImDrawListSplitter, draw_list : &ImDrawList) -> void;
ImDrawListSplitter_SetCurrentChannel                  :: (self : &ImDrawListSplitter, draw_list : &ImDrawList, channel_idx : i32) -> void;
ImDrawList_ImDrawList                                 :: (shared_data : &ImDrawListSharedData) -> &ImDrawList;
ImDrawList_destroy                                    :: (self : &ImDrawList) -> void;
ImDrawList_PushClipRect                               :: (self : &ImDrawList, clip_rect_min : ImVec2, clip_rect_max : ImVec2, intersect_with_current_clip_rect : bool) -> void;
ImDrawList_PushClipRectFullScreen                     :: (self : &ImDrawList) -> void;
ImDrawList_PopClipRect                                :: (self : &ImDrawList) -> void;
ImDrawList_PushTextureID                              :: (self : &ImDrawList, texture_id : ImTextureID) -> void;
ImDrawList_PopTextureID                               :: (self : &ImDrawList) -> void;
ImDrawList_GetClipRectMin                             :: (self : &ImDrawList) -> ImVec2;
ImDrawList_GetClipRectMax                             :: (self : &ImDrawList) -> ImVec2;
ImDrawList_AddLine                                    :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, col : ImU32, thickness : f32) -> void;
ImDrawList_AddRect                                    :: (self : &ImDrawList, p_min : ImVec2, p_max : ImVec2, col : ImU32, rounding : f32, rounding_corners : ImDrawCornerFlags, thickness : f32) -> void;
ImDrawList_AddRectFilled                              :: (self : &ImDrawList, p_min : ImVec2, p_max : ImVec2, col : ImU32, rounding : f32, rounding_corners : ImDrawCornerFlags) -> void;
ImDrawList_AddRectFilledMultiColor                    :: (self : &ImDrawList, p_min : ImVec2, p_max : ImVec2, col_upr_left : ImU32, col_upr_right : ImU32, col_bot_right : ImU32, col_bot_left : ImU32) -> void;
ImDrawList_AddQuad                                    :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, p4 : ImVec2, col : ImU32, thickness : f32) -> void;
ImDrawList_AddQuadFilled                              :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, p4 : ImVec2, col : ImU32) -> void;
ImDrawList_AddTriangle                                :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, col : ImU32, thickness : f32) -> void;
ImDrawList_AddTriangleFilled                          :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, col : ImU32) -> void;
ImDrawList_AddCircle                                  :: (self : &ImDrawList, center : ImVec2, radius : f32, col : ImU32, num_segments : i32, thickness : f32) -> void;
ImDrawList_AddCircleFilled                            :: (self : &ImDrawList, center : ImVec2, radius : f32, col : ImU32, num_segments : i32) -> void;
ImDrawList_AddText                                    :: (self : &ImDrawList, pos : ImVec2, col : ImU32, text_begin : &i8, text_end : &i8) -> void;
ImDrawList_AddTextFontPtr                             :: (self : &ImDrawList, font : &ImFont, font_size : f32, pos : ImVec2, col : ImU32, text_begin : &i8, text_end : &i8, wrap_width : f32, cpu_fine_clip_rect : &ImVec4) -> void;
ImDrawList_AddPolyline                                :: (self : &ImDrawList, points : &ImVec2, num_points : i32, col : ImU32, closed : bool, thickness : f32) -> void;
ImDrawList_AddConvexPolyFilled                        :: (self : &ImDrawList, points : &ImVec2, num_points : i32, col : ImU32) -> void;
ImDrawList_AddBezierCurve                             :: (self : &ImDrawList, pos0 : ImVec2, cp0 : ImVec2, cp1 : ImVec2, pos1 : ImVec2, col : ImU32, thickness : f32, num_segments : i32) -> void;
ImDrawList_AddImage                                   :: (self : &ImDrawList, user_texture_id : ImTextureID, p_min : ImVec2, p_max : ImVec2, uv_min : ImVec2, uv_max : ImVec2, col : ImU32) -> void;
ImDrawList_AddImageQuad                               :: (self : &ImDrawList, user_texture_id : ImTextureID, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, p4 : ImVec2, uv1 : ImVec2, uv2 : ImVec2, uv3 : ImVec2, uv4 : ImVec2, col : ImU32) -> void;
ImDrawList_AddImageRounded                            :: (self : &ImDrawList, user_texture_id : ImTextureID, p_min : ImVec2, p_max : ImVec2, uv_min : ImVec2, uv_max : ImVec2, col : ImU32, rounding : f32, rounding_corners : ImDrawCornerFlags) -> void;
ImDrawList_PathClear                                  :: (self : &ImDrawList) -> void;
ImDrawList_PathLineTo                                 :: (self : &ImDrawList, pos : ImVec2) -> void;
ImDrawList_PathLineToMergeDuplicate                   :: (self : &ImDrawList, pos : ImVec2) -> void;
ImDrawList_PathFillConvex                             :: (self : &ImDrawList, col : ImU32) -> void;
ImDrawList_PathStroke                                 :: (self : &ImDrawList, col : ImU32, closed : bool, thickness : f32) -> void;
ImDrawList_PathArcTo                                  :: (self : &ImDrawList, center : ImVec2, radius : f32, a_min : f32, a_max : f32, num_segments : i32) -> void;
ImDrawList_PathArcToFast                              :: (self : &ImDrawList, center : ImVec2, radius : f32, a_min_of_12 : i32, a_max_of_12 : i32) -> void;
ImDrawList_PathBezierCurveTo                          :: (self : &ImDrawList, p1 : ImVec2, p2 : ImVec2, p3 : ImVec2, num_segments : i32) -> void;
ImDrawList_PathRect                                   :: (self : &ImDrawList, rect_min : ImVec2, rect_max : ImVec2, rounding : f32, rounding_corners : ImDrawCornerFlags) -> void;
ImDrawList_AddCallback                                :: (self : &ImDrawList, callback : ImDrawCallback, callback_data : &void) -> void;
ImDrawList_AddDrawCmd                                 :: (self : &ImDrawList) -> void;
ImDrawList_CloneOutput                                :: (self : &ImDrawList) -> &ImDrawList;
ImDrawList_ChannelsSplit                              :: (self : &ImDrawList, count : i32) -> void;
ImDrawList_ChannelsMerge                              :: (self : &ImDrawList) -> void;
ImDrawList_ChannelsSetCurrent                         :: (self : &ImDrawList, n: i32) -> void;
ImDrawList_Clear                                      :: (self : &ImDrawList) -> void;
ImDrawList_ClearFreeMemory                            :: (self : &ImDrawList) -> void;
ImDrawList_PrimReserve                                :: (self : &ImDrawList, idx_count : i32, vtx_count : i32) -> void;
ImDrawList_PrimRect                                   :: (self : &ImDrawList, a: ImVec2, b: ImVec2, col : ImU32) -> void;
ImDrawList_PrimRectUV                                 :: (self : &ImDrawList, a: ImVec2, b: ImVec2, uv_a : ImVec2, uv_b : ImVec2, col : ImU32) -> void;
ImDrawList_PrimQuadUV                                 :: (self : &ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a : ImVec2, uv_b : ImVec2, uv_c : ImVec2, uv_d : ImVec2, col : ImU32) -> void;
ImDrawList_PrimWriteVtx                               :: (self : &ImDrawList, pos : ImVec2, uv : ImVec2, col : ImU32) -> void;
ImDrawList_PrimWriteIdx                               :: (self : &ImDrawList, idx : ImDrawIdx) -> void;
ImDrawList_PrimVtx                                    :: (self : &ImDrawList, pos : ImVec2, uv : ImVec2, col : ImU32) -> void;
ImDrawList_UpdateClipRect                             :: (self : &ImDrawList) -> void;
ImDrawList_UpdateTextureID                            :: (self : &ImDrawList) -> void;
ImDrawData_ImDrawData                                 :: () -> &ImDrawData;
ImDrawData_destroy                                    :: (self : &ImDrawData) -> void;
ImDrawData_Clear                                      :: (self : &ImDrawData) -> void;
ImDrawData_DeIndexAllBuffers                          :: (self : &ImDrawData) -> void;
ImDrawData_ScaleClipRects                             :: (self : &ImDrawData, fb_scale : ImVec2) -> void;
ImFontConfig_ImFontConfig                             :: () -> &ImFontConfig;
ImFontConfig_destroy                                  :: (self : &ImFontConfig) -> void;
ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder     :: () -> &ImFontGlyphRangesBuilder;
ImFontGlyphRangesBuilder_destroy                      :: (self : &ImFontGlyphRangesBuilder) -> void;
ImFontGlyphRangesBuilder_Clear                        :: (self : &ImFontGlyphRangesBuilder) -> void;
ImFontGlyphRangesBuilder_GetBit                       :: (self : &ImFontGlyphRangesBuilder, n: i32) -> bool;
ImFontGlyphRangesBuilder_SetBit                       :: (self : &ImFontGlyphRangesBuilder, n: i32) -> void;
ImFontGlyphRangesBuilder_AddChar                      :: (self : &ImFontGlyphRangesBuilder, c: ImWchar) -> void;
ImFontGlyphRangesBuilder_AddText                      :: (self : &ImFontGlyphRangesBuilder, text : &i8, text_end : &i8) -> void;
ImFontGlyphRangesBuilder_AddRanges                    :: (self : &ImFontGlyphRangesBuilder, ranges : &ImWchar) -> void;
ImFontGlyphRangesBuilder_BuildRanges                  :: (self : &ImFontGlyphRangesBuilder, out_ranges : &ImVector_ImWchar) -> void;
ImFontAtlasCustomRect_ImFontAtlasCustomRect           :: () -> &ImFontAtlasCustomRect;
ImFontAtlasCustomRect_destroy                         :: (self : &ImFontAtlasCustomRect) -> void;
ImFontAtlasCustomRect_IsPacked                        :: (self : &ImFontAtlasCustomRect) -> bool;
ImFontAtlas_ImFontAtlas                               :: () -> &ImFontAtlas;
ImFontAtlas_destroy                                   :: (self : &ImFontAtlas) -> void;
ImFontAtlas_AddFont                                   :: (self : &ImFontAtlas, font_cfg : &ImFontConfig) -> &ImFont;
ImFontAtlas_AddFontDefault                            :: (self : &ImFontAtlas, font_cfg : &ImFontConfig) -> &ImFont;
ImFontAtlas_AddFontFromFileTTF                        :: (self : &ImFontAtlas, filename : &i8, size_pixels : f32, font_cfg : &ImFontConfig, glyph_ranges : &ImWchar) -> &ImFont;
ImFontAtlas_AddFontFromMemoryTTF                      :: (self : &ImFontAtlas, font_data : &void, font_size : i32, size_pixels : f32, font_cfg : &ImFontConfig, glyph_ranges : &ImWchar) -> &ImFont;
ImFontAtlas_AddFontFromMemoryCompressedTTF            :: (self : &ImFontAtlas, compressed_font_data : &void, compressed_font_size : i32, size_pixels : f32, font_cfg : &ImFontConfig, glyph_ranges : &ImWchar) -> &ImFont;
ImFontAtlas_AddFontFromMemoryCompressedBase85TTF      :: (self : &ImFontAtlas, compressed_font_data_base85 : &i8, size_pixels : f32, font_cfg : &ImFontConfig, glyph_ranges : &ImWchar) -> &ImFont;
ImFontAtlas_ClearInputData                            :: (self : &ImFontAtlas) -> void;
ImFontAtlas_ClearTexData                              :: (self : &ImFontAtlas) -> void;
ImFontAtlas_ClearFonts                                :: (self : &ImFontAtlas) -> void;
ImFontAtlas_Clear                                     :: (self : &ImFontAtlas) -> void;
ImFontAtlas_Build                                     :: (self : &ImFontAtlas) -> bool;
ImFontAtlas_GetTexDataAsAlpha8                        :: (self : &ImFontAtlas, out_pixels : &&u8, out_width : &i32, out_height : &i32, out_bytes_per_pixel : &i32) -> void;
ImFontAtlas_GetTexDataAsRGBA32                        :: (self : &ImFontAtlas, out_pixels : &&u8, out_width : &i32, out_height : &i32, out_bytes_per_pixel : &i32) -> void;
ImFontAtlas_IsBuilt                                   :: (self : &ImFontAtlas) -> bool;
ImFontAtlas_SetTexID                                  :: (self : &ImFontAtlas, id : ImTextureID) -> void;
ImFontAtlas_GetGlyphRangesDefault                     :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesKorean                      :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesJapanese                    :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesChineseFull                 :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon     :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesCyrillic                    :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesThai                        :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_GetGlyphRangesVietnamese                  :: (self : &ImFontAtlas) -> &ImWchar;
ImFontAtlas_AddCustomRectRegular                      :: (self : &ImFontAtlas, id : u32, width : i32, height : i32) -> i32;
ImFontAtlas_AddCustomRectFontGlyph                    :: (self : &ImFontAtlas, font : &ImFont, id : ImWchar, width : i32, height : i32, advance_x : f32, offset : ImVec2) -> i32;
ImFontAtlas_GetCustomRectByIndex                      :: (self : &ImFontAtlas, index : i32) -> &ImFontAtlasCustomRect;
ImFontAtlas_CalcCustomRectUV                          :: (self : &ImFontAtlas, rect : &ImFontAtlasCustomRect, out_uv_min : &ImVec2, out_uv_max : &ImVec2) -> void;
ImFontAtlas_GetMouseCursorTexData                     :: (self : &ImFontAtlas, cursor : ImGuiMouseCursor, out_offset : &ImVec2, out_size : &ImVec2, out_uv_border : [2]ImVec2, out_uv_fill : [2]ImVec2) -> bool;
ImFont_ImFont                                         :: () -> &ImFont;
ImFont_destroy                                        :: (self : &ImFont) -> void;
ImFont_FindGlyph                                      :: (self : &ImFont, c: ImWchar) -> &ImFontGlyph;
ImFont_FindGlyphNoFallback                            :: (self : &ImFont, c: ImWchar) -> &ImFontGlyph;
ImFont_GetCharAdvance                                 :: (self : &ImFont, c: ImWchar) -> f32;
ImFont_IsLoaded                                       :: (self : &ImFont) -> bool;
ImFont_GetDebugName                                   :: (self : &ImFont) -> &i8;
ImFont_CalcTextSizeA                                  :: (self : &ImFont, size : f32, max_width : f32, wrap_width : f32, text_begin : &i8, text_end : &i8, remaining : &&i8) -> ImVec2;
ImFont_CalcWordWrapPositionA                          :: (self : &ImFont, scale : f32, text : &i8, text_end : &i8, wrap_width : f32) -> &i8;
ImFont_RenderChar                                     :: (self : &ImFont, draw_list : &ImDrawList, size : f32, pos : ImVec2, col : ImU32, c: ImWchar) -> void;
ImFont_RenderText                                     :: (self : &ImFont, draw_list : &ImDrawList, size : f32, pos : ImVec2, col : ImU32, clip_rect : ImVec4, text_begin : &i8, text_end : &i8, wrap_width : f32, cpu_fine_clip : bool) -> void;
ImFont_BuildLookupTable                               :: (self : &ImFont) -> void;
ImFont_ClearOutputData                                :: (self : &ImFont) -> void;
ImFont_GrowIndex                                      :: (self : &ImFont, new_size : i32) -> void;
ImFont_AddGlyph                                       :: (self : &ImFont, c: ImWchar, x0 : f32, y0 : f32, x1 : f32, y1 : f32, u0 : f32, v0 : f32, u1 : f32, v1 : f32, advance_x : f32) -> void;
ImFont_AddRemapChar                                   :: (self : &ImFont, dst : ImWchar, src : ImWchar, overwrite_dst : bool) -> void;
ImFont_SetFallbackChar                                :: (self : &ImFont, c: ImWchar) -> void;
igGetWindowPos_nonUDT                                 :: (pOut : &ImVec2) -> void;
igGetWindowPos_nonUDT2                                :: () -> ImVec2_Simple;
igGetWindowSize_nonUDT                                :: (pOut : &ImVec2) -> void;
igGetWindowSize_nonUDT2                               :: () -> ImVec2_Simple;
igGetContentRegionMax_nonUDT                          :: (pOut : &ImVec2) -> void;
igGetContentRegionMax_nonUDT2                         :: () -> ImVec2_Simple;
igGetContentRegionAvail_nonUDT                        :: (pOut : &ImVec2) -> void;
igGetContentRegionAvail_nonUDT2                       :: () -> ImVec2_Simple;
igGetWindowContentRegionMin_nonUDT                    :: (pOut : &ImVec2) -> void;
igGetWindowContentRegionMin_nonUDT2                   :: () -> ImVec2_Simple;
igGetWindowContentRegionMax_nonUDT                    :: (pOut : &ImVec2) -> void;
igGetWindowContentRegionMax_nonUDT2                   :: () -> ImVec2_Simple;
igGetFontTexUvWhitePixel_nonUDT                       :: (pOut : &ImVec2) -> void;
igGetFontTexUvWhitePixel_nonUDT2                      :: () -> ImVec2_Simple;
igGetCursorPos_nonUDT                                 :: (pOut : &ImVec2) -> void;
igGetCursorPos_nonUDT2                                :: () -> ImVec2_Simple;
igGetCursorStartPos_nonUDT                            :: (pOut : &ImVec2) -> void;
igGetCursorStartPos_nonUDT2                           :: () -> ImVec2_Simple;
igGetCursorScreenPos_nonUDT                           :: (pOut : &ImVec2) -> void;
igGetCursorScreenPos_nonUDT2                          :: () -> ImVec2_Simple;
igGetItemRectMin_nonUDT                               :: (pOut : &ImVec2) -> void;
igGetItemRectMin_nonUDT2                              :: () -> ImVec2_Simple;
igGetItemRectMax_nonUDT                               :: (pOut : &ImVec2) -> void;
igGetItemRectMax_nonUDT2                              :: () -> ImVec2_Simple;
igGetItemRectSize_nonUDT                              :: (pOut : &ImVec2) -> void;
igGetItemRectSize_nonUDT2                             :: () -> ImVec2_Simple;
igCalcTextSize_nonUDT                                 :: (pOut : &ImVec2, text : &i8, text_end : &i8, hide_text_after_double_hash : bool, wrap_width : f32) -> void;
igCalcTextSize_nonUDT2                                :: (text : &i8, text_end : &i8, hide_text_after_double_hash : bool, wrap_width : f32) -> ImVec2_Simple;
igColorConvertU32ToFloat4_nonUDT                      :: (pOut : ImVec4, in : ImU32) -> void;
igColorConvertU32ToFloat4_nonUDT2                     :: (in : ImU32) -> ImVec4_Simple;
igGetMousePos_nonUDT                                  :: (pOut : &ImVec2) -> void;
igGetMousePos_nonUDT2                                 :: () -> ImVec2_Simple;
igGetMousePosOnOpeningCurrentPopup_nonUDT             :: (pOut : &ImVec2) -> void;
igGetMousePosOnOpeningCurrentPopup_nonUDT2            :: () -> ImVec2_Simple;
igGetMouseDragDelta_nonUDT                            :: (pOut : &ImVec2, button : i32, lock_threshold : f32) -> void;
igGetMouseDragDelta_nonUDT2                           :: (button : i32, lock_threshold : f32) -> ImVec2_Simple;
ImColor_HSV_nonUDT                                    :: (pOut : &ImColor, self : &ImColor, h: f32, s: f32, v: f32, a: f32) -> void;
ImColor_HSV_nonUDT2                                   :: (self : &ImColor, h: f32, s: f32, v: f32, a: f32) -> ImColor_Simple;
ImDrawList_GetClipRectMin_nonUDT                      :: (pOut : &ImVec2, self : &ImDrawList) -> void;
ImDrawList_GetClipRectMin_nonUDT2                     :: (self : &ImDrawList) -> ImVec2_Simple;
ImDrawList_GetClipRectMax_nonUDT                      :: (pOut : &ImVec2, self : &ImDrawList) -> void;
ImDrawList_GetClipRectMax_nonUDT2                     :: (self : &ImDrawList) -> ImVec2_Simple;
ImFont_CalcTextSizeA_nonUDT                           :: (pOut : &ImVec2, self : &ImFont, size : f32, max_width : f32, wrap_width : f32, text_begin : &i8, text_end : &i8, remaining : &&i8) -> void;
ImFont_CalcTextSizeA_nonUDT2                          :: (self : &ImFont, size : f32, max_width : f32, wrap_width : f32, text_begin : &i8, text_end : &i8, remaining : &&i8) -> ImVec2_Simple;


/////////////////////////hand written functions
//no LogTextV
igLogText                                             :: (fmt : &char) -> void #varargs;
//no appendfV
ImGuiTextBuffer_appendf                               :: (buffer : &ImGuiTextBuffer, fmt : &char) -> void #varargs;
//for getting FLT_MAX in bindings
igGET_FLT_MAX                                         :: () -> f32;
//not args from & to *
igColorConvertRGBtoHSV                                :: (r: f32, g: f32, b: f32, out_h: &f32, out_s: &f32, out_v: &f32) -> void;
igColorConvertHSVtoRGB                                :: (h: f32, s: f32, v: f32, out_r: &f32, out_g: &f32, out_b: &f32) -> void;

ImVector_ImWchar_create                               :: () -> &ImVector_ImWchar;
ImVector_ImWchar_Init                                 :: (p: &ImVector_ImWchar) -> void;
ImVector_ImWchar_UnInit                               :: (p: &ImVector_ImWchar) -> void;



///////////////////////////////////////////////////////
//                      IMPL                         //
///////////////////////////////////////////////////////

ImGui_ImplGlfw_InitForOpenGL           :: (window: &GLFWwindow, install_callbacks: bool) -> bool;
ImGui_ImplGlfw_InitForVulkan           :: (window: &GLFWwindow, install_callbacks: bool) -> bool;
ImGui_ImplGlfw_Shutdown                :: ();
ImGui_ImplGlfw_NewFrame                :: ();
ImGui_ImplGlfw_MouseButtonCallback     :: (window: &GLFWwindow, button: i32,action: i32,mods: i32) -> void;
ImGui_ImplGlfw_ScrollCallback          :: (window: &GLFWwindow, xoffset: f64, yoffset: f64) -> void;
ImGui_ImplGlfw_KeyCallback             :: (window: &GLFWwindow, key: i32, scancode: i32, action: i32, mods: i32) -> void;
ImGui_ImplGlfw_CharCallback            :: (window: &GLFWwindow, c: u32) -> void;
ImGui_ImplOpenGL3_Init                 :: (glsl_version: c_string) -> bool;
ImGui_ImplOpenGL3_Shutdown             :: () -> void;
ImGui_ImplOpenGL3_NewFrame             :: () -> void;
ImGui_ImplOpenGL3_RenderDrawData       :: (draw_data: &ImDrawData) -> void;
ImGui_ImplOpenGL3_CreateFontsTexture   :: () -> bool;
ImGui_ImplOpenGL3_DestroyFontsTexture  :: () -> void;
ImGui_ImplOpenGL3_CreateDeviceObjects  :: () -> bool;
ImGui_ImplOpenGL3_DestroyDeviceObjects :: () -> void;
// CIMGUI_API bool ImGui_ImplOpenGL2_Init();
// CIMGUI_API void ImGui_ImplOpenGL2_Shutdown();
// CIMGUI_API void ImGui_ImplOpenGL2_NewFrame();
// CIMGUI_API void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data);
// CIMGUI_API bool ImGui_ImplOpenGL2_CreateFontsTexture();
// CIMGUI_API void ImGui_ImplOpenGL2_DestroyFontsTexture();
// CIMGUI_API bool ImGui_ImplOpenGL2_CreateDeviceObjects();
// CIMGUI_API void ImGui_ImplOpenGL2_DestroyDeviceObjects();
// CIMGUI_API bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window,void* sdl_gl_context);
// CIMGUI_API bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window);
// CIMGUI_API bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window);
// CIMGUI_API void ImGui_ImplSDL2_Shutdown();
// CIMGUI_API void ImGui_ImplSDL2_NewFrame(SDL_Window* window);
// CIMGUI_API bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event);



