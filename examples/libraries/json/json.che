use import std.hash_table
use import std.array
use import std.string
use import std.unicode
use import std.printable

mem  :: import std.mem.allocator
io   :: import std.io
fs   :: import std.io.fs
fmt  :: import std.fmt
C    :: import std.c

#export_scope

JsonValue :: enum {
    JsonNull
    JsonString  : String
    JsonNumber  : double
    JsonBool    : bool
    JsonArray   : Array[JsonValue]
    JsonObject  : Table[string, JsonValue]
}

impl JsonValue {
    to_number :: (&Self) -> double {
        return match self {
            .JsonNumber($val) -> val
            _ -> @assert(false)
        }
    }

    to_string :: (&Self) -> String {
        return match self {
            .JsonNull -> "null".to_owned()
            .JsonBool($val) -> fmt.format_any(val)
            .JsonNumber($val) -> fmt.format_any(val)
            .JsonString($val) -> fmt.format_any(val.slice())
            .JsonObject(_) -> "{...}".to_owned()
            .JsonArray(_) -> "[...]".to_owned()
        }
    }

    as_string_or :: (&Self, def: fn() -> String) -> String {
        return match self {
            .JsonString($str) -> str.clone()
            _ -> def()
        }
    }

    to_array :: (Self) -> Array[JsonValue] {
        return match self {
            .JsonArray($arr) -> arr
            _ -> @assert(false)
        }
    }

    as_array_or :: (&Self, def: fn() -> Array[JsonValue]) -> Array[JsonValue] {
        return match self {
            .JsonArray($arr) -> arr.clone()
            _ -> def()
        }
    }

    as_array :: (&Self) -> &Array[JsonValue] {
        return match self {
            .JsonArray($arr) -> arr
            _ -> @assert(false)
        }
    }

    to_map :: (Self) -> Table[string, JsonValue] {
        return match self {
            .JsonObject($map) -> map
            _ -> @assert(false)
        }
    }

    as_map :: (&Self) -> &Table[string, JsonValue] {
        return match self {
            .JsonObject($map) -> map
            _ -> @assert(false)
        }
    }
}

impl Printable for JsonValue {
    print :: (&Self, str: &String, format: string) {
        s := fmt.format_any(self)
        str += s
    }
}

impl Clone for JsonValue {
    clone :: (&Self) -> Self {
        return match self {
            .JsonNull -> .JsonNull
            .JsonBool($val) -> .JsonBool(val)
            .JsonNumber($val) -> .JsonNumber(val)
            .JsonString($val) -> .JsonString(val.clone())
            .JsonArray($arr) -> .JsonArray(arr.clone())
            .JsonObject($obj) -> .JsonObject(obj.clone())
        }
    }
}

serialize_json_value :: (val: &JsonValue, pretty: bool = false) -> String {
    result := String.empty()
    if pretty then serialize_json_value_helper_pretty(&result, val)
    else serialize_json_value_helper(&result, val)
    return result
}

serialize_json_value_helper_pretty :: (result: &String, val: &JsonValue) {
    match val {
        .JsonNull -> result.append_string("null")
        .JsonBool($val) -> result.appendf("{}", *val)
        .JsonNumber($val) -> result.appendf("{}", *val)
        .JsonString($val) -> result.appendf("`"{}`"", escape_json_string(val.slice()))
        .JsonArray($arr) -> {
            result += "[`n"

            body := String.empty()
            for(by_ref=true) v in arr.slice() {
                if it_index > 0 {
                    body += ",`n"
                }
                serialize_json_value_helper_pretty(&body, v)
            }
            for line in body.slice().split_at_char('`n') {
                result += "    "
                result += line
                result += "`n"
            }
            result += "`n]"
        }
        .JsonObject($map) -> {
            result += "{`n"
            body := String.empty()
            for kv in map {
                if it_index > 0 {
                    body += ",`n"
                }

                body += '"'
                body += kv.name
                body += '"'
                body += ": "

                serialize_json_value_helper_pretty(&body, kv.value)
            }
            for line in body.slice().split_at_char('`n') {
                result += "    "
                result += line
                result += "`n"
            }
            result += "`n}"
        }
    }
}

serialize_json_value_helper :: (result: &String, val: &JsonValue) {
    match val {
        .JsonNull -> result.append_string("null")
        .JsonBool($val) -> result.appendf("{}", *val)
        .JsonNumber($val) -> result.appendf("{}", *val)
        .JsonString($val) -> result.appendf("`"{}`"", escape_json_string(val.slice()))
        .JsonArray($arr) -> {
            result += "["
            for(by_ref=true) v in arr.slice() {
                if it_index > 0 {
                    result += ","
                }
                serialize_json_value_helper(result, v)
            }
            result += "]"
        }
        .JsonObject($map) -> {
            result += "{"
            for kv in map {
                if it_index > 0 {
                    result += ","
                }

                result += '"'
                result += kv.name
                result += '"'
                result += ":"

                serialize_json_value_helper(result, kv.value)
            }
            result += "}"
        }
    }
}

parse_json :: ($T: type, json: string) -> Option[T] {
    result, rem := match T {
        JsonValue -> parse_json_into_json_value(json)

        _ -> {
            io.formatln("parsing {}", [@typename(T)])
            None, json
        }
    }

    if result != .None and rem.trim().bytes.length > 0 {
        io.formatln("[ERROR] Unexpected characters and end of value: {}", [rem])
        return None
    }

    return result
}

parse_json_into_json_value :: (json: string) -> Option[JsonValue], string {
    remaining, typ := next_json_token(json)
    json = remaining

    return match typ {
        .EndOfFile -> None, json
        .Unknown -> {
            io.formatln("[ERROR] Unexpected character(s) '{}'", [typ.Unknown])
            None, json
        }

        .String($val)   -> Some(JsonValue.JsonString(unescape_json_string(val))), json
        .Number($val)   -> Some(JsonValue.JsonNumber(val)), json
        .Bool($val)     -> Some(JsonValue.JsonBool(val)), json
        .Null           -> Some(JsonValue.JsonNull), json

        .OpenBracket -> {
            arr := Array[JsonValue].create()

            loop {
                if (rem, typ) := next_json_token(json), typ == .ClosingBracket {
                    json = rem
                    break
                }

                val, rem := parse_json_into_json_value(json)
                json = rem
                match val {
                    Some($val) -> arr.add(val)
                    None -> {
                        return None, json
                    }
                }

                if (rem, typ) := next_json_token(json), typ == .Comma {
                    json = rem
                } else if (rem, typ) := next_json_token(json), typ == .ClosingBracket {
                    json = rem
                    break
                } else {
                    io.formatln("[ERROR] expected comma, got {}", [typ])
                    return None, json
                }
            }

            Some(JsonValue.JsonArray(arr)), json
        }

        .OpenBrace -> {
            map := Table[string, JsonValue].create(strings_equal)

            loop {
                if (rem, typ) := next_json_token(json), typ == .ClosingBrace {
                    json = rem
                    break
                }

                key := {
                    rem, typ := next_json_token(json)
                    json = rem
                    if typ == .String {
                        typ.String
                    } else {
                        io.formatln("[ERROR] expected string literal, got {}", [typ])
                        return None, json
                    }
                }

                if (ok, rem) := consume(json, .Colon), ok {
                    json = rem
                } else {
                    return None, rem
                }

                val, rem := parse_json_into_json_value(json)
                json = rem
                match val {
                    Some($val) -> {
                        map[key] = val
                    }
                    None -> {
                        return None, json
                    }
                }

                if (rem, typ) := next_json_token(json), typ == .Comma {
                    json = rem
                }
            }

            Some(JsonValue.JsonObject(map)), json
        }

        _ -> {
            io.formatln("[ERROR] Unexpected token: {}", [typ])
            None, json
        }
    }
}

#file_scope

consume :: (json: string, typ: JsonTokenType) -> bool, string {
    rem, t := next_json_token(json)
    if t != typ {
        io.formatln("[ERROR] expected {}, got {}", [typ, t])
        return false, rem
    }
    return true, rem
}

escape_json_string :: (str: string) -> String {
    result := String.with_capacity(str.bytes.length)

    for c in str {
        match c {
            '`n' -> result.append_string("\n")
            '`t' -> result.append_string("\t")
            '`r' -> result.append_string("\r")
            '\'  -> result.append_string("\\")
            '"'  -> result.append_string("\`"")

            _ -> result.append_char(c)
        }
    }
    return result
}

unescape_json_string :: (str: string) -> String {
    result := String.with_capacity(str.bytes.length)

    was_backslash := false
    for c in str {
        if was_backslash {
            result.append_char(match c {
                'n' -> '`n'
                't' -> '`t'
                'r' -> '`r'
                '\' -> '\'
                '"' -> '"'

                _ -> @assert(false)
            })
            was_backslash = false
        } else if c == '\' {
            was_backslash = true
        } else {
            result += c
        }
    }
    return result
}

JsonTokenType :: enum #copy {
    EndOfFile
    Unknown : string
    OpenBrace, ClosingBrace
    OpenBracket, ClosingBracket
    String : string
    Number : double
    Bool : bool
    Null
    Comma
    Colon
}

next_json_token :: (json: string) -> (string, JsonTokenType) {
    use JsonTokenType

    // skip whitespace and comments
    while json.bytes.length > 0 {
        c := char(json[0])

        if json.starts_with("//") {
            nl := json.index_of('`n')
            if nl >= 0 {
                json = json[nl..]
            } else {
                json = ""
            }
        } else if !c.is_whitespace() {
            break
        } else {
            json = json[1..]
        }
    }

    if json.bytes.length == 0 {
        return json, EndOfFile
    }

    token_type, len := match char(json[0]) {
        '{' -> OpenBrace, 1
        '}' -> ClosingBrace, 1
        '[' -> OpenBracket, 1
        ']' -> ClosingBracket, 1
        ',' -> Comma, 1
        ':' -> Colon, 1

        // strings
        '"' -> {
            json = json[1..]
            str := json
            len := 0

            while json.bytes.length > 0 {
                c := char(json[0])
                if c == '\' and json.bytes.length > 1 {
                    json = json[1..]
                    len += 1
                } else if c == '"' {
                    break
                }

                json = json[1..]
                len += 1
            }
            
            str = str[..len]

            if json.bytes.length > 0 {
                String(str), 1  // got "
            } else {
                String(str), 0  // missing "
            }
        }

        $c if c.is_alpha() -> {
            str := json
            len := 0

            while json.bytes.length > 0 {
                c, l := Utf8.decode(json.bytes)
                if !c.is_alpha() then break
                json = json[int(l)..]
                len += int(l)
            }

            str = str[..len]

            if strings_equal(str, "true") {
                Bool(true), 0
            } else if strings_equal(str, "false") {
                Bool(false), 0
            } else if strings_equal(str, "null") {
                Null, 0
            } else {
                Unknown(str), 0
            }
        }

        '-' -> {
            return next_json_token_number(json)
        }

        $c if c.is_digit() -> {
            return next_json_token_number(json)
        }

        _ -> {
            _, len := Utf8.decode(json.bytes)
            Unknown(json[..int(len)]), int(len)
        }
    }

    json = json[len..]


    return json, token_type
}

next_json_token_number :: (json: string) -> (string, JsonTokenType) {
    str := json

    if char(json[0]) == '-' {
        json = json[1..]
    }

    int_digits := 0
    digits := json
    while json.bytes.length > 0 {
        c := char(json[0])
        if !c.is_digit() then break
        json = json[1..]
        int_digits += 1
    }

    if int_digits > 1 and char(digits[0]) == '0' {
        io.println("[ERROR] first digit can't be zero")
        return json, JsonTokenType.Unknown("first digit can't be zero")
    }

    if int_digits == 0 {
        io.println("[ERROR] expected digit")
        return json, JsonTokenType.Unknown("expected digit")
    }

    if json.bytes.length > 0 and char(json[0]) == '.' {
        json = json[1..]

        float_digits := 0
        while json.bytes.length > 0 {
            c := char(json[0])
            if !c.is_digit() then break
            json = json[1..]
            float_digits += 1
        }

        if float_digits == 0 {
            io.println("[ERROR] expected digit")
            return json, JsonTokenType.Unknown("expected digit")
        }
    }

    if json.bytes.length > 0 and (char(json[0]) == 'e' or char(json[0]) == 'E') {
        json = json[1..]
        
        if char(json[0]) == '-' or char(json[0]) == '+' {
            json = json[1..]
        }

        exp_digits := 0

        while json.bytes.length > 0 {
            c := char(json[0])
            if !c.is_digit() then break
            json = json[1..]
            exp_digits += 1
        }

        if exp_digits == 0 {
            io.println("[ERROR] expected digit")
            return json, JsonTokenType.Unknown("expected digit")
        }
    }

    len := str.bytes.length - json.bytes.length
    str = str[..len]

    buff := @alloca(char8, str.bytes.length + 1)
    C.memcpy(buff.data, str.bytes.data, cast str.bytes.length)
    buff[str.bytes.length] = char8(0)

    val := C.strtod(buff.data, null)

    return json, JsonTokenType.Number(val)
}