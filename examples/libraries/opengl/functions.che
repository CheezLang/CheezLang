use import types

#export_scope

//
glAccum :: (op: GLenum, value: GLfloat) -> void #stdcall;
glAlphaFunc :: (func: GLenum, reff: GLclampf) -> void #stdcall;
glAreTexturesResident :: (n: GLsizei, textures: &GLuint, residences: &GLboolean) -> GLboolean #stdcall;
glArrayElement :: (i: GLint) -> void #stdcall;
glBegin :: (mode: GLenum) -> void #stdcall;
glBindTexture :: (target: GLenum, texture: GLuint) -> void #stdcall;
glBitmap :: (width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: &GLubyte) -> void #stdcall;
glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) -> void #stdcall;
glCallList :: (list: GLuint) -> void #stdcall;
glCallLists :: (n: GLsizei, typ: GLenum, lists: &void) -> void #stdcall;
glClear :: (mask: GLbitfield) -> void #stdcall;
glClearAccum :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #stdcall;
glClearColor :: (red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) -> void #stdcall;
glClearDepth :: (depth: GLclampd) -> void #stdcall;
glClearIndex :: (c: GLfloat) -> void #stdcall;
glClearStencil :: (s: GLint) -> void #stdcall;
glClipPlane :: (plane: GLenum, equation: &GLdouble) -> void #stdcall;
glColor3b :: (red: GLbyte, green: GLbyte, blue: GLbyte) -> void #stdcall;
glColor3bv :: (v: &GLbyte) -> void #stdcall;
glColor3d :: (red: GLdouble, green: GLdouble, blue: GLdouble) -> void #stdcall;
glColor3dv :: (v: &GLdouble) -> void #stdcall;
glColor3f :: (red: GLfloat, green: GLfloat, blue: GLfloat) -> void #stdcall;
glColor3fv :: (v: &GLfloat) -> void #stdcall;
glColor3i :: (red: GLint, green: GLint, blue: GLint) -> void #stdcall;
glColor3iv :: (v: &GLint) -> void #stdcall;
glColor3s :: (red: GLshort, green: GLshort, blue: GLshort) -> void #stdcall;
glColor3sv :: (v: &GLshort) -> void #stdcall;
glColor3ub :: (red: GLubyte, green: GLubyte, blue: GLubyte) -> void #stdcall;
glColor3ubv :: (v: &GLubyte) -> void #stdcall;
glColor3ui :: (red: GLuint, green: GLuint, blue: GLuint) -> void #stdcall;
glColor3uiv :: (v: &GLuint) -> void #stdcall;
glColor3us :: (red: GLushort, green: GLushort, blue: GLushort) -> void #stdcall;
glColor3usv :: (v: &GLushort) -> void #stdcall;
glColor4b :: (red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void #stdcall;
glColor4bv :: (v: &GLbyte) -> void #stdcall;
glColor4d :: (red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void #stdcall;
glColor4dv :: (v: &GLdouble) -> void #stdcall;
glColor4f :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void #stdcall;
glColor4fv :: (v: &GLfloat) -> void #stdcall;
glColor4i :: (red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void #stdcall;
glColor4iv :: (v: &GLint) -> void #stdcall;
glColor4s :: (red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void #stdcall;
glColor4sv :: (v: &GLshort) -> void #stdcall;
glColor4ub :: (red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void #stdcall;
glColor4ubv :: (v: &GLubyte) -> void #stdcall;
glColor4ui :: (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void #stdcall;
glColor4uiv :: (v: &GLuint) -> void #stdcall;
glColor4us :: (red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void #stdcall;
glColor4usv :: (v: &GLushort) -> void #stdcall;
glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void #stdcall;
glColorMaterial :: (face: GLenum, mode: GLenum) -> void #stdcall;
glColorPointer :: (size: GLint, typ: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glCopyPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, typ: GLenum) -> void #stdcall;
glCopyTexImage1D :: (target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void #stdcall;
glCopyTexImage2D :: (target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void #stdcall;
glCopyTexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void #stdcall;
glCopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
glCullFace :: (mode: GLenum) -> void #stdcall;
glDeleteLists :: (list: GLuint, range: GLsizei) -> void #stdcall;
glDeleteTextures :: (n: GLsizei, textures: &GLuint) -> void #stdcall;
glDepthFunc :: (func: GLenum) -> void #stdcall;
glDepthMask :: (flag: GLboolean) -> void #stdcall;
glDepthRange :: (zNear: GLclampd, zFar: GLclampd) -> void #stdcall;
glDisable :: (cap: GLenum) -> void #stdcall;
glDisableClientState :: (array: GLenum) -> void #stdcall;
glDrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) -> void #stdcall;
glDrawBuffer :: (mode: GLenum) -> void #stdcall;
glDrawElements :: (mode: GLenum, count: GLsizei, typ: GLenum, indices: &void) -> void #stdcall;
glDrawPixels :: (width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glEdgeFlag :: (flag: GLboolean) -> void #stdcall;
glEdgeFlagPointer :: (stride: GLsizei, pointer: &void) -> void #stdcall;
glEdgeFlagv :: (flag: &GLboolean) -> void #stdcall;
glEnable :: (cap: GLenum) -> void #stdcall;
glEnableClientState :: (array: GLenum) -> void #stdcall;
glEnd :: () -> void #stdcall;
glEndList :: () -> void #stdcall;
glEvalCoord1d :: (u: GLdouble) -> void #stdcall;
glEvalCoord1dv :: (u: &GLdouble) -> void #stdcall;
glEvalCoord1f :: (u: GLfloat) -> void #stdcall;
glEvalCoord1fv :: (u: &GLfloat) -> void #stdcall;
glEvalCoord2d :: (u: GLdouble, v: GLdouble) -> void #stdcall;
glEvalCoord2dv :: (u: &GLdouble) -> void #stdcall;
glEvalCoord2f :: (u: GLfloat, v: GLfloat) -> void #stdcall;
glEvalCoord2fv :: (u: &GLfloat) -> void #stdcall;
glEvalMesh1 :: (mode: GLenum, i1: GLint, i2: GLint) -> void #stdcall;
glEvalMesh2 :: (mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void #stdcall;
glEvalPoint1 :: (i: GLint) -> void #stdcall;
glEvalPoint2 :: (i: GLint, j: GLint) -> void #stdcall;
glFeedbackBuffer :: (size: GLsizei, typ: GLenum, buffer: &GLfloat) -> void #stdcall;
glFinish :: () -> void #stdcall;
glFlush :: () -> void #stdcall;
glFogf :: (pname: GLenum, param: GLfloat) -> void #stdcall;
glFogfv :: (pname: GLenum, params: &GLfloat) -> void #stdcall;
glFogi :: (pname: GLenum, param: GLint) -> void #stdcall;
glFogiv :: (pname: GLenum, params: &GLint) -> void #stdcall;
glFrontFace :: (mode: GLenum) -> void #stdcall;
glFrustum :: (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #stdcall;
glGenLists :: (range: GLsizei) -> GLuint #stdcall;
glGenTextures :: (n: GLsizei, textures: &GLuint) -> void #stdcall;
glGetBooleanv :: (pname: GLenum, params: &GLboolean) -> void #stdcall;
glGetClipPlane :: (plane: GLenum, equation: &GLdouble) -> void #stdcall;
glGetDoublev :: (pname: GLenum, params: &GLdouble) -> void #stdcall;
glGetError :: () -> GLenum #stdcall;
glGetFloatv :: (pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetIntegerv :: (pname: GLenum, params: &GLint) -> void #stdcall;
glGetLightfv :: (light: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetLightiv :: (light: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glGetMapdv :: (target: GLenum, query: GLenum, v: &GLdouble) -> void #stdcall;
glGetMapfv :: (target: GLenum, query: GLenum, v: &GLfloat) -> void #stdcall;
glGetMapiv :: (target: GLenum, query: GLenum, v: &GLint) -> void #stdcall;
glGetMaterialfv :: (face: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetMaterialiv :: (face: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glGetPixelMapfv :: (map: GLenum, values: &GLfloat) -> void #stdcall;
glGetPixelMapuiv :: (map: GLenum, values: &GLuint) -> void #stdcall;
glGetPixelMapusv :: (map: GLenum, values: &GLushort) -> void #stdcall;
glGetPointerv :: (pname: GLenum, params: &&void) -> void #stdcall;
glGetPolygonStipple :: (mask: &GLubyte) -> void #stdcall;
glGetString :: (name: GLenum) -> &GLubyte #stdcall;
glGetTexEnvfv :: (target: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetTexEnviv :: (target: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glGetTexGendv :: (coord: GLenum, pname: GLenum, params: &GLdouble) -> void #stdcall;
glGetTexGenfv :: (coord: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetTexGeniv :: (coord: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glGetTexImage :: (target: GLenum, level: GLint, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: &GLint) -> void #stdcall;
glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glHint :: (target: GLenum, mode: GLenum) -> void #stdcall;
glIndexMask :: (mask: GLuint) -> void #stdcall;
glIndexPointer :: (typ: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glIndexd :: (c: GLdouble) -> void #stdcall;
glIndexdv :: (c: &GLdouble) -> void #stdcall;
glIndexf :: (c: GLfloat) -> void #stdcall;
glIndexfv :: (c: &GLfloat) -> void #stdcall;
glIndexi :: (c: GLint) -> void #stdcall;
glIndexiv :: (c: &GLint) -> void #stdcall;
glIndexs :: (c: GLshort) -> void #stdcall;
glIndexsv :: (c: &GLshort) -> void #stdcall;
glIndexub :: (c: GLubyte) -> void #stdcall;
glIndexubv :: (c: &GLubyte) -> void #stdcall;
glInitNames :: () -> void #stdcall;
glInterleavedArrays :: (format: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glIsEnabled :: (cap: GLenum) -> GLboolean #stdcall;
glIsList :: (list: GLuint) -> GLboolean #stdcall;
glIsTexture :: (texture: GLuint) -> GLboolean #stdcall;
glLightModelf :: (pname: GLenum, param: GLfloat) -> void #stdcall;
glLightModelfv :: (pname: GLenum, params: &GLfloat) -> void #stdcall;
glLightModeli :: (pname: GLenum, param: GLint) -> void #stdcall;
glLightModeliv :: (pname: GLenum, params: &GLint) -> void #stdcall;
glLightf :: (light: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
glLightfv :: (light: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glLighti :: (light: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
glLightiv :: (light: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glLineStipple :: (factor: GLint, pattern: GLushort) -> void #stdcall;
glLineWidth :: (width: GLfloat) -> void #stdcall;
glListBase :: (base: GLuint) -> void #stdcall;
glLoadIdentity :: () -> void #stdcall;
glLoadMatrixd :: (m: &GLdouble) -> void #stdcall;
glLoadMatrixf :: (m: &GLfloat) -> void #stdcall;
glLoadName :: (name: GLuint) -> void #stdcall;
glLogicOp :: (opcode: GLenum) -> void #stdcall;
glMap1d :: (target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: &GLdouble) -> void #stdcall;
glMap1f :: (target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: &GLfloat) -> void #stdcall;
glMap2d :: (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: &GLdouble) -> void #stdcall;
glMap2f :: (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: &GLfloat) -> void #stdcall;
glMapGrid1d :: (un: GLint, u1: GLdouble, u2: GLdouble) -> void #stdcall;
glMapGrid1f :: (un: GLint, u1: GLfloat, u2: GLfloat) -> void #stdcall;
glMapGrid2d :: (un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> void #stdcall;
glMapGrid2f :: (un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> void #stdcall;
glMaterialf :: (face: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
glMaterialfv :: (face: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glMateriali :: (face: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
glMaterialiv :: (face: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glMatrixMode :: (mode: GLenum) -> void #stdcall;
glMultMatrixd :: (m: &GLdouble) -> void #stdcall;
glMultMatrixf :: (m: &GLfloat) -> void #stdcall;
glNewList :: (list: GLuint, mode: GLenum) -> void #stdcall;
glNormal3b :: (nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void #stdcall;
glNormal3bv :: (v: &GLbyte) -> void #stdcall;
glNormal3d :: (nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void #stdcall;
glNormal3dv :: (v: &GLdouble) -> void #stdcall;
glNormal3f :: (nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void #stdcall;
glNormal3fv :: (v: &GLfloat) -> void #stdcall;
glNormal3i :: (nx: GLint, ny: GLint, nz: GLint) -> void #stdcall;
glNormal3iv :: (v: &GLint) -> void #stdcall;
glNormal3s :: (nx: GLshort, ny: GLshort, nz: GLshort) -> void #stdcall;
glNormal3sv :: (v: &GLshort) -> void #stdcall;
glNormalPointer :: (typ: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glOrtho :: (left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void #stdcall;
glPassThrough :: (token: GLfloat) -> void #stdcall;
glPixelMapfv :: (map: GLenum, mapsize: GLsizei, values: &GLfloat) -> void #stdcall;
glPixelMapuiv :: (map: GLenum, mapsize: GLsizei, values: &GLuint) -> void #stdcall;
glPixelMapusv :: (map: GLenum, mapsize: GLsizei, values: &GLushort) -> void #stdcall;
glPixelStoref :: (pname: GLenum, param: GLfloat) -> void #stdcall;
glPixelStorei :: (pname: GLenum, param: GLint) -> void #stdcall;
glPixelTransferf :: (pname: GLenum, param: GLfloat) -> void #stdcall;
glPixelTransferi :: (pname: GLenum, param: GLint) -> void #stdcall;
glPixelZoom :: (xfactor: GLfloat, yfactor: GLfloat) -> void #stdcall;
glPointSize :: (size: GLfloat) -> void #stdcall;
glPolygonMode :: (face: GLenum, mode: GLenum) -> void #stdcall;
glPolygonOffset :: (factor: GLfloat, units: GLfloat) -> void #stdcall;
glPolygonStipple :: (mask: &GLubyte) -> void #stdcall;
glPopAttrib :: () -> void #stdcall;
glPopClientAttrib :: () -> void #stdcall;
glPopMatrix :: () -> void #stdcall;
glPopName :: () -> void #stdcall;
glPrioritizeTextures :: (n: GLsizei, textures: &GLuint, priorities: &GLclampf) -> void #stdcall;
glPushAttrib :: (mask: GLbitfield) -> void #stdcall;
glPushClientAttrib :: (mask: GLbitfield) -> void #stdcall;
glPushMatrix :: () -> void #stdcall;
glPushName :: (name: GLuint) -> void #stdcall;
glRasterPos2d :: (x: GLdouble, y: GLdouble) -> void #stdcall;
glRasterPos2dv :: (v: &GLdouble) -> void #stdcall;
glRasterPos2f :: (x: GLfloat, y: GLfloat) -> void #stdcall;
glRasterPos2fv :: (v: &GLfloat) -> void #stdcall;
glRasterPos2i :: (x: GLint, y: GLint) -> void #stdcall;
glRasterPos2iv :: (v: &GLint) -> void #stdcall;
glRasterPos2s :: (x: GLshort, y: GLshort) -> void #stdcall;
glRasterPos2sv :: (v: &GLshort) -> void #stdcall;
glRasterPos3d :: (x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
glRasterPos3dv :: (v: &GLdouble) -> void #stdcall;
glRasterPos3f :: (x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
glRasterPos3fv :: (v: &GLfloat) -> void #stdcall;
glRasterPos3i :: (x: GLint, y: GLint, z: GLint) -> void #stdcall;
glRasterPos3iv :: (v: &GLint) -> void #stdcall;
glRasterPos3s :: (x: GLshort, y: GLshort, z: GLshort) -> void #stdcall;
glRasterPos3sv :: (v: &GLshort) -> void #stdcall;
glRasterPos4d :: (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #stdcall;
glRasterPos4dv :: (v: &GLdouble) -> void #stdcall;
glRasterPos4f :: (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #stdcall;
glRasterPos4fv :: (v: &GLfloat) -> void #stdcall;
glRasterPos4i :: (x: GLint, y: GLint, z: GLint, w: GLint) -> void #stdcall;
glRasterPos4iv :: (v: &GLint) -> void #stdcall;
glRasterPos4s :: (x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void #stdcall;
glRasterPos4sv :: (v: &GLshort) -> void #stdcall;
glReadBuffer :: (mode: GLenum) -> void #stdcall;
glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glRectd :: (x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void #stdcall;
glRectdv :: (v1: &GLdouble, v2: &GLdouble) -> void #stdcall;
glRectf :: (x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void #stdcall;
glRectfv :: (v1: &GLfloat, v2: &GLfloat) -> void #stdcall;
glRecti :: (x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void #stdcall;
glRectiv :: (v1: &GLint, v2: &GLint) -> void #stdcall;
glRects :: (x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void #stdcall;
glRectsv :: (v1: &GLshort, v2: &GLshort) -> void #stdcall;
glRenderMode :: (mode: GLenum) -> GLint #stdcall;
glRotated :: (angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
glRotatef :: (angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
glScaled :: (x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
glScalef :: (x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
glSelectBuffer :: (size: GLsizei, buffer: &GLuint) -> void #stdcall;
glShadeModel :: (mode: GLenum) -> void #stdcall;
glStencilFunc :: (func: GLenum, reff: GLint, mask: GLuint) -> void #stdcall;
glStencilMask :: (mask: GLuint) -> void #stdcall;
glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void #stdcall;
glTexCoord1d :: (s: GLdouble) -> void #stdcall;
glTexCoord1dv :: (v: &GLdouble) -> void #stdcall;
glTexCoord1f :: (s: GLfloat) -> void #stdcall;
glTexCoord1fv :: (v: &GLfloat) -> void #stdcall;
glTexCoord1i :: (s: GLint) -> void #stdcall;
glTexCoord1iv :: (v: &GLint) -> void #stdcall;
glTexCoord1s :: (s: GLshort) -> void #stdcall;
glTexCoord1sv :: (v: &GLshort) -> void #stdcall;
glTexCoord2d :: (s: GLdouble, t: GLdouble) -> void #stdcall;
glTexCoord2dv :: (v: &GLdouble) -> void #stdcall;
glTexCoord2f :: (s: GLfloat, t: GLfloat) -> void #stdcall;
glTexCoord2fv :: (v: &GLfloat) -> void #stdcall;
glTexCoord2i :: (s: GLint, t: GLint) -> void #stdcall;
glTexCoord2iv :: (v: &GLint) -> void #stdcall;
glTexCoord2s :: (s: GLshort, t: GLshort) -> void #stdcall;
glTexCoord2sv :: (v: &GLshort) -> void #stdcall;
glTexCoord3d :: (s: GLdouble, t: GLdouble, r: GLdouble) -> void #stdcall;
glTexCoord3dv :: (v: &GLdouble) -> void #stdcall;
glTexCoord3f :: (s: GLfloat, t: GLfloat, r: GLfloat) -> void #stdcall;
glTexCoord3fv :: (v: &GLfloat) -> void #stdcall;
glTexCoord3i :: (s: GLint, t: GLint, r: GLint) -> void #stdcall;
glTexCoord3iv :: (v: &GLint) -> void #stdcall;
glTexCoord3s :: (s: GLshort, t: GLshort, r: GLshort) -> void #stdcall;
glTexCoord3sv :: (v: &GLshort) -> void #stdcall;
glTexCoord4d :: (s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void #stdcall;
glTexCoord4dv :: (v: &GLdouble) -> void #stdcall;
glTexCoord4f :: (s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void #stdcall;
glTexCoord4fv :: (v: &GLfloat) -> void #stdcall;
glTexCoord4i :: (s: GLint, t: GLint, r: GLint, q: GLint) -> void #stdcall;
glTexCoord4iv :: (v: &GLint) -> void #stdcall;
glTexCoord4s :: (s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void #stdcall;
glTexCoord4sv :: (v: &GLshort) -> void #stdcall;
glTexCoordPointer :: (size: GLint, typ: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glTexEnvf :: (target: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
glTexEnvfv :: (target: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glTexEnvi :: (target: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
glTexEnviv :: (target: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glTexGend :: (coord: GLenum, pname: GLenum, param: GLdouble) -> void #stdcall;
glTexGendv :: (coord: GLenum, pname: GLenum, params: &GLdouble) -> void #stdcall;
glTexGenf :: (coord: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
glTexGenfv :: (coord: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glTexGeni :: (coord: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
glTexGeniv :: (coord: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glTexImage1D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) -> void #stdcall;
glTexParameterfv :: (target: GLenum, pname: GLenum, params: &GLfloat) -> void #stdcall;
glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) -> void #stdcall;
glTexParameteriv :: (target: GLenum, pname: GLenum, params: &GLint) -> void #stdcall;
glTexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: &void) -> void #stdcall;
glTranslated :: (x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
glTranslatef :: (x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
glVertex2d :: (x: GLdouble, y: GLdouble) -> void #stdcall;
glVertex2dv :: (v: &GLdouble) -> void #stdcall;
glVertex2f :: (x: GLfloat, y: GLfloat) -> void #stdcall;
glVertex2fv :: (v: &GLfloat) -> void #stdcall;
glVertex2i :: (x: GLint, y: GLint) -> void #stdcall;
glVertex2iv :: (v: &GLint) -> void #stdcall;
glVertex2s :: (x: GLshort, y: GLshort) -> void #stdcall;
glVertex2sv :: (v: &GLshort) -> void #stdcall;
glVertex3d :: (x: GLdouble, y: GLdouble, z: GLdouble) -> void #stdcall;
glVertex3dv :: (v: &GLdouble) -> void #stdcall;
glVertex3f :: (x: GLfloat, y: GLfloat, z: GLfloat) -> void #stdcall;
glVertex3fv :: (v: &GLfloat) -> void #stdcall;
glVertex3i :: (x: GLint, y: GLint, z: GLint) -> void #stdcall;
glVertex3iv :: (v: &GLint) -> void #stdcall;
glVertex3s :: (x: GLshort, y: GLshort, z: GLshort) -> void #stdcall;
glVertex3sv :: (v: &GLshort) -> void #stdcall;
glVertex4d :: (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void #stdcall;
glVertex4dv :: (v: &GLdouble) -> void #stdcall;
glVertex4f :: (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void #stdcall;
glVertex4fv :: (v: &GLfloat) -> void #stdcall;
glVertex4i :: (x: GLint, y: GLint, z: GLint, w: GLint) -> void #stdcall;
glVertex4iv :: (v: &GLint) -> void #stdcall;
glVertex4s :: (x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void #stdcall;
glVertex4sv :: (v: &GLshort) -> void #stdcall;
glVertexPointer :: (size: GLint, typ: GLenum, stride: GLsizei, pointer: &void) -> void #stdcall;
glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void #stdcall;
