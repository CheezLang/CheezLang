use import lexer
use import type

use import std.printable
use import std.string

#export_scope

Stmt :: struct {
    concrete    : StmtType
}

StmtType :: enum {
    Func    : FunctionDecl
}

impl Printable for Stmt {
    print :: (ref Self, str: ref String, format: string) {
        use StmtType
        match ref concrete {
            Func($func) -> {
                str.appendf("fn {}() ``{``}", func.name)
            }
        }
    }
}

FunctionDecl :: struct {
    name    : string
}


// expressions
Expr :: struct #extendable {
    id       : int
    location : Location = default
    typ      : &Type    = null
}

IdExpr :: struct #extend(Expr) {
    name : string
}

NumberExpr :: struct #extend(Expr) {
    value : int
}

BinaryExpr :: struct #extend(Expr) {
    op    : Operator
    left  : ref Expr
    right : ref Expr

    Operator :: enum #copy { Add, Sub, Mul, Div }
}

UnaryExpr :: struct #extend(Expr) {
    op  : Operator
    sub : ref Expr

    Operator :: enum #copy { Neg, Not }
}

impl Printable for BinaryExpr.Operator {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            BinaryExpr.Operator.Add -> str.append_char('+')
            BinaryExpr.Operator.Sub -> str.append_char('-')
            BinaryExpr.Operator.Mul -> str.append_char('*')
            BinaryExpr.Operator.Div -> str.append_char('/')
        }
    }
}
impl Printable for UnaryExpr.Operator {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            UnaryExpr.Operator.Neg -> str.append_char('-')
            UnaryExpr.Operator.Not -> str.append_char('!')
        }
    }
}

impl Printable for Expr {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            IdExpr($expr) -> str.appendf("{}", expr.name)
            NumberExpr($expr) -> str.appendf("{}", expr.value)
            BinaryExpr($expr) -> str.appendf("({} {} {})", (Printable(expr.left), expr.op, Printable(expr.right)))
            UnaryExpr($expr) -> str.appendf("{}{}", (expr.op, Printable(expr.sub)))
        }
    }
}
