use import std.printable
use import std.string
use import std.array

use import lexer
use import type
use import interpreter

#export_scope

AstNode :: trait {
    id       : int
    location : Location
    typ      : &Type    = null
}

// statements

AstConstDecl :: struct AstNode {
    name  : ref AstIdentifier
    // typ   : &AstNode
    value : ref AstNode
}
impl AstNode for AstConstDecl {}

// DeclStmt :: struct AstNode {
//     pattern  : ref AstNode
//     typ      : &AstNode
//     init     : &AstNode
// }

// UseStmt :: struct AstNode {
//     expr : ref AstNode
// }

// expressions

AstFunction :: struct AstNode {
    body : &AstNode

    bytecode : &CBCFunction = null
}
impl AstNode for AstFunction {}

AstBlock :: struct AstNode {
    children : Array[&AstNode]
}
impl AstNode for AstBlock {}

AstCall :: struct AstNode {
    function    : ref AstNode
    arguments   : Array[&AstNode]
}
impl AstNode for AstCall {}

AstIdentifier :: struct AstNode {
    value : string
}
impl AstNode for AstIdentifier {}

AstNumberLiteral :: struct AstNode {
    value : int
}
impl AstNode for AstNumberLiteral {}

// BinaryExpr :: struct AstNode {
//     op    : Operator
//     left  : ref AstNode
//     right : ref AstNode

//     Operator :: enum #copy { Add, Sub, Mul, Div, Mod, And, Or, Less, LessEq, Greater, GreaterEq, Equal, NotEqual }
// }

// UnaryExpr :: struct AstNode {
//     op  : Operator
//     sub : ref AstNode

//     Operator :: enum #copy { Neg, Not }
// }

// MoveExpr :: struct AstNode {
//     target : ref AstNode
//     source : ref AstNode
// }

// PipeExpr :: struct AstNode {
//     left  : ref AstNode
//     right : ref AstNode
// }

// impl Printable for BinaryExpr.Operator {
//     print :: (ref Self, str: ref String, format: string) {
//         match self {
//             BinaryExpr.Operator.Add       -> str.append_string("+")
//             BinaryExpr.Operator.Sub       -> str.append_string("-")
//             BinaryExpr.Operator.Mul       -> str.append_string("*")
//             BinaryExpr.Operator.Div       -> str.append_string("/")
//             BinaryExpr.Operator.Mod       -> str.append_string("%")
//             BinaryExpr.Operator.And       -> str.append_string("and")
//             BinaryExpr.Operator.Or        -> str.append_string("or")
//             BinaryExpr.Operator.Less      -> str.append_string("<")
//             BinaryExpr.Operator.LessEq    -> str.append_string("<=")
//             BinaryExpr.Operator.Greater   -> str.append_string(">")
//             BinaryExpr.Operator.GreaterEq -> str.append_string(">=")
//             BinaryExpr.Operator.Equal     -> str.append_string("==")
//             BinaryExpr.Operator.NotEqual  -> str.append_string("!=")
//         }
//     }
// }

// impl Printable for UnaryExpr.Operator {
//     print :: (ref Self, str: ref String, format: string) {
//         match self {
//             UnaryExpr.Operator.Neg -> str.append_char('-')
//             UnaryExpr.Operator.Not -> str.append_char('!')
//         }
//     }
// }

// impl Printable for AstNode {
//     print :: (ref Self, str: ref String, format: string) {
//         match self {
//             AstIdentifier($expr)     -> str.appendf("{}", expr.name)
//             AstNumberLiteral($expr) -> str.appendf("{}", expr.value)
//             BinaryExpr($expr) -> str.append_printables("({} {} {})", [&expr.left, &expr.op, &expr.right])
//             UnaryExpr($expr)  -> str.append_printables("{}{}", [&expr.op, &expr.sub])
//             MoveExpr($expr)   -> str.append_printables("({} <- {})", [&expr.target, &expr.source])
//             PipeExpr($expr)   -> str.append_printables("{} | {}", [&expr.left, &expr.right])
//         }
//     }
// }

// impl Printable for Stmt {
//     print :: (ref Self, str: ref String, format: string) {
//         match self {
//             DeclStmt($stmt) -> {
//                 str.append_printables("{} :", [&stmt.pattern])

//                 match ref stmt.typ {
//                     Some($expr) -> {
//                         str.append_printables(" {} ", [&expr])
//                     }
//                 }

//                 str.append_char(if stmt.is_const then ':' else '=')

//                 match ref stmt.init {
//                     Some($expr) -> {
//                         str.append_printables(" {}", [&expr])
//                     }
//                 }
//             }

//             UseStmt($stmt) -> {
//                 str.append_printables("use {}", [&stmt.expr])
//             }
//         }
//     }
// }
