use import std.printable
use import std.string
use import std.array

use import interpreter
use import lexer
use import scope
use import types
use import value

#export_scope

AstNodeFlags :: enum #flags {
    None
    LValue
    IsDefinedInScope
    AllowPubModifier
    OnlyPubDeclarations
}

__uiaeuiaeuiae := @type_info(AstNodeFlags)

AstNode :: trait {
    id       : int = -1
    location : Location
    scope    : ^Scope = null
    typ      : ^TypeInfo = null
    value    : Value = Value.None
    flags    : int = 0
}

impl AstNode {
    set_flags :: (&Self, flags: AstNodeFlags) {
        self.flags = @bin_or(self.flags, int(flags))
    }

    clear_flags :: (&Self, flags: AstNodeFlags) {
        self.flags = @bin_and(self.flags, @bin_not(int(flags)))
    }

    has_flags :: (&Self, flags: AstNodeFlags) -> bool {
        return @bin_and(self.flags, int(flags)) == int(flags)
    }
}

// statements
AstConstDecl :: struct AstNode {
    pattern     : &AstNode
    type_expr   : ^AstNode
    value_expr  : &AstNode

    public      : bool = false

    var_type    : ^TypeInfo = null
}
impl AstNode for AstConstDecl {}

AstDecl :: struct AstNode {
    pattern     : ^AstNode
    type_expr   : ^AstNode
    value_expr  : ^AstNode

    mutable     : bool = false
    public      : bool = false

    name        : string = "_"
    var_type    : ^TypeInfo = null
}
impl AstNode for AstDecl {}

AstImport :: struct AstNode {
    path : &AstNode
}
impl AstNode for AstImport {}

AstUse :: struct AstNode {
    value_expr : &AstNode
}
impl AstNode for AstUse {}

AstImpl :: struct AstNode {
    target_expr : &AstNode
    trait_expr  : ^AstNode
    children    : Array[^AstNode]
}
impl AstNode for AstImpl {}

// expressions

AstStruct :: struct AstNode {
    name        := "#anonymous"
    trait_expr  : ^AstNode
    children    : Array[^AstNode]

    sub_scope   : ^Scope = null
    struct_type : ^TypeInfo = null
    members     := Array[^AstDecl].create()
    constants   := Array[^AstConstDecl].create()

    // flags
    members_done := false
}
impl AstNode for AstStruct {}

AstTrait :: struct AstNode {
    name        := "#anonymous"
    children    : Array[^AstNode]

    sub_scope   : ^Scope = null
    trait_type  : ^TypeInfo = null
    members     := Array[^AstDecl].create()
    functions   := Array[^AstConstDecl].create()

    // flags
    members_done := false
}
impl AstNode for AstTrait {}

AstEnum :: struct AstNode {
    name        := "#anonymous"
    children    : Array[^AstNode]

    sub_scope   : ^Scope = null
    enum_type   : ^TypeInfo = null
    members     := Array[^AstDecl].create()

    // flags
    members_done := false
}
impl AstNode for AstEnum {}

AstFunction :: struct AstNode {
    params              : Array[^AstDecl]
    body                : ^AstNode
    return_type_expr    : ^AstNode

    param_scope         : ^Scope
    name                := "#anonymous"
    return_type         : ^TypeInfo = null

    bytecode            : ^CBCFunction = null
}
impl AstNode for AstFunction {}

AstPoly :: struct AstNode {
    params      : Array[^AstDecl]
    value_expr  : &AstNode

    param_scope : ^Scope
    name        := "#anonymous"
}
impl AstNode for AstPoly {}

AstArgument :: struct AstNode {
    name        : ^AstIdentifier
    value_expr  : &AstNode
}
impl AstNode for AstArgument {}

AstBlock :: struct AstNode {
    sub_scope   : ^Scope
    children    : Array[^AstNode]
}
impl AstNode for AstBlock {}

AstCast :: struct AstNode {
    type_expr   : ^AstNode
    value_expr  : &AstNode
}
impl AstNode for AstCast {}

AstCall :: struct AstNode {
    function        : &AstNode
    arguments       : Array[^AstArgument]
    ast_function    : ^AstFunction = null
}
impl AstNode for AstCall {}

AstIdentifier :: struct AstNode {
    name    : string
    symbol  := Symbol.NotFound
}
impl AstNode for AstIdentifier {}

AstNumberLiteral :: struct AstNode {
}
impl AstNode for AstNumberLiteral {}

AstString :: struct AstNode {
    string_value : string
}
impl AstNode for AstString {}

AstBool :: struct AstNode {
    bool_value : bool
}
impl AstNode for AstBool {}

AstNull :: struct AstNode {
    
}
impl AstNode for AstNull {}

AstBinary :: struct AstNode {
    operator    : BinOp
    left        : &AstNode
    right       : &AstNode

    BinOp :: enum #copy { Add, Sub, Mul, Div, Mod, And, Or, Less, LessEq, Greater, GreaterEq, Equal, NotEqual, Move, Pipe, Range, RangeIncl }
}
impl AstNode for AstBinary {}

AstUnary :: struct AstNode {
    operator    : UnOp
    sub         : &AstNode

    UnOp :: enum #copy { Neg, Not, Ref, RefMut, Ptr, PtrMut, Deref }
}
impl AstNode for AstUnary {}

AstAssignment :: struct AstNode {
    pattern     : &AstNode
    value_expr  : &AstNode
}
impl AstNode for AstAssignment {}

AstIf :: struct AstNode {
    condition   : &AstNode
    true_case   : &AstNode
    false_case  : ^AstNode
}
impl AstNode for AstIf {}

AstFor :: struct AstNode {
    it_pattern  : ^AstNode
    index_name  : ^AstIdentifier
    collection  : &AstNode
    body        : &AstNode
}
impl AstNode for AstFor {}

AstLoop :: struct AstNode {
    body : &AstNode
}
impl AstNode for AstLoop {}

AstMatch :: struct AstNode {
    value_expr  : ^AstNode
    cases       : Array[^AstMatchCase]
}
impl AstNode for AstMatch {}

AstMatchCase :: struct {
    pattern     : &AstNode
    condition   : ^AstNode
    body        : &AstNode
}

AstBreak :: struct AstNode {
    label       : ^AstIdentifier
    value_expr  : ^AstNode
}
impl AstNode for AstBreak {}

AstContinue :: struct AstNode {
    label : ^AstIdentifier
}
impl AstNode for AstContinue {}

AstReturn :: struct AstNode {
    value_expr : ^AstNode
}
impl AstNode for AstReturn {}

AstDefer :: struct AstNode {
    sub : &AstNode
}
impl AstNode for AstDefer {}

AstTuple :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstTuple {}

AstArray :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstArray {}

AstArrayType :: struct AstNode {
    count   : ^AstNode
    target  : &AstNode
}
impl AstNode for AstArrayType {}

AstDot :: struct AstNode {
    sub     : ^AstNode
    name    : &AstIdentifier

    symbol  := Symbol.NotFound
}
impl AstNode for AstDot {}

AstIndex :: struct AstNode {
    sub         : &AstNode
    arguments   : Array[^AstArgument]
    index       : ^AstNode
}
impl AstNode for AstIndex {}

AstUfc :: struct AstNode {
    value_expr  : &AstNode
    symbol      : Symbol
}

// impl AstFunction {
//     get_parameter :: (&Self, name: string) -> Option[&AstDecl] {
//         for p in params {
//             match p.name {
//                 AstIdentifier($)
//             }
//             if p.name.name == name {
//                 return Some(*p)
//             }
//         }
//         return None
//     }
// }

impl AstBinary.BinOp {
    lexeme :: (Self) -> string {
        return match self {
            .Add        -> "+"
            .Sub        -> "-"
            .Mul        -> "*"
            .Div        -> "/"
            .Mod        -> "%"
            .And        -> "and"
            .Or         -> "or"
            .Less       -> "<"
            .LessEq     -> "<="
            .Greater    -> ">"
            .GreaterEq  -> ">="
            .Equal      -> "=="
            .NotEqual   -> "!="
            .Move       -> "<-"
            .Pipe       -> "|"
            .Range      -> ".."
            .RangeIncl  -> "..="

            _ -> @assert(false)
        }
    }
}

impl AstUnary.UnOp {
    lexeme :: (Self) -> string {
        return match self {
            .Neg    -> "-"
            .Not    -> "!"
            .Ref    -> "&"
            .RefMut -> "&mut "
            .Ptr    -> "^"
            .PtrMut -> "^mut "
            .Deref  -> "*"
            _       -> @assert(false)
        }
    }
}
