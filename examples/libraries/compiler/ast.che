use import lexer

use import std.printable
use import std.string

#export_scope

Stmt :: struct {
    concrete    : StmtType
}

StmtType :: enum {
    Func    : FunctionDecl
}

impl Printable for Stmt {
    print :: (ref Self, str: ref String, format: string) {
        use StmtType
        match concrete {
            Func($func) -> {
                str.appendf("fn {}() ``{``}", func.name)
            }
        }
    }
}

FunctionDecl :: struct {
    name    : string
}


// expressions
Expr :: struct #extendable {
    id  : int
    location    : Location

}

IdExpr :: struct #extend(Expr) {
    name : string
}

NumberExpr :: struct #extend(Expr) {
    value : int
}

BinaryExpr :: struct #extend(Expr) {
    op    : Operator
    left  : ref Expr
    right : ref Expr

    Operator :: enum { Add, Sub, Mul, Div }
}

UnaryExpr :: struct #extend(Expr) {
    op  : Operator
    sub : ref Expr

    Operator :: enum { Neg, Not }
}

impl Printable for Expr {
    print :: (ref Self, str: ref String, format: string) {
        match self {
            IdExpr($expr) -> str.appendf("Id({})", expr.name)
        }
    }
}
