use import std.printable
use import std.string
use import std.array

use import lexer
use import type
use import interpreter
use import scope
use import value

#export_scope

AstNode :: trait {
    id       : int
    location : Location
    scope    : ^Scope = null
    typ      : ^TypeInfo = null
    value    : Value = Value.None
}

// statements
AstConstDecl :: struct AstNode {
    pattern     : &AstNode
    type_expr   : ^AstNode
    value_expr  : &AstNode
}
impl AstNode for AstConstDecl {}

AstDecl :: struct AstNode {
    pattern     : &AstNode
    type_expr   : ^AstNode
    value_expr  : ^AstNode
}
impl AstNode for AstDecl {}

AstImport :: struct AstNode {
    path : &AstNode
}
impl AstNode for AstImport {}

// expressions

AstStruct :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstStruct {}

AstTrait :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstTrait {}

AstEnum :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstEnum {}

AstFunction :: struct AstNode {
    param_scope : ^Scope
    name        := "#anonymous"

    params      : Array[^AstParameter]
    body        : ^AstNode

    bytecode    : ^CBCFunction = null
}
impl AstNode for AstFunction {}

AstArgument :: struct AstNode {
    name        : ^AstIdentifier
    value_expr  : &AstNode
}
impl AstNode for AstArgument {}

AstParameter :: struct AstNode {
    name            : &AstIdentifier
    type_expr       : ^AstNode
    default_value   : ^AstNode
}
impl AstNode for AstParameter {}

AstBlock :: struct AstNode {
    sub_scope   : ^Scope
    children    : Array[^AstNode]
}
impl AstNode for AstBlock {}

AstCall :: struct AstNode {
    function        : &AstNode
    arguments       : Array[^AstArgument]
    ast_function    : ^AstFunction = null
}
impl AstNode for AstCall {}

AstIdentifier :: struct AstNode {
    name : string
}
impl AstNode for AstIdentifier {}

AstNumberLiteral :: struct AstNode {
    int_value : int
}
impl AstNode for AstNumberLiteral {}

AstString :: struct AstNode {
    string_value : string
}
impl AstNode for AstString {}

AstBool :: struct AstNode {
    bool_value : bool
}
impl AstNode for AstBool {}

AstNull :: struct AstNode {
    
}
impl AstNode for AstNull {}

AstBinary :: struct AstNode {
    operator    : BinOp
    left        : &AstNode
    right       : &AstNode

    BinOp :: enum #copy { Add, Sub, Mul, Div, Mod, And, Or, Less, LessEq, Greater, GreaterEq, Equal, NotEqual, Assign, Move, Pipe, Range, RangeIncl }
}
impl AstNode for AstBinary {}

AstUnary :: struct AstNode {
    operator    : UnOp
    sub         : &AstNode

    UnOp :: enum #copy { Neg, Not }
}
impl AstNode for AstUnary {}

AstAssignment :: struct AstNode {
    pattern     : &AstNode
    value_expr  : &AstNode
}
impl AstNode for AstAssignment {}

AstMove :: struct AstNode {
    target : &AstNode
    source : &AstNode
}
impl AstNode for AstMove {}

AstPipe :: struct AstNode {
    left  : &AstNode
    right : &AstNode
}
impl AstNode for AstPipe {}

AstIf :: struct AstNode {
    condition   : &AstNode
    true_case   : &AstNode
    false_case  : ^AstNode
}
impl AstNode for AstIf {}

AstFor :: struct AstNode {
    it_name     : ^AstIdentifier
    index_name  : ^AstIdentifier
    collection  : &AstNode
    body        : &AstNode
}
impl AstNode for AstFor {}

AstLoop :: struct AstNode {
    body : &AstNode
}
impl AstNode for AstLoop {}

AstMatch :: struct AstNode {
    value_expr  : &AstNode
    // @todo: cases
}
impl AstNode for AstMatch {}

AstBreak :: struct AstNode {
    label       : ^AstIdentifier
    value_expr  : ^AstNode
}
impl AstNode for AstBreak {}

AstContinue :: struct AstNode {
    label : ^AstIdentifier
}
impl AstNode for AstContinue {}

AstReturn :: struct AstNode {
    value_expr : ^AstNode
}
impl AstNode for AstReturn {}

AstDefer :: struct AstNode {
    sub : &AstNode
}
impl AstNode for AstDefer {}

AstTuple :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstTuple {}

AstArray :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstArray {}

AstDot :: struct AstNode {
    name    : &AstIdentifier
    sub     : ^AstNode
}
impl AstNode for AstDot {}

AstIndex :: struct AstNode {
    sub     : &AstNode
    name    : &AstNode
}
impl AstNode for AstIndex {}

AstRange :: struct AstNode {
    from    : ^AstNode
    to      : ^AstNode
}
impl AstNode for AstRange {}

impl AstFunction {
    get_parameter :: (&Self, name: string) -> Option[&AstParameter] {
        for p : params {
            if p.name.name == name {
                return Some(<<p)
            }
        }
        return None
    }
}

impl AstBinary.BinOp {
    lexeme :: (Self) -> string {
        return match self {
            .Add        -> "+"
            .Sub        -> "-"
            .Mul        -> "*"
            .Div        -> "/"
            .Mod        -> "%"
            .And        -> "and"
            .Or         -> "or"
            .Less       -> "<"
            .LessEq     -> "<="
            .Greater    -> ">"
            .GreaterEq  -> ">="
            .Equal      -> "=="
            .NotEqual   -> "!="
            .Assign     -> "="
            .Move       -> "<-"
            .Pipe       -> "|"
            .Range      -> ".."
            .RangeIncl  -> "..="

            _ -> @assert(false)
        }
    }
}

impl AstUnary.UnOp {
    lexeme :: (Self) -> string {
        return match self {
            .Neg -> "-"
            .Not -> "!"
            _ -> @assert(false)
        }
    }
}

// impl Printable for AstNode {
//     print :: (&Self, str: &String, format: string) {
//         match self {
//             AstIdentifier($expr)     -> str.appendf("{}", expr.name)
//             AstNumberLiteral($expr) -> str.appendf("{}", expr.value)
//             BinaryExpr($expr) -> str.append_printables("({} {} {})", [^expr.left, ^expr.op, ^expr.right])
//             UnaryExpr($expr)  -> str.append_printables("{}{}", [^expr.op, ^expr.sub])
//             MoveExpr($expr)   -> str.append_printables("({} <- {})", [^expr.target, ^expr.source])
//             PipeExpr($expr)   -> str.append_printables("{} | {}", [^expr.left, ^expr.right])
//         }
//     }
// }

// impl Printable for Stmt {
//     print :: (&Self, str: &String, format: string) {
//         match self {
//             DeclStmt($stmt) -> {
//                 str.append_printables("{} :", [^stmt.pattern])

//                 match &stmt.typ {
//                     Some($expr) -> {
//                         str.append_printables(" {} ", [^expr])
//                     }
//                 }

//                 str.append_char(if stmt.is_const then ':' else '=')

//                 match &stmt.init {
//                     Some($expr) -> {
//                         str.append_printables(" {}", [^expr])
//                     }
//                 }
//             }

//             UseStmt($stmt) -> {
//                 str.append_printables("use {}", [^stmt.expr])
//             }
//         }
//     }
// }
