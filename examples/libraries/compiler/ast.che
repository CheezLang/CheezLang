use import std.printable
use import std.string
use import std.array

use import interpreter
use import lexer
use import scope
use import types
use import value

#export_scope

AstNode :: trait {
    id       : int
    location : Location
    scope    : ^Scope = null
    typ      : ^TypeInfo = null
    value    : Value = Value.None
}

// statements
AstConstDecl :: struct AstNode {
    pattern     : &AstNode
    type_expr   : ^AstNode
    value_expr  : &AstNode

    var_type    : ^TypeInfo = null
}
impl AstNode for AstConstDecl {}

AstDecl :: struct AstNode {
    pattern     : ^AstNode
    type_expr   : ^AstNode
    value_expr  : ^AstNode

    name        : string = "_"
    var_type    : ^TypeInfo = null
}
impl AstNode for AstDecl {}

AstImport :: struct AstNode {
    path : &AstNode
}
impl AstNode for AstImport {}

// expressions

AstStruct :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstStruct {}

AstTrait :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstTrait {}

AstEnum :: struct AstNode {
    name        := "#anonymous"
}
impl AstNode for AstEnum {}

AstFunction :: struct AstNode {
    params              : Array[^AstDecl]
    body                : ^AstNode
    return_type_expr    : ^AstNode

    param_scope         : ^Scope
    name                := "#anonymous"
    return_type         : ^TypeInfo = null

    bytecode            : ^CBCFunction = null
}
impl AstNode for AstFunction {}

AstArgument :: struct AstNode {
    name        : ^AstIdentifier
    value_expr  : &AstNode
}
impl AstNode for AstArgument {}

AstBlock :: struct AstNode {
    sub_scope   : ^Scope
    children    : Array[^AstNode]
}
impl AstNode for AstBlock {}

AstCall :: struct AstNode {
    function        : &AstNode
    arguments       : Array[^AstArgument]
    ast_function    : ^AstFunction = null
}
impl AstNode for AstCall {}

AstIdentifier :: struct AstNode {
    name    : string
    symbol  := Symbol.NotFound
}
impl AstNode for AstIdentifier {}

AstNumberLiteral :: struct AstNode {
}
impl AstNode for AstNumberLiteral {}

AstString :: struct AstNode {
    string_value : string
}
impl AstNode for AstString {}

AstBool :: struct AstNode {
    bool_value : bool
}
impl AstNode for AstBool {}

AstNull :: struct AstNode {
    
}
impl AstNode for AstNull {}

AstBinary :: struct AstNode {
    operator    : BinOp
    left        : &AstNode
    right       : &AstNode

    BinOp :: enum #copy { Add, Sub, Mul, Div, Mod, And, Or, Less, LessEq, Greater, GreaterEq, Equal, NotEqual, Assign, Move, Pipe, Range, RangeIncl }
}
impl AstNode for AstBinary {}

AstUnary :: struct AstNode {
    operator    : UnOp
    sub         : &AstNode

    UnOp :: enum #copy { Neg, Not, Ref, RefMut, Ptr, Deref }
}
impl AstNode for AstUnary {}

AstAssignment :: struct AstNode {
    pattern     : &AstNode
    value_expr  : &AstNode
}
impl AstNode for AstAssignment {}

AstIf :: struct AstNode {
    condition   : &AstNode
    true_case   : &AstNode
    false_case  : ^AstNode
}
impl AstNode for AstIf {}

AstFor :: struct AstNode {
    it_name     : ^AstIdentifier
    index_name  : ^AstIdentifier
    collection  : &AstNode
    body        : &AstNode
}
impl AstNode for AstFor {}

AstLoop :: struct AstNode {
    body : &AstNode
}
impl AstNode for AstLoop {}

AstMatch :: struct AstNode {
    value_expr  : &AstNode
    // @todo: cases
}
impl AstNode for AstMatch {}

AstBreak :: struct AstNode {
    label       : ^AstIdentifier
    value_expr  : ^AstNode
}
impl AstNode for AstBreak {}

AstContinue :: struct AstNode {
    label : ^AstIdentifier
}
impl AstNode for AstContinue {}

AstReturn :: struct AstNode {
    value_expr : ^AstNode
}
impl AstNode for AstReturn {}

AstDefer :: struct AstNode {
    sub : &AstNode
}
impl AstNode for AstDefer {}

AstTuple :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstTuple {}

AstArray :: struct AstNode {
    values : Array[^AstNode]
}
impl AstNode for AstArray {}

AstArrayType :: struct AstNode {
    size : ^AstNode
}
impl AstNode for AstArrayType {}

AstDot :: struct AstNode {
    sub     : ^AstNode
    name    : &AstIdentifier
}
impl AstNode for AstDot {}

AstIndex :: struct AstNode {
    sub     : &AstNode
    index   : &AstNode
}
impl AstNode for AstIndex {}

// impl AstFunction {
//     get_parameter :: (&Self, name: string) -> Option[&AstDecl] {
//         for p : params {
//             match p.name {
//                 AstIdentifier($)
//             }
//             if p.name.name == name {
//                 return Some(<<p)
//             }
//         }
//         return None
//     }
// }

impl AstBinary.BinOp {
    lexeme :: (Self) -> string {
        return match self {
            .Add        -> "+"
            .Sub        -> "-"
            .Mul        -> "*"
            .Div        -> "/"
            .Mod        -> "%"
            .And        -> "and"
            .Or         -> "or"
            .Less       -> "<"
            .LessEq     -> "<="
            .Greater    -> ">"
            .GreaterEq  -> ">="
            .Equal      -> "=="
            .NotEqual   -> "!="
            .Assign     -> "="
            .Move       -> "<-"
            .Pipe       -> "|"
            .Range      -> ".."
            .RangeIncl  -> "..="

            _ -> @assert(false)
        }
    }
}

impl AstUnary.UnOp {
    lexeme :: (Self) -> string {
        return match self {
            .Neg    -> "-"
            .Not    -> "!"
            .Ref    -> "&"
            .RefMut -> "&mut "
            .Ptr    -> "^"
            _       -> @assert(false)
        }
    }
}
