use import std.string
use import std.hash
use import std.hash_table
use import std.mem.allocator
use import std.mem.arena_allocator
C :: import std.c

#export_scope

impl string {
    same :: (a: Self, b: Self) -> bool {
        return a.bytes.length == b.bytes.length and a.bytes.data == b.bytes.data
    }
}

StringDatabase :: struct {
    pool    : ArenaAllocator
    db      : Table[string, string]
}

impl StringDatabase {
    new :: () -> Self {
        sdb := Self(
            pool    = ArenaAllocator.new(1024),
            db      = Table[string, string].create(strings_equal)
        )

        return sdb
    }

    intern :: (&Self, str: string) -> string {
        return match db.get(str) {
            Some($s) -> *s
            None -> {
                // create string in pool
                str_in_pool := {
                    mem := alloc_n(u8, cast str.bytes.length, ^pool)
                    string(mem.data, mem.length)
                }
                C.memcpy(str_in_pool.bytes.data, str.bytes.data, cast str.bytes.length)
                db.set(str_in_pool, str_in_pool)
                str_in_pool
            }
        }
    }
}