use import std.array
use import std.map
use import std.rc
use import std.string

mem :: import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt

use import logging.logger

use import ast
use import ast_dumper
use import error_handler
use import types
use import interpreter
use import string_database
use import value

#export_scope

CodeGenerator :: trait {
    generate_code_for_function :: (&Self, func: ^AstFunction);
}

ByteCodeGenerator :: struct {
    strings         : &StringDatabase
    error_handler   : &ErrorHandler
    allocator       : ^mem.Allocator
    builder         : InstructionBuilder

    variables       := Map[int, int].new()

    function        : ^AstFunction = null
}

impl ByteCodeGenerator {
    new :: (strings: &StringDatabase, error_handler: &ErrorHandler, allocator: ^mem.Allocator) -> Rc[ByteCodeGenerator] {
        return Rc[ByteCodeGenerator].new(ByteCodeGenerator(
            strings         = strings
            error_handler   = error_handler
            allocator       = allocator
            builder         = InstructionBuilder.new(strings)
        ))
    }

    allocate_function :: (&Self, name: string, path: string) -> ^CBCFunction {
        func := mem.alloc(CBCFunction, allocator)
        <<func = CBCFunction(
            ast_function = function
            debug_info = CBCDebugInfo(
                path       = path.to_owned()
            )
        )
        return func
    }
}

impl CodeGenerator for ByteCodeGenerator {
    generate_code_for_function :: (&Self, func: ^AstFunction) {
        if function != null {
            error_handler.report_error_at(
                func.location,
                "Failed to generate code for this function because we're already generating code for another function at {}",
                [function.location])
            return
        }

        function = func
        defer function <- null

        file_path := func.location.file
        cbc_func := self.allocate_function(func.name, file_path)
        builder.begin_function(cbc_func)

        slot_index := 0
        for(reverse=true) param : func.params {
            slot_index -= (param.var_type.size + 7) / 8
            variables[param.id] = slot_index
            cbc_func.debug_info.params.add(VariableInfo(param.id, param.name, slot_index))
        }
        cbc_func.parameter_slots = -slot_index

        generate_expression(<<func.body)
        builder.set_current_line(func.body.location.end_line)
        builder.build_return_void()

        builder.end_function()

        func.bytecode = cbc_func
    }

    generate_expression :: (&Self, node: &AstNode) {
        builder.set_current_line(node.location.line)
        match node {
            AstArgument($arg)       -> generate_argument(arg)
            AstBinary($bin)         -> generate_binary(bin)
            AstUnary($un)           -> generate_unary(un)
            AstBlock($block)        -> generate_block(block)
            AstBool($bol)           -> generate_bool(bol)
            AstBreak($brake)        -> generate_break(brake)
            AstCall($call)          -> generate_call(call)
            AstContinue($cont)      -> generate_continue(cont)
            AstDecl($decl)          -> generate_decl(decl)
            AstDefer($def)          -> generate_defer(def)
            AstFor($forr)           -> generate_for(forr)
            AstIdentifier($id)      -> generate_identifier(id)
            AstIf($iff)             -> generate_if(iff)
            AstLoop($lop)           -> generate_loop(lop)
            AstNumberLiteral($num)  -> generate_number_literal(num)
            AstReturn($ret)         -> generate_return(ret)
            AstString($str)         -> generate_string(str)

            _ -> {
                dump := dump_ast(node, recurse = false)
                error_handler.report_error(
                    "generate_expression: not implemented: {}",
                    [dump])
            }
        }
    }

    generate_decl :: (&Self, decl: &AstDecl) {
        builder.set_current_line(decl.location.line)
        builder.build_noop()

        index := builder.add_local(decl.id, decl.name, decl.var_type.size)
        variables[decl.id] = index

        if decl.value_expr != null {
            generate_expression(<<decl.value_expr)
            builder.build_store_local(index)
        }
    }

    generate_unary :: (&Self, un: &AstUnary) {
        generate_expression(un.sub)
        builder.set_current_line(un.location.line)
        match un.operator {
            .Not -> builder.build_not()
            .Neg -> builder.build_neg(type_info_to_inst_number_type(un.sub.typ))

            _ -> error_handler.report_error_at(un.location, "Code gen for unary not implemented")
        }
    }

    type_info_to_inst_number_type :: (&Self, type_info: ^TypeInfo) -> InstNumTyp {
        return match &<<type_info {
            TypeInfoInt($ti) -> match ti.size, ti.signed {
                (1, true)   -> .I8
                (2, true)   -> .I16
                (4, true)   -> .I32
                (8, true)   -> .I64
                (1, false)  -> .U8
                (2, false)  -> .U16
                (4, false)  -> .U32
                (8, false)  -> .U64
                _ -> @assert(false)
            }
            TypeInfoFloat($ti) -> match ti.size {
                4 -> .F32
                8 -> .F64
                _ -> @assert(false)
            }
            _ -> @assert(false)
        }
    }

    generate_binary :: (&Self, bin: &AstBinary) {
        generate_expression(bin.left)
        generate_expression(bin.right)
        builder.set_current_line(bin.location.line)
        match bin.operator {
            .Add        -> builder.build_add(type_info_to_inst_number_type(bin.typ))
            .Sub        -> builder.build_sub(type_info_to_inst_number_type(bin.typ))
            .Mul        -> builder.build_mul(type_info_to_inst_number_type(bin.typ))
            .Div        -> builder.build_div(type_info_to_inst_number_type(bin.typ))
            .Mod        -> builder.build_mod(type_info_to_inst_number_type(bin.typ))
            
            .Equal      -> builder.build_ieq(type_info_to_inst_number_type(bin.left.typ))
            .NotEqual   -> builder.build_ine(type_info_to_inst_number_type(bin.left.typ))
            .Less       -> builder.build_ilt(type_info_to_inst_number_type(bin.left.typ))
            .LessEq     -> builder.build_ile(type_info_to_inst_number_type(bin.left.typ))
            .Greater    -> builder.build_igt(type_info_to_inst_number_type(bin.left.typ))
            .GreaterEq  -> builder.build_ige(type_info_to_inst_number_type(bin.left.typ))

            .And        -> builder.build_and()
            .Or         -> builder.build_or()

            .Assign     -> {
                error_handler.report_error_at(bin.location, "Binary operator {} implemented", [bin.operator])
            }

            .Move       -> {
                error_handler.report_error_at(bin.location, "Binary operator {} implemented", [bin.operator])
            }

            .Pipe       -> {
                error_handler.report_error_at(bin.location, "Binary operator {} implemented", [bin.operator])
            }

            .Range      -> {
                error_handler.report_error_at(bin.location, "Binary operator {} implemented", [bin.operator])
            }

            .RangeIncl  -> {
                error_handler.report_error_at(bin.location, "Binary operator {} implemented", [bin.operator])
            }
        }
    }

    generate_if :: (&Self, iff: &AstIf) {
        builder.set_current_line(iff.location.line)
        
        // condition
        generate_expression(iff.condition)
        br_true := builder.build_branch_if(0)

        // else case
        if iff.false_case != null {
            generate_expression(<<iff.false_case)
        } else {
            builder.set_current_line(iff.location.end_line)
            builder.build_const(0)
        }

        // builder.set_current_line(iff.location.end_line)
        br_end := builder.build_branch(0)

        // if case
        l_true := builder.next()
        generate_expression(iff.true_case)

        // end
        l_end := builder.next()

        // fix branches
        builder.fix_branch(br_true, l_true)
        builder.fix_branch(br_end, l_end)
    }

    generate_loop :: (&Self, lop: &AstLoop) {
        builder.set_current_line(lop.location.line)
        loop_start := builder.next()
        generate_expression(lop.body)
        builder.build_pop()
        builder.build_branch(loop_start)
    }

    generate_for :: (&Self, forr: &AstFor) {
        builder.set_current_line(forr.location.line)
        builder.build_const(0)
    }

    generate_break :: (&Self, brake: &AstBreak) {
        builder.set_current_line(brake.location.line)
        builder.build_const(0)
    }

    generate_continue :: (&Self, cont: &AstContinue) {
        builder.set_current_line(cont.location.line)
        builder.build_const(0)
    }

    generate_return :: (&Self, ret: &AstReturn) {
        builder.set_current_line(ret.location.line)

        if ret.value_expr != null {
            generate_expression(<<ret.value_expr)
            builder.set_current_line(ret.location.line)
            builder.build_return()
        } else {
            builder.build_return_void()
        }
    }

    generate_defer :: (&Self, def: &AstDefer) {
        builder.set_current_line(def.location.line)
        builder.build_const(0)
    }

    generate_bool :: (&Self, bol: &AstBool) {
        builder.set_current_line(bol.location.line)
        builder.build_const(if bol.bool_value then 1 else 0)
    }

    generate_string :: (&Self, str: &AstString) {
        // @todo
        builder.set_current_line(str.location.line)
        builder.build_const(-str.string_value.bytes.length)
    }

    generate_argument :: (&Self, arg: &AstArgument) {
        generate_expression(arg.value_expr)
    }

    generate_block :: (&Self, block: &AstBlock) {
        builder.set_current_line(block.location.line)
        for child : block.children {
            generate_expression(<<child)

            // pop value if not last and type is not void
            if it_index < block.children.count() - 1 and child.typ != @type_info(void) {
                builder.build_pop()
            }
        }
    }

    generate_call :: (&Self, call: &AstCall) {
        builder.set_current_line(call.location.line)
        builder.build_noop()

        match call.function.value {
            .Function($func) -> {
                for arg : call.arguments {
                    generate_expression(<<arg)
                }
                builder.set_current_line(call.location.line)
                builder.build_comp_call(call.ast_function)
            }

            .NativeFunc($func) -> {
                for arg : call.arguments {
                    generate_expression(<<arg)
                }
                builder.set_current_line(call.location.line)
                builder.build_native_call(func, call.arguments.count())
            }

            _ -> {
                error_handler.report_error_at(call.function.location, "Can't call {}", [call.function.value])
            }
        }
        // match call.function {
        //     AstIdentifier($id) -> {


        //         if id.name == "print" {
        //             for arg : call.arguments {
        //                 generate_expression(<<arg)
        //                 builder.set_current_line(call.location.line)
        //                 builder.build_print()
        //             }
        //         } else {
        //             for arg : call.arguments {
        //                 generate_expression(<<arg)
        //             }
        //             builder.set_current_line(call.location.line)
        //             builder.build_comp_call(call.ast_function)
        //         }
        //     }

        //     _ -> {
        //         error_handler.report_error_at(call.function.location, "Can't call non-identifier")
        //     }
        // }
    }

    generate_number_literal :: (&Self, num: &AstNumberLiteral) {
        builder.set_current_line(num.location.line)
        builder.build_const(num.int_value)
    }

    generate_identifier :: (&Self, id: &AstIdentifier) {
        builder.set_current_line(id.location.line)
        match id.symbol {
            .Decl($decl) -> match self.variables.get(decl.id) {
                Some($index) -> {
                    builder.build_load_local(index)
                }
                None -> {
                    msg :: "[FATAL] Failed to get index of declaration"
                    builder.build_panic(msg)
                    error_handler.report_error_at(id.location, msg)
                }
            }
        }
        // match function.get_parameter(id.name) {
        //     Some($param) -> {
        //         builder.build_load_local(-1)
        //     }

        //     None -> {
        //         msg := fmt.format("Unknown identifier '{}'", [id.name])
        //         error_handler.report_error_at(id.location, msg.slice())
        //         builder.build_panic(msg.slice())
        //     }
        // }
    }
}

InstructionBuilder :: struct {
    function        : ^CBCFunction
    current_line    : int
    strings         : &StringDatabase
}

impl InstructionBuilder {
    new :: (strings: &StringDatabase) -> InstructionBuilder {
        return InstructionBuilder(
            function        = null
            current_line    = -1
            strings         = strings
        )
    }

    begin_function :: (&Self, func: ^CBCFunction) {
        current_line = -1
        function = func
    }

    end_function :: (&Self) {
        function = null
    }

    code_view :: (&Self) -> []u64 {
        return function.instructions.slice()
    }

    fix_branch :: (&Self, branch: int, address: int) {
        function.instructions[branch] = u64(address)
    }

    set_current_line :: (&Self, line: int) {
        lines := &function.debug_info.lines
        if lines.count() > 0 and lines.peek_last().count == 0 {
            lines.peek_last().line = line
        } else if current_line != line {
            function.debug_info.lines.add(LineInfo(line, 0))
        }
        current_line = line
    }

    add_local :: (&Self, id: int, name: string, size: int) -> int {
        // size is in bytes, but the index is in stack slots, which are 8 bytes, so add 7 and divide by 8
        slots := (size + 7) / 8

        // debug info
        function.debug_info.locals.add(VariableInfo(id, name, function.local_slots))

        //
        current_size := function.local_slots
        function.local_slots += slots
        return current_size
    }

    next :: (&Self) -> int {
        return function.instructions.get_length()
    }

    add_debug_info_line :: () #macro #transparent {
        @assert(function.debug_info.lines.count() > 0)
        current_instruction_count := function.instructions.count()
        defer {
            new_instruction_count := function.instructions.count()
            function.debug_info.lines.peek_last().count += new_instruction_count - current_instruction_count
        }
    }

    build_noop :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Noop)
    }

    build_pop :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Pop)
    }

    build_const :: (&Self, value: int) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Const)
        function.instructions.add(<<cast(^u64)^value)
    }

    build_address_of :: (&Self, index: int) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.AddressOf)
        function.instructions.add(<<cast(^u64)^index)
    }

    build_load :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Load)
    }

    build_store :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Store)
    }

    build_load_local :: (&Self, index: int) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.LoadLocal)
        function.instructions.add(<<cast(^u64)^index)
    }

    build_store_local :: (&Self, index: int) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.StoreLocal)
        function.instructions.add(<<cast(^u64)^index)
    }

    build_add :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Add)
        function.instructions.add(cast typ)
    }

    build_sub :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Sub)
        function.instructions.add(cast typ)
    }

    build_mul :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Mul)
        function.instructions.add(cast typ)
    }

    build_div :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Div)
        function.instructions.add(cast typ)
    }

    build_mod :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Mod)
        function.instructions.add(cast typ)
    }

    build_and :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.And)
    }

    build_or :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Or)
    }

    build_neg :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Neg)
        function.instructions.add(cast typ)
    }

    build_not :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Not)
    }

    build_ieq :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Ieq)
        function.instructions.add(cast typ)
    }

    build_ine :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Ine)
        function.instructions.add(cast typ)
    }

    build_ilt :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Ilt)
        function.instructions.add(cast typ)
    }

    build_ile :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Ile)
        function.instructions.add(cast typ)
    }

    build_igt :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Igt)
        function.instructions.add(cast typ)
    }

    build_ige :: (&Self, typ: InstNumTyp) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Ige)
        function.instructions.add(cast typ)
    }

    build_branch :: (&Self, address: int) -> int {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Branch)
        function.instructions.add(cast address)
        return function.instructions.count() - 1
    }

    build_branch_if :: (&Self, address: int) -> int {
        add_debug_info_line()
        function.instructions.add(cast Instruction.BranchIf)
        function.instructions.add(cast address)
        return function.instructions.count() - 1
    }

    build_call :: (&Self, name: string, arity: int = 0) {
        add_debug_info_line()
        name = strings.intern(name)
        function.instructions.add(cast Instruction.Call)
        function.instructions.add(cast name.bytes.data)
        function.instructions.add(cast name.bytes.length)
        function.instructions.add(cast arity)
    }

    build_native_call :: (&Self, func: NativeFunction, arity: int) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.NativeCall)
        func, data := FatFunctions.destructure(func, u64, u64)
        function.instructions.add(func)
        function.instructions.add(data)
        function.instructions.add(cast arity)
    }

    build_comp_call :: (&Self, ast_func: ^AstFunction) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.CompCall)
        function.instructions.add(cast ast_func)
        function.instructions.add(0)
        function.instructions.add(0)
    }

    build_return :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Return)
    }

    build_return_void :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.ReturnVoid)
    }

    build_halt :: (&Self) {
        add_debug_info_line()
        function.instructions.add(cast Instruction.Halt)
    }

    build_panic :: (&Self, msg: string) {
        add_debug_info_line()
        msg = strings.intern(msg)
        function.instructions.add(cast Instruction.Panic)
        function.instructions.add(cast msg.bytes.data)
        function.instructions.add(cast msg.bytes.length)
    }
}