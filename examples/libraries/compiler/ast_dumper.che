use import std.string
use import std.array

use import compiler.ast

fmt :: import std.fmt

#export_scope

dump_ast :: (node: &AstNode, recurse: bool = true) -> String {
    result := String.empty()
    dump_ast_helper(&result, node, recurse, 0)
    return result
}

#file_scope

dump_ast_helper :: (result: &String, node: &AstNode, recurse: bool, indent: int) {
    print :: (msg: string, amount: int) #macro {
        for 0 .. amount {
            result += "  "
        }
        @link(result) += msg
    }

    print("", indent)

    match node {

        AstArgument($arg) -> {
            fmt.format_into(result, "AstArgument #{} ({})`n", [arg.id, arg.location])
            if recurse {
                if arg.name != null then
                    dump_ast_helper(result, &*arg.name, recurse, indent + 1)
                dump_ast_helper(result, arg.value_expr, recurse, indent + 1)
            }
        }

        AstAssignment($ass) -> {
            fmt.format_into(result, "AstAssignment #{} ({})`n", [ass.id, ass.location])
            if recurse {
                dump_ast_helper(result, ass.pattern, recurse, indent + 1)
                dump_ast_helper(result, ass.value_expr, recurse, indent + 1)
            }
        }

        AstArray($array) -> {
            fmt.format_into(result, "AstArray #{} ({})`n", [array.id, array.location])
            if recurse {
                for val in &array.values {
                    dump_ast_helper(result, &**val, recurse, indent + 1)
                }
            }
        }

        AstArrayType($array) -> {
            fmt.format_into(result, "AstArrayType #{} ({})`n", [array.id, array.location])
            if recurse {
                if array.count != null then
                    dump_ast_helper(result, &*array.count, recurse, indent + 1)
                dump_ast_helper(result, array.target, recurse, indent + 1)
            }
        }

        AstBinary($bin) -> {
            fmt.format_into(result, "AstBinary #{} {} ({})`n", [bin.id, bin.operator, bin.location])
            if recurse {
                dump_ast_helper(result, bin.left, recurse, indent + 1)
                dump_ast_helper(result, bin.right, recurse, indent + 1)
            }
        }

        AstBlock($block) -> {
            fmt.format_into(result, "AstBlock #{} ({})`n", [block.id, block.location])
            if recurse {
                for child in &block.children {
                    dump_ast_helper(result, &**child, recurse, indent + 1)
                }
            }
        }

        AstBool($num) -> {
            fmt.format_into(result, "AstBool #{} {} ({})`n", [num.id, num.bool_value, num.location])
        }

        AstBreak($brake) -> {
            fmt.format_into(result, "AstBreak #{} ({})`n", [brake.id, brake.location])
            if recurse {
                if brake.label != null then
                    dump_ast_helper(result, &*brake.label, recurse, indent + 1)
                if brake.value_expr != null then
                    dump_ast_helper(result, &*brake.value_expr, recurse, indent + 1)
            }
        }

        AstCall($call) -> {
            fmt.format_into(result, "AstCall #{} ({})`n", [call.id, call.location])
            if recurse {
                dump_ast_helper(result, call.function, recurse, indent + 1)
                for arg in &call.arguments {
                    dump_ast_helper(result, &**arg, recurse, indent + 1)
                }
            }
        }
        
        AstCast($cst) -> {
            fmt.format_into(result, "AstCast #{} ({})`n", [cst.id, cst.location])
            if recurse {
                if cst.type_expr != null then
                    dump_ast_helper(result, &*cst.type_expr, recurse, indent + 1)
                dump_ast_helper(result, cst.value_expr, recurse, indent + 1)
            }
        }

        AstConstDecl($decl) -> {
            fmt.format_into(result, "AstConstDecl #{} ({})`n", [decl.id, decl.location])
            if recurse {
                dump_ast_helper(result, decl.pattern, recurse, indent + 1)
                if decl.type_expr != null then
                    dump_ast_helper(result, &*decl.type_expr, recurse, indent + 1)
                dump_ast_helper(result, decl.value_expr, recurse, indent + 1)
            }
        }

        AstContinue($cont) -> {
            fmt.format_into(result, "AstContinue #{} ({})`n", [cont.id, cont.location])
            if recurse {
                if cont.label != null then
                    dump_ast_helper(result, &*cont.label, recurse, indent + 1)
            }
        }

        AstDecl($decl) -> {
            fmt.format_into(result, "AstDecl #{} ({}) {}`n", [decl.id, decl.location, if decl.mutable then "mut" else ""])
            if recurse {
                if decl.pattern != null then
                    dump_ast_helper(result, &*decl.pattern, recurse, indent + 1)
                if decl.type_expr != null then
                    dump_ast_helper(result, &*decl.type_expr, recurse, indent + 1)
                if decl.value_expr != null then
                    dump_ast_helper(result, &*decl.value_expr, recurse, indent + 1)
            }
        }

        AstDefer($def) -> {
            fmt.format_into(result, "AstDefer #{} ({})`n", [def.id, def.location])
            if recurse {
                dump_ast_helper(result, def.sub, recurse, indent + 1)
            }
        }

        AstDot($dot) -> {
            fmt.format_into(result, "AstDot #{} ({})`n", [dot.id, dot.location])
            if recurse {
                if dot.sub != null then
                    dump_ast_helper(result, &*dot.sub, recurse, indent + 1)
                dump_ast_helper(result, dot.name, recurse, indent + 1)
            }
        }
        
        AstEnum($str) -> {
            fmt.format_into(result, "AstEnum #{} ({})`n", [str.id, str.location])
            if recurse {
                for child in &str.children {
                    dump_ast_helper(result, &**child, recurse, indent + 1)
                }
            }
        }

        AstFor($forr) -> {
            fmt.format_into(result, "AstFor #{} ({})`n", [forr.id, forr.location])
            if recurse {
                if forr.it_pattern != null then
                    dump_ast_helper(result, &*forr.it_pattern, recurse, indent + 1)
                if forr.index_name != null then
                    dump_ast_helper(result, &*forr.index_name, recurse, indent + 1)
                dump_ast_helper(result, forr.collection, recurse, indent + 1)
                dump_ast_helper(result, forr.body, recurse, indent + 1)
            }
        }

        AstFunction($func) -> {
            fmt.format_into(result, "AstFunction #{} ({})`n", [func.id, func.location])
            if recurse {
                print("params:`n", indent + 1)
                for param in &func.params {
                    dump_ast_helper(result, &**param, recurse, indent + 2)
                }
                if func.return_type_expr != null {
                    print("return_type_expr:`n", indent + 1)
                    dump_ast_helper(result, &*func.return_type_expr, recurse, indent + 2)
                }
                if func.body != null {
                    print("body:`n", indent + 1)
                    dump_ast_helper(result, &*func.body, recurse, indent + 2)
                }
            }
        }

        AstIdentifier($id) -> {
            fmt.format_into(result, "AstIdentifier #{} '{}' ({})`n", [id.id, id.name, id.location])
        }

        AstIf($iff) -> {
            fmt.format_into(result, "AstIf #{} ({})`n", [iff.id, iff.location])
            if recurse {
                dump_ast_helper(result, iff.condition, recurse, indent + 1)
                dump_ast_helper(result, iff.true_case, recurse, indent + 1)
                if iff.false_case != null then
                    dump_ast_helper(result, &*iff.false_case, recurse, indent + 1)
            }
        }

        AstImpl($imp) -> {
            fmt.format_into(result, "AstImpl #{} ({})`n", [imp.id, imp.location])
            if recurse {
                if imp.trait_expr != null then
                    dump_ast_helper(result, &*imp.trait_expr, recurse, indent + 1)
                dump_ast_helper(result, imp.target_expr, recurse, indent + 1)
                for child in &imp.children {
                    dump_ast_helper(result, &**child, recurse, indent + 2)
                } 
            }
        }

        AstImport($imp) -> {
            fmt.format_into(result, "AstImport #{} ({})`n", [imp.id, imp.location])
            if recurse {
                dump_ast_helper(result, imp.path, recurse, indent + 1)
            }
        }

        AstIndex($node) -> {
            fmt.format_into(result, "AstIndex #{} ({})`n", [node.id, node.location])
            if recurse {
                dump_ast_helper(result, node.sub, recurse, indent + 1)
                for arg in &node.arguments {
                    dump_ast_helper(result, &**arg, recurse, indent + 1)
                }
            }
        }

        AstLoop($lop) -> {
            fmt.format_into(result, "AstLoop #{} ({})`n", [lop.id, lop.location])
            if recurse {
                dump_ast_helper(result, lop.body, recurse, indent + 1)
            }
        }

        AstMatch($mat) -> {
            fmt.format_into(result, "AstMatch #{} ({})`n", [mat.id, mat.location])
            if recurse {
                if mat.value_expr != null then
                    dump_ast_helper(result, &*mat.value_expr, recurse, indent + 1)
                    
                print("cases:`n", indent + 1)
                for case in &mat.cases {
                    print("pattern:`n", indent + 2)
                    dump_ast_helper(result, case.pattern, recurse, indent + 3)
                    if case.condition != null {
                        print("condition:`n", indent + 2)
                        dump_ast_helper(result, &*case.condition, recurse, indent + 3)
                    }
                    print("body:`n", indent + 2)
                    dump_ast_helper(result, case.body, recurse, indent + 3)
                }
            }
        }

        AstNull($num) -> {
            fmt.format_into(result, "AstNull #{} ({})`n", [num.id, num.location])
        }

        AstNumberLiteral($num) -> {
            fmt.format_into(result, "AstNumberLiteral #{} {} ({})`n", [num.id, num.value, num.location])
        }

        AstPoly($poly) -> {
            fmt.format_into(result, "AstPoly #{} ({})`n", [poly.id, poly.location])
            if recurse {
                for param in &poly.params {
                    dump_ast_helper(result, &**param, recurse, indent + 2)
                }
                dump_ast_helper(result, poly.value_expr, recurse, indent + 1)
            }
        }

        AstReturn($ret) -> {
            fmt.format_into(result, "AstReturn #{} ({})`n", [ret.id, ret.location])
            if recurse {
                if ret.value_expr != null then
                    dump_ast_helper(result, &*ret.value_expr, recurse, indent + 1)
            }
        }

        AstString($num) -> {
            fmt.format_into(result, "AstString #{} '{}' ({})`n", [num.id, num.string_value, num.location])
        }
        
        AstStruct($str) -> {
            fmt.format_into(result, "AstStruct #{} ({})`n", [str.id, str.location])
            if recurse {
                if str.trait_expr != null then
                    dump_ast_helper(result, &*str.trait_expr, recurse, indent + 2)
                print("children:", indent + 1)
                for child in &str.children {
                    dump_ast_helper(result, &**child, recurse, indent + 2)
                }
            }
        }
        
        AstTrait($str) -> {
            fmt.format_into(result, "AstTrait #{} ({})`n", [str.id, str.location])
            if recurse {
                for child in &str.children {
                    dump_ast_helper(result, &**child, recurse, indent + 1)
                }
            }
        }

        AstTuple($tuple) -> {
            fmt.format_into(result, "AstTuple #{} ({})`n", [tuple.id, tuple.location])
            if recurse {
                for val in &tuple.values {
                    dump_ast_helper(result, &**val, recurse, indent + 1)
                }
            }
        }
        
        AstUfc($ufc) -> {
            fmt.format_into(result, "AstUfc #{} ({})`n", [ufc.id, ufc.location])
            if recurse {
                dump_ast_helper(result, ufc.value_expr, recurse, indent + 1)
            }
        }

        AstUnary($un) -> {
            fmt.format_into(result, "AstUnary #{} {} ({})`n", [un.id, un.operator, un.location])
            if recurse {
                dump_ast_helper(result, un.sub, recurse, indent + 1)
            }
        }

        AstUse($us) -> {
            fmt.format_into(result, "AstUse #{} ({})`n", [us.id, us.location])
            if recurse {
                dump_ast_helper(result, us.value_expr, recurse, indent + 1)
            }
        }

        $node -> {
            // if ^node == null {
            //     @assert(false)
            // }
            // fmt.format_into(result, "[ERROR] {}: node type not implemented: {}`n", [0, ^node])
            fmt.format_into(result, "[ERROR] {}: node type not implemented`n", [0])
        }
    }
}
