use import ast
use import lexer
use import cheez_compiler

use import std.mem.allocator
io :: import std.io

#export_scope

Parser :: struct {
    compiler    : ref CheezCompiler
    lexer       : ref Lexer
}

impl Parser {
    create :: (c: ref CheezCompiler, l: ref Lexer) -> Self {
        return Parser(
            compiler = c
            lexer = l
        )
    }

    parse_statement :: (ref Self) -> Option[&Stmt] {
        skip_ws()
        token := lexer.peek_token()
        return match token.ttype {
            TokenType.EOF -> None

            $_ -> {
                io.printfln("{}: unexpeted token {}", (token.location, token.ttype))
                None
            }
        }
    }

    // helpers
    skip_ws :: (ref Self) {
        while true {
            tok := lexer.peek_token()

            match tok.ttype {
                TokenType.NewLine -> {
                    lexer.next_token()
                }

                $_ -> {
                    break
                }
            }
        }
    }

    consume :: (ref Self, ttype: TokenType) -> Token {
        tok := lexer.peek_token()
        while (cast(int)tok.ttype) != (cast(int)ttype) {
            match tok.ttype {
                TokenType.EOF -> {
                    break
                }
            }

            // TODO: report error
            io.printfln("{}: unexpeted token {}", (tok.location, tok.ttype))
            lexer.next_token()
            tok = lexer.peek_token()
        }

        return lexer.next_token()
    }
}
