use import std.array
use import std.fiber
use import std.mem.std_heap_allocator
use import std.string

fmt :: import std.fmt
fs  :: import std.io.fs
io  :: import std.io

use import logging.logger

use import ast
use import ast_dumper
use import ast_pretty_printer
use import bytecode_generator
use import compiler
use import config
use import error_handler
use import lexer
use import parser
use import scope
use import value

#export_scope

validate_node :: (node: &AstNode, error_handler: ^ErrorHandler) -> bool {
    match node {

        AstArgument($node) -> {
            assert("AstArgument", node.typ != null)
            assert("AstArgument", node.typ == node.value_expr.typ)
            if !validate_node(node.value_expr, error_handler) {
                return false
            }
        }

        AstArray($node) -> {
            assert("AstArray", node.typ != null)
            // @todo
        }

        AstArrayType($node) -> {
            assert("AstArray", node.typ != null)
            if node.count != null and !validate_node(&*node.count, error_handler) {
                return false
            }
            if !validate_node(node.target, error_handler) {
                return false
            }
        }

        AstAssignment($node) -> {
            assert("AstAssignment", node.typ == @type_info(void))

            if !validate_node(node.pattern, error_handler) {
                return false
            }

            if !validate_node(node.value_expr, error_handler) {
                return false
            }
        }

        AstBinary($node) -> {
            assert("AstBinary", node.typ != null)
            if !validate_node(node.left, error_handler) {
                return false
            }
            if !validate_node(node.right, error_handler) {
                return false
            }
        }

        AstBlock($node) -> {
            assert("AstBlock", node.typ != null)

            for child in &node.children {
                if !validate_node(&**child, error_handler) {
                    return false
                }
            }
        }

        AstBool($node) -> {
            assert("AstBool", node.typ == @type_info(bool))
        }

        AstBreak($node) -> {
            assert("AstBreak", node.typ != null)
            if node.label != null and !validate_node(&*node.label, error_handler) {
                return false
            }
            if node.value_expr != null and !validate_node(&*node.value_expr, error_handler) {
                return false
            }
        }

        AstCall($node) -> {
            assert("AstCall", node.typ != null)

            if !validate_node(node.function, error_handler) {
                return false
            }

            for arg in &node.arguments {
                if !validate_node(&**arg, error_handler) {
                    return false
                }
            }
        }

        AstCast($node) -> {
            assert("AstCast", node.typ != null)

            if node.type_expr != null and !validate_node(&*node.type_expr, error_handler) {
                return false
            }

            if !validate_node(node.value_expr, error_handler) {
                return false
            }
        }

        AstConstDecl($node) -> {
            assert("AstConstDecl", node.typ == @type_info(void))
            assert("AstConstDecl", node.var_type != null)

            if node.type_expr != null and !validate_node(&*node.type_expr, error_handler) {
                return false
            }

            if !validate_node(node.value_expr, error_handler) {
                return false
            }
        }

        AstContinue($node) -> {
            assert("AstContinue", node.typ != null)
            if node.label != null and !validate_node(&*node.label, error_handler) {
                return false
            }
        }

        AstDecl($node) -> {
            assert("AstDecl", node.typ == @type_info(void))
            assert("AstDecl", node.var_type != null)

            if node.type_expr != null and !validate_node(&*node.type_expr, error_handler) {
                return false
            }

            if node.value_expr != null and !validate_node(&*node.value_expr, error_handler) {
                return false
            }
        }

        AstDefer($node) -> {
            assert("AstDefer", node.typ != null)
            if !validate_node(node.sub, error_handler) {
                return false
            }
        }

        AstDot($node) -> {
            assert("AstDot", node.typ != null)
            if node.sub != null and !validate_node(&*node.sub, error_handler) {
                return false
            }
        }

        AstFunction($node) -> {
            // assert("AstFunction", node.typ != null) // @todo
            // @todo: parameters
            // @todo: return type

            // @todo: type of node is function type

            if node.body != null and !validate_node(&*node.body, error_handler) {
                return false
            }
        }

        AstIdentifier($node) -> {
            assert("AstIdentifier", node.typ != null)
        }

        AstIf($node) -> {
            assert("AstIf", node.typ != null)
            if !validate_node(node.condition, error_handler) {
                return false
            }
            if !validate_node(node.true_case, error_handler) {
                return false
            }
            if node.false_case != null and !validate_node(&*node.false_case, error_handler) {
                return false
            }
        }

        AstImport($node) -> {
            assert("AstImport", node.typ != null)
            // if !validate_node(node.path, error_handler) {
            //     return false
            // }
        }

        AstIndex($node) -> {
            assert("AstIndex", node.typ != null)
            if !validate_node(node.sub, error_handler) {
                return false
            }

            for arg in &node.arguments {
                if !validate_node(&**arg, error_handler) {
                    return false
                }
            }
        }

        AstNumberLiteral($node) -> {
            assert("AstNumberLiteral", node.typ != null)
        }

        AstPoly($node) -> {
            assert("AstPoly", node.typ != null)
            // for param in node.params {
            //     if !validate_node(*param, error_handler) {
            //         return false
            //     }
            // }
            // if !validate_node(node.value_expr, error_handler) {
            //     return false
            // }
        }

        AstReturn($node) -> {
            assert("AstReturn", node.typ != null)
            if node.value_expr != null and !validate_node(&*node.value_expr, error_handler) {
                return false
            }
        }

        AstString($node) -> {
            assert("AstString", node.typ != null)
        }

        AstStruct($node) -> {
            assert("AstStruct", node.typ != null)
            for child in &node.children {
                if !validate_node(&**child, error_handler) {
                    return false
                }
            }
        }

        AstUfc($node) -> {
            assert("AstUfc", node.typ != null)
        }

        AstUnary($node) -> {
            assert("AstUnary", node.typ != null)
            if !validate_node(node.sub, error_handler) {
                return false
            }
        }

        _ -> {
            error_handler.report_error_at(node.location, "Validation for node not implemented")
            return false
        }
    }

    return true
}

#file_scope

assert :: (name: string, cond: Code) #macro #transparent {
    if !@insert(cond) {
        error_handler.report_error_at(
            node.location, 
            "Validation failed for {}: {}", [name, @expr_to_string(@insert(cond))])
        return false
    }
}

validate_const_decl :: (decl: ^AstConstDecl) {

}
