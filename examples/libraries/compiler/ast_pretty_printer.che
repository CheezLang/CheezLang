use import std.string
use import std.array

use import compiler.ast

fmt :: import std.fmt

#export_scope

pretty_print_ast :: (node: &AstNode) -> String {
    result := String.empty()
    pretty_print_ast_helper(result, node)
    return result
}

pretty_print_typed_ast :: (node: &AstNode) -> String {
    result := String.empty()
    pretty_print_typed_ast_helper(result, node)
    return result
}

#file_scope

append_indented :: (result: &String, str: &String, indent: int) {
    for line : str.slice().split_at_char('`n') {
        for 0..indent {
            result += " "
        }
        result += line
        result += "`n"
    }
}

pretty_print_ast_helper :: (result: &String, node: &AstNode) {
    match node {
        AstStruct($str) -> {
            fmt.format_into(result, "struct ``{")
            // @todo
            fmt.format_into(result, "``}")
        }
        
        AstTrait($str) -> {
            fmt.format_into(result, "trait ``{")
            // @todo
            fmt.format_into(result, "``}")
        }
        
        AstEnum($str) -> {
            fmt.format_into(result, "enum ``{")
            // @todo
            fmt.format_into(result, "``}")
        }

        AstFunction($func) -> {
            result += "("
            for param : func.params {
                if it_index > 0 then result.append_string(", ")
                pretty_print_ast_helper(result, <<param)
            }
            result += ") "
            if func.return_type_expr != null {
                pretty_print_ast_helper(result, <<func.return_type_expr)
            }
            if func.body != null {
                pretty_print_ast_helper(result, <<func.body)
            }
        }

        AstTuple($tuple) -> {
            result += "("
            for value : tuple.values {
                if it_index > 0 then result.append_string(", ")
                pretty_print_ast_helper(result, <<value)
            }
            result += ")"
        }

        AstConstDecl($decl) -> {
            pretty_print_ast_helper(result, decl.pattern)
            result += " :"
            if decl.type_expr != null then {
                result += " "
                pretty_print_ast_helper(result, <<decl.type_expr)
                result += " "
            }
            result += ": "
            pretty_print_ast_helper(result, decl.value_expr)
        }

        AstDecl($decl) -> {
            if decl.mutable {
                result += "mut "
            }
            if decl.pattern != null {
                pretty_print_ast_helper(result, <<decl.pattern)
            } else {
                result += "_"
            }
            result += " :"
            if decl.type_expr != null then {
                result += " "
                pretty_print_ast_helper(result, <<decl.type_expr)

                if decl.value_expr != null {
                    result += " "
                }
            }
            if decl.value_expr != null {
                result += "= "
                pretty_print_ast_helper(result, <<decl.value_expr)
            }
        }

        AstAssignment($ass) -> {
            pretty_print_ast_helper(result, ass.pattern)
            result += " = "
            pretty_print_ast_helper(result, ass.value_expr)
        }

        AstBlock($block) -> {
            r := String.empty()

            result += "{`n"
            for child : block.children {
                r.clear()
                pretty_print_ast_helper(r, <<child)
                append_indented(result, r, 4)
            }
            result += "}"
        }

        AstIdentifier($id) -> {
            result += id.name
        }

        AstNumberLiteral($num) -> {
            fmt.format_into(result, "{}", [num.value])
        }

        AstString($str) -> {
            fmt.format_into(result, "{}", [str.string_value])
        }

        AstBool($bol) -> {
            fmt.format_into(result, "{}", [bol.bool_value])
        }

        AstNull($nul) -> {
            result += "null"
        }

        AstBinary($bin) -> {
            result += "("
            pretty_print_ast_helper(result, bin.left)
            fmt.format_into(result, " {} ", [bin.operator.lexeme()])
            pretty_print_ast_helper(result, bin.right)
            result += ")"
        }

        AstUnary($un) -> {
            result += "("
            fmt.format_into(result, "{}", [un.operator.lexeme()])
            pretty_print_ast_helper(result, un.sub)
            result += ")"
        }

        AstArgument($arg) -> {
            if arg.name != null {
                pretty_print_ast_helper(result, <<arg.name)
                result += " = "
            }
            pretty_print_ast_helper(result, arg.value_expr)
        }

        AstCall($call) -> {
            pretty_print_ast_helper(result, call.function)
            result += "("
            for arg : call.arguments {
                if it_index > 0 {
                    result += ", "
                }
                pretty_print_ast_helper(result, <<arg)
            }
            result += ")"
        }

        AstCast($cst) -> {
            result += "cast"
            if cst.type_expr != null {
                result += "("
                pretty_print_ast_helper(result, <<cst.type_expr)
                result += ")"
            }
            result += " "
            pretty_print_ast_helper(result, cst.value_expr)
        }

        AstIf($iff) -> {
            result += "if "
            pretty_print_ast_helper(result, iff.condition)
            result += " then "
            pretty_print_ast_helper(result, iff.true_case)

            if iff.false_case != null {
                result += " else "
                pretty_print_ast_helper(result, <<iff.false_case)
            }
        }

        AstLoop($lop) -> {
            result += "loop "
            pretty_print_ast_helper(result, lop.body)
        }

        AstFor($forr) -> {
            result += "for "
            if forr.it_name != null then
                pretty_print_ast_helper(result, <<forr.it_name)
            if forr.index_name != null {
                if forr.it_name != null {
                    result += ", "
                }
                pretty_print_ast_helper(result, <<forr.index_name)
            }

            if forr.it_name != null or forr.index_name != null {
                result += " : "
            }
            pretty_print_ast_helper(result, forr.collection)
            result += " do "
            pretty_print_ast_helper(result, forr.body)
        }

        AstBreak($brake) -> {
            result += "break"
            if brake.label != null {
                result += " "
                pretty_print_ast_helper(result, <<brake.label)
            }
            if brake.value_expr != null {
                result += " with "
                pretty_print_ast_helper(result, <<brake.value_expr)
            }
        }

        AstContinue($cont) -> {
            result += "continue"
            if cont.label != null {
                result += " "
                pretty_print_ast_helper(result, <<cont.label)
            }
        }

        AstReturn($ret) -> {
            result += "return"
            if ret.value_expr != null {
                result += " "
                pretty_print_ast_helper(result, <<ret.value_expr)
            }
        }

        AstDefer($def) -> {
            result += "deref "
            pretty_print_ast_helper(result, def.sub)
        }

        AstImport($imp) -> {
            result += "import "
            pretty_print_ast_helper(result, imp.path)
        }

        AstMatch($mat) -> {
            result += "match "
            pretty_print_ast_helper(result, mat.value_expr)
            result += " {`n"
            result += "}"
        }

        AstTuple($tuple) -> {
            result += "("
            for v : tuple.values {
                pretty_print_ast_helper(result, <<v)
            }
            result += ")"
        }

        AstArray($array) -> {
            result += "["
            for v : array.values {
                if it_index > 0 {
                    result += ", "
                }
                pretty_print_ast_helper(result, <<v)
            }
            result += "]"
        }

        AstArrayType($array_type) -> {
            result += "["
            if array_type.count != null {
                pretty_print_ast_helper(result, <<array_type.count)
            }
            result += "]"
            pretty_print_ast_helper(result, array_type.target)
        }

        AstDot($dot) -> {
            if dot.sub != null then
                pretty_print_ast_helper(result, <<dot.sub)
            result += "."
            pretty_print_ast_helper(result, dot.name)
        }

        AstIndex($index) -> {
            pretty_print_ast_helper(result, index.sub)
            result += "["
            pretty_print_ast_helper(result, index.index)
            result += "]"
        }

        $node -> {
            // if ^node == null {
            //     @assert(false)
            // }
            // fmt.format_into(result, "[ERROR] {}: node type not implemented: {}`n", [0, ^node])
            fmt.format_into(result, "[ERROR] {}: node type not implemented`n", [0])
        }
    }
}

pretty_print_typed_ast_helper :: (result: &String, node: &AstNode) {
    match node {
        AstStruct($str) -> {
            fmt.format_into(result, "struct ``{")
            // @todo
            fmt.format_into(result, "``}")
        }
        
        AstTrait($str) -> {
            fmt.format_into(result, "trait ``{")
            // @todo
            fmt.format_into(result, "``}")
        }
        
        AstEnum($str) -> {
            fmt.format_into(result, "enum ``{")
            // @todo
            fmt.format_into(result, "``}")
        }

        AstFunction($func) -> {
            result += "("
            for param : func.params {
                if it_index > 0 then result.append_string(", ")
                pretty_print_typed_ast_helper(result, <<param)
            }
            result += ") "
            if func.return_type != null {
                fmt.format_into(result, "-> {} ", [func.return_type])
            }
            pretty_print_typed_ast_helper(result, <<func.body)
        }

        AstTuple($tuple) -> {
            result += "("
            for value : tuple.values {
                if it_index > 0 then result.append_string(", ")
                pretty_print_typed_ast_helper(result, <<value)
            }
            result += ")"
        }

        AstConstDecl($decl) -> {
            pretty_print_typed_ast_helper(result, decl.pattern)

            fmt.format_into(result, " : {} : ", [decl.var_type])
            match decl.value {
                .Int($i)    -> fmt.format_into(result, "{}", [i])
                .Float($f)  -> fmt.format_into(result, "{}", [f])
                .Bool($b)   -> fmt.format_into(result, "{}", [b])
                .String($s) -> fmt.format_into(result, "{}", [s])
                _ -> pretty_print_typed_ast_helper(result, decl.value_expr)
            }
        }

        AstDecl($decl) -> {
            if decl.mutable {
                result += "mut "
            }
            if decl.pattern != null {
                pretty_print_typed_ast_helper(result, <<decl.pattern)
            } else {
                result += "_"
            }
            fmt.format_into(result, " : {}", [decl.var_type])
            if decl.value_expr != null {
                result += " = "
                pretty_print_typed_ast_helper(result, <<decl.value_expr)
            }
        }

        AstAssignment($ass) -> {
            pretty_print_typed_ast_helper(result, ass.pattern)
            result += " = "
            pretty_print_typed_ast_helper(result, ass.value_expr)
        }

        AstBlock($block) -> {
            r := String.empty()

            result += "{`n"
            for child : block.children {
                r.clear()
                pretty_print_typed_ast_helper(r, <<child)
                append_indented(result, r, 4)
            }
            result += "}"
        }

        AstIdentifier($id) -> {
            result += id.name
        }

        AstNumberLiteral($num) -> {
            fmt.format_into(result, "{}", [num.value])
        }

        AstString($str) -> {
            fmt.format_into(result, "{}", [str.string_value])
        }

        AstBool($bol) -> {
            fmt.format_into(result, "{}", [bol.bool_value])
        }

        AstNull($nul) -> {
            result += "null"
        }

        AstBinary($bin) -> {
            result += "("
            pretty_print_typed_ast_helper(result, bin.left)
            fmt.format_into(result, " {} ", [bin.operator.lexeme()])
            pretty_print_typed_ast_helper(result, bin.right)
            result += ")"
        }

        AstUnary($un) -> {
            result += "("
            fmt.format_into(result, "{}", [un.operator.lexeme()])
            pretty_print_typed_ast_helper(result, un.sub)
            result += ")"
        }

        AstArgument($arg) -> {
            if arg.name != null {
                pretty_print_typed_ast_helper(result, <<arg.name)
                result += " = "
            }
            pretty_print_typed_ast_helper(result, arg.value_expr)
        }

        AstCall($call) -> {
            pretty_print_typed_ast_helper(result, call.function)
            result += "("
            for arg : call.arguments {
                if it_index > 0 {
                    result += ", "
                }
                pretty_print_typed_ast_helper(result, <<arg)
            }
            result += ")"
        }

        AstCast($cst) -> {
            fmt.format_into(result, "cast({}) ", [cst.typ])
            pretty_print_typed_ast_helper(result, cst.value_expr)
        }

        AstIf($iff) -> {
            result += "if "
            pretty_print_typed_ast_helper(result, iff.condition)
            result += " then "
            pretty_print_typed_ast_helper(result, iff.true_case)

            if iff.false_case != null {
                result += " else "
                pretty_print_typed_ast_helper(result, <<iff.false_case)
            }
        }

        AstLoop($lop) -> {
            result += "loop "
            pretty_print_typed_ast_helper(result, lop.body)
        }

        AstFor($forr) -> {
            result += "for "
            if forr.it_name != null then
                pretty_print_typed_ast_helper(result, <<forr.it_name)
            if forr.index_name != null {
                if forr.it_name != null {
                    result += ", "
                }
                pretty_print_typed_ast_helper(result, <<forr.index_name)
            }

            if forr.it_name != null or forr.index_name != null {
                result += " : "
            }
            pretty_print_typed_ast_helper(result, forr.collection)
            result += " do "
            pretty_print_typed_ast_helper(result, forr.body)
        }

        AstBreak($brake) -> {
            result += "break"
            if brake.label != null {
                result += " "
                pretty_print_typed_ast_helper(result, <<brake.label)
            }
            if brake.value_expr != null {
                result += " with "
                pretty_print_typed_ast_helper(result, <<brake.value_expr)
            }
        }

        AstContinue($cont) -> {
            result += "continue"
            if cont.label != null {
                result += " "
                pretty_print_typed_ast_helper(result, <<cont.label)
            }
        }

        AstReturn($ret) -> {
            result += "return"
            if ret.value_expr != null {
                result += " "
                pretty_print_typed_ast_helper(result, <<ret.value_expr)
            }
        }

        AstDefer($def) -> {
            result += "deref "
            pretty_print_typed_ast_helper(result, def.sub)
        }

        AstImport($imp) -> {
            result += "import "
            pretty_print_typed_ast_helper(result, imp.path)
        }

        AstMatch($mat) -> {
            result += "match "
            pretty_print_typed_ast_helper(result, mat.value_expr)
            result += " {`n"
            result += "}"
        }

        AstTuple($tuple) -> {
            result += "("
            for v : tuple.values {
                pretty_print_typed_ast_helper(result, <<v)
            }
            result += ")"
        }

        AstArray($array) -> {
            result += "["
            for v : array.values {
                pretty_print_typed_ast_helper(result, <<v)
            }
            result += "]"
        }

        AstArrayType($array_type) -> {
            fmt.format_into(result, "{}", [array_type.value.Type])
        }

        AstDot($dot) -> {
            if dot.sub != null then
                pretty_print_typed_ast_helper(result, <<dot.sub)
            result += "."
            pretty_print_typed_ast_helper(result, dot.name)
        }

        AstIndex($index) -> {
            pretty_print_typed_ast_helper(result, index.sub)
            result += "["
            pretty_print_typed_ast_helper(result, index.index)
            result += "]"
        }

        $node -> {
            // if ^node == null {
            //     @assert(false)
            // }
            // fmt.format_into(result, "[ERROR] {}: node type not implemented: {}`n", [0, ^node])
            fmt.format_into(result, "[ERROR] {}: node type not implemented`n", [0])
        }
    }
}
