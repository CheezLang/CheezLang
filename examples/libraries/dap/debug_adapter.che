use import std.array
use import std.hash_table
use import std.string
use import std.box
use import std.rc
use import std.thread
use import std.ring_queue

use import std.os.windows
use import std.os.windows_functions

io  :: import std.io
fmt :: import std.fmt
fs  :: import std.io.fs

use import json.json
use import clap.clap
use import logging.logger

#file_scope

ENDLINE_CHARS   :: "`r`n`r`n"
CONTENT_LENGTH  :: "Content-Length: "

#export_scope

CommandHandler :: trait {
    adapter : ^DebugAdapter

    initialize      :: (&Self) -> Result[(), String];
    launch          :: (&Self, arguments: DapReqLaunch) -> Result[(), String];
    pause           :: (&Self) -> Result[(), String];
    resume          :: (&Self) -> Result[(), String];
    next            :: (&Self) -> Result[(), String];
    step_in         :: (&Self) -> Result[(), String];
    step_out        :: (&Self) -> Result[(), String];
    threads         :: (&Self) -> Result[Array[DapThread], String];
    stacktrace      :: (&Self) -> Result[Array[DapStackFrame], String];
    set_breakpoints :: (&Self, arguments: DapSetBreakpoints) -> Result[(), String];
    scopes          :: (&Self, arguments: DapReqScopes) -> Result[Array[DapScope], String];
    variables       :: (&Self, arguments: DapReqVariables) -> Result[Array[DapVariable], String];
}

DAEvent :: enum {
    Initialized
}

DebugAdapter :: struct {
    Func :: fn(&CommandHandler, JsonValue) -> Result[JsonValue, String]

    command_handler : Rc[CommandHandler]
    command_table   : Table[string, Func]

    events          : RingQueue[DAEvent]

    _seq_counter    := 0
    running         := false
}

impl DebugAdapter {
    new :: (handler: Rc[CommandHandler]) -> Box[DebugAdapter] {
        Func :: Self.Func

        commands := Table[string, Func].create(strings_equal)
        commands["initialize"] = cast(Func) (handler, arguments) => {
            match handler.initialize() {
                Ok(_) -> {
                    json := Table[string, JsonValue].create(strings_equal)
                    json["supportsDisassembleRequest"] = JsonValue.JsonBool(true)
                    json["supportsConfigurationDoneRequest"] = JsonValue.JsonBool(true)
                    Ok(JsonValue.JsonObject(json))
                }
                Err($msg) -> Err(msg)
            }
        }
        commands["launch"] = cast(Func) (handler, arguments) => {
            match handler.launch(arguments.into()) {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["threads"] = cast(Func) (handler, arguments) => {
            match handler.threads() {
                Ok($arr) -> {
                    threads_json := Array[JsonValue].create()
                    for thread in &arr {
                        thread_json := Table[string, JsonValue].create(strings_equal)
                        thread_json["id"] = JsonValue.JsonNumber(cast(double) thread.id)
                        thread_json["name"] = JsonValue.JsonString(thread.name.clone())
                        threads_json.add(JsonValue.JsonObject(thread_json))
                    }

                    body := Table[string, JsonValue].create(strings_equal)
                    body["threads"] = JsonValue.JsonArray(threads_json)
                    Ok(JsonValue.JsonObject(body))
                }
                Err($msg) -> Err(msg)
            }
        }
        commands["setBreakpoints"] = cast(Func) (handler, arguments) => {
            match handler.set_breakpoints(arguments.into()) {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["stackTrace"] = cast(Func) (handler, arguments) => {
            match handler.stacktrace() {
                Ok($arr) -> {
                    body := Table[string, JsonValue].create(strings_equal)
                    body["stackFrames"] = JsonValue.JsonArray(arr.into())
                    Ok(JsonValue.JsonObject(body))
                }
                Err($msg) -> Err(msg)
            }
        }
        commands["pause"] = cast(Func) (handler, arguments) => {
            match handler.pause() {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["continue"] = cast(Func) (handler, arguments) => {
            match handler.resume() {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["next"] = cast(Func) (handler, arguments) => {
            match handler.next() {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["stepIn"] = cast(Func) (handler, arguments) => {
            match handler.step_in() {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["stepOut"] = cast(Func) (handler, arguments) => {
            match handler.step_out() {
                Ok(_) -> Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
                Err($msg) -> Err(msg)
            }
        }
        commands["scopes"] = cast(Func) (handler, arguments) => {
            match handler.scopes(arguments.into()) {
                Ok($arr) -> {
                    body := Table[string, JsonValue].create(strings_equal)
                    body["scopes"] = JsonValue.JsonArray(arr.into())
                    Ok(JsonValue.JsonObject(body))
                }
                Err($msg) -> Err(msg)
            }
        }
        commands["variables"] = cast(Func) (handler, arguments) => {
            match handler.variables(arguments.into()) {
                Ok($arr) -> {
                    body := Table[string, JsonValue].create(strings_equal)
                    body["variables"] = JsonValue.JsonArray(arr.into())
                    Ok(JsonValue.JsonObject(body))
                }
                Err($msg) -> Err(msg)
            }
        }

        commands["configurationDone"] = cast(Func) (handler, arguments) => Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
        commands["setExceptionBreakpoints"] = cast(Func) (handler, arguments) => Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
        commands["disconnect"] = cast(Func) (handler, arguments) => {
            handler.adapter.running = false
            Ok(JsonValue.JsonObject(Table[string, JsonValue].create(strings_equal)))
        }

        adapter := Box[DebugAdapter].new(DebugAdapter(
            command_handler     = handler
            command_table       = commands
            events              = RingQueue[DAEvent].new()
        ))

        adapter.get().command_handler.get().adapter = ^*adapter.get()
        return adapter
    }

    enqueue_event :: (&Self, event: DAEvent) {
        events.push(event)
    }

    run :: (&Self) {
        running = true
        command_loop()
        exit :: (i: i32);
        exit(0)
    }

    handle_command :: (&Self, handler: &CommandHandler, command: String, arguments: JsonValue) -> Result[JsonValue, String] {
        return match command_table.get(command.slice()) {
            Some($func) -> func(handler, arguments)
            None -> {
                Memory.drop(arguments)
                Err(fmt.format("Failed to handle command '{}'", [command]))
            }
        }
    }

    command_loop :: (&Self) {
        while running {
            request_text := read_request_string()
            if request_text.get_length() == 0 then break
            g_logger.log("{}", [request_text.slice()], "-> (C) ")

            json := parse_json(JsonValue, request_text.slice())

            match json {
                Some($val) -> {
                    {
                        request_pretty := serialize_json_value(&val, pretty = true)
                        g_logger.log("{}", [request_pretty], "-> (C) ")
                    }
                    request := val.to_map()

                    seq := cast(int) request.at("seq").to_number()
                    command := request.at("command").to_string()
                    arguments := match request.get("arguments") {
                        Some($args) -> args.as_map().clone()
                        None -> Table[string, JsonValue].create(strings_equal)
                    }

                    response := Table[string, JsonValue].create(strings_equal)
                    response["type"] = JsonValue.JsonString("response".to_owned())
                    response["command"] = JsonValue.JsonString(command.clone())
                    response["request_seq"] = JsonValue.JsonNumber(cast(double) seq)

                    match handle_command(command_handler.get(), command, JsonValue.JsonObject(arguments)) {
                        Ok($body) -> {
                            response["success"] = JsonValue.JsonBool(true)
                            response["body"] = body
                        }

                        Err($msg) -> {
                            response["success"] = JsonValue.JsonBool(false)
                            response["message"] = JsonValue.JsonString(msg)
                        }
                    }

                    response["seq"] = JsonValue.JsonNumber(double(_seq_counter))
                    _seq_counter += 1

                    response_obj := JsonValue.JsonObject(response)
                    response_string := serialize_json_value(&response_obj, pretty = true)
                    g_logger.log("{}", [response_string], "<- (R) ")

                    send_message("{}{}{}{}", [CONTENT_LENGTH, response_string.get_length(), ENDLINE_CHARS, response_string])

                    while events.count() > 0 {
                        event := events.pop()
                        match event {
                            .Initialized -> self.emit_initialized_event()
                        }
                    }
                }
            }


            g_logger.log("===================================================")
        }
    }

    read_request_string :: (&Self) -> String {
        read_char :: (c: ^char) -> bool {
            read := 0u32

            b := 0u8
            ReadFile(__std_in_handle, ^b, 1, ^read, null)
            *c = cast b
            return read > 0
        }

        header := String.empty()

        loop {
            c := char(0)
            if !read_char(^c) {
                return String.empty()
            }

            header += c

            if !header.slice().ends_with(ENDLINE_CHARS) then continue

            length_index := header.slice().index_of_string(CONTENT_LENGTH)
            if length_index < 0 then continue

            content_length := {
                str := header.slice()[length_index + CONTENT_LENGTH.bytes.length ..].trim()
                fmt.parse_int(str)
            }

            result := String.with_capacity(content_length + 1)
            read := 0u32
            ReadFile(__std_in_handle, result.get_raw(), cast content_length, ^read, null)
            result.resize(content_length)
            return result
        }

        @assert(false)
    }

    send_message :: (&Self, format: string, args: []^any = []) {
        io.formatln(format, args)
    }
    
    emit_event :: (&Self, name: string, body: JsonValue) {
        response := Table[string, JsonValue].create(strings_equal)
        response["type"] = JsonValue.JsonString("event".to_owned())
        response["event"] = JsonValue.JsonString(name.to_owned())
        response["body"] = body
        response["seq"] = JsonValue.JsonNumber(double(_seq_counter))
        _seq_counter += 1

        response_obj := JsonValue.JsonObject(response)
        response_string := serialize_json_value(&response_obj, pretty = true)
        g_logger.log("{}", [response_string], "<- (E) ")

        send_message("{}{}{}{}", [CONTENT_LENGTH, response_string.get_length(), ENDLINE_CHARS, response_string])
    }

    emit_initialized_event :: (&Self) {
        body := Table[string, JsonValue].create(strings_equal)
        emit_event("initialized", JsonValue.JsonObject(body))
    }

    emit_stop_event :: (&Self, reason: string, description: Option[string] = None, text: Option[string] = None) {
        body := Table[string, JsonValue].create(strings_equal)
        body["reason"] = JsonValue.JsonString(reason.to_owned())
        body["threadId"] = JsonValue.JsonNumber(0)

        if description == .Some {
            body["description"] = JsonValue.JsonString(description.Some.to_owned())
        }
        if text == .Some {
            body["text"] = JsonValue.JsonString(text.Some.to_owned())
        }

        emit_event("stopped", JsonValue.JsonObject(body))
    }

    emit_continued_event :: (&Self) {
        body := Table[string, JsonValue].create(strings_equal)
        body["threadId"] = JsonValue.JsonNumber(0)
        body["allThreadsContinued"] = JsonValue.JsonBool(true)
        emit_event("continued", JsonValue.JsonObject(body))
    }

    emit_terminated_event :: (&Self) {
        body := Table[string, JsonValue].create(strings_equal)
        emit_event("terminated", JsonValue.JsonObject(body))
    }

    emit_output_event :: (&Self, output: String, category: string = "console") {
        output += "`n"
        body := Table[string, JsonValue].create(strings_equal)
        body["output"] = JsonValue.JsonString(output)
        body["category"] = JsonValue.JsonString(category.to_owned())
        emit_event("output", JsonValue.JsonObject(body))
    }
}

// 

DapReqLaunch :: struct {
    program : String
}

impl Into[DapReqLaunch] for JsonValue {
    into :: (json: &Self) -> DapReqLaunch {
        map := json.as_map()
        return DapReqLaunch(
            program = match map.get("program") {
                Some($prog) -> prog.to_string()
                None -> "".to_owned()
            }
        )
    }
}

DapThread :: struct {
    id   : int
    name : String
}
DapBreakpoint :: struct {
    line : int
}

impl Into[DapBreakpoint] for JsonValue {
    into :: (json: &Self) -> DapBreakpoint {
        return match json {
            .JsonObject($map) -> DapBreakpoint(cast(int) map.at("line").to_number())
            _ -> DapBreakpoint(-1)
        }
    }
}

DapSource :: struct {
    name : String
    path : String
}

impl Into[JsonValue] for DapSource {
    into :: (&Self) -> JsonValue {
        json := Table[string, JsonValue].create(strings_equal)
        json["name"] = JsonValue.JsonString(self.name.clone())
        json["path"] = JsonValue.JsonString(self.path.clone())
        return JsonValue.JsonObject(json)
    }
}

impl Into[DapSource] for JsonValue {
    into :: (&Self) -> DapSource {
        map := self.as_map()
        name := map.at("name").to_string()
        path := map.at("path").to_string()
        return DapSource(name, path)
    }
}

DapSetBreakpoints :: struct {
    source      : DapSource
    breakpoints : Array[DapBreakpoint]
}

impl Into[DapSetBreakpoints] for JsonValue {
    into :: (&Self) -> DapSetBreakpoints {
        map := self.as_map()
        breakpoints : Array[DapBreakpoint] = match map.get("breakpoints") {
            Some($arr) -> arr.as_array().into()
            None -> Array[DapBreakpoint].create()
        }
        source : DapSource = match map.get("source") {
            Some($source) -> source.into()
            None -> DapSource(String.empty(), String.empty())
        }
        return DapSetBreakpoints(
            source      = source
            breakpoints = breakpoints
        )
    }
}

DapStackFrame :: struct {
    id      : int
    name    : String
    line    : int
    column  : int
    source  : DapSource
}

impl Into[JsonValue] for DapStackFrame {
    into :: (&Self) -> JsonValue {
        json := Table[string, JsonValue].create(strings_equal)
        json["id"] = JsonValue.JsonNumber(cast(double) self.id)
        json["name"] = JsonValue.JsonString(self.name.clone())
        json["source"] = cast(JsonValue) source.into()
        json["line"] = JsonValue.JsonNumber(cast(double) line)
        json["column"] = JsonValue.JsonNumber(cast(double) column)
        return JsonValue.JsonObject(json)
    }
}

DapReqVariables :: struct {
    variables_reference : int
    start               : Option[int]
    count               : Option[int]
}

impl Into[DapReqVariables] for JsonValue {
    into :: (&Self) -> DapReqVariables {
        map := self.as_map()
        variablesReference := map.at("variablesReference").to_number()
        start := map.get("start").map_ref((v: &JsonValue) => int(v.to_number()))
        count := map.get("count").map_ref((v: &JsonValue) => int(v.to_number()))
        return DapReqVariables(
            variables_reference = cast(int) variablesReference
            start               = start
            count               = count
        )
    }
}

DapReqScopes :: struct {
    frame_id : int
}

impl Into[DapReqScopes] for JsonValue {
    into :: (&Self) -> DapReqScopes {
        map := self.as_map()
        frameId := map.at("frameId").to_number()
        return DapReqScopes(cast(int) frameId)
    }
}

DapScope :: struct {
    variables_reference : int
    name                : String
    presentation_hint   : String
}

impl Into[JsonValue] for DapScope {
    into :: (&Self) -> JsonValue {
        json := Table[string, JsonValue].create(strings_equal)
        json["name"] = JsonValue.JsonString(self.name.clone())
        json["presentationHint"] = JsonValue.JsonString(self.presentation_hint.clone())
        json["variablesReference"] = JsonValue.JsonNumber(cast(double) self.variables_reference)
        return JsonValue.JsonObject(json)
    }
}

DapVariable :: struct {
    variables_reference : int
    name                : String
    value               : String
    type_name           : String
    named_variables     : int
    indexed_variables   : int
}

impl Into[JsonValue] for DapVariable {
    into :: (&Self) -> JsonValue {
        json := Table[string, JsonValue].create(strings_equal)
        json["name"]                = JsonValue.JsonString(self.name.clone())
        json["value"]               = JsonValue.JsonString(self.value.clone())
        json["type"]                = JsonValue.JsonString(self.type_name.clone())
        json["variablesReference"]  = JsonValue.JsonNumber(cast(double) self.variables_reference)
        if self.named_variables != 0 {
            json["namedVariables"] = JsonValue.JsonNumber(cast(double) self.named_variables)
        }
        if self.indexed_variables != 0 {
            json["indexedVariables"] = JsonValue.JsonNumber(cast(double) self.indexed_variables)
        }
        return JsonValue.JsonObject(json)
    }
}

#file_scope