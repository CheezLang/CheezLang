#load("io.che")
#load("memory.che")
#load("string.che")

trait Allocator {
    fn Allocate(count: ulong, elementSize: ulong) -> any&;
    fn Free(mem: any&);
}

trait GAllocator {
    fn GAllocate(count: ulong) -> $T&;
    fn GFree(mem: $T&);
}

struct StdHeapAllocator {}

impl StdHeapAllocator {
    fn test() {
        Printfn("vtable: {i64}`n", [(any)__vtable])
    }
}

impl Allocator for StdHeapAllocator {
    fn Allocate(count: ulong, elementSize: ulong) -> any& {
        Println("Allocate")
        // return malloc((int)(count * elementSize))
        return null
    }    

    fn Free(mem: any&) {
        Println("Free")
        // free(mem)
    }
}

impl GAllocator for StdHeapAllocator {
    fn GAllocate(count: ulong) -> $T& {
        Println("GAllocate")
        // return (T&)malloc((int)(count * @sizeof(T)))
        return null
    }

    /*
    fn GAllocate<int>(count: ulong) -> int& {
        Println("GAllocate")
        // return (int&)malloc((int)(count * @sizeof(int)))
        return null
    }
    
    fn GAllocate<bool>(count: ulong) -> bool& {
        Println("GAllocate")
        // return (bool&)malloc((int)(count * @sizeof(bool)))
        return null
    }

    fn GAllocate<string>(count: ulong) -> string& {
        Println("GAllocate")
        // return (string&)malloc((int)(count * @sizeof(string)))
        return null
    }
    */

    fn GFree(mem: $T&) {
        Println("GFree")
        // free((any&)mem)
    }
}



struct StackAllocator {
    // ...
}

impl GAllocator for StdHeapAllocator {
    fn GAllocate(count: ulong) -> $T& {
        Println("GAllocate")
        // return (T&)malloc((int)(count * @sizeof(T)))
        return null
    }

    /*
    fn GAllocate<char>(count: ulong) -> char& {
        Println("GAllocate")
        // return (char&)malloc((int)(count * @sizeof(char)))
        return null
    }

    fn GAllocate<string>(count: ulong) -> string& {
        Println("GAllocate")
        // return (string&)malloc((int)(count * @sizeof(string)))
        return null
    }
    */

    fn GFree(mem: $T&) {
        Println("GFree")
        // free((any&)mem)
    }
}





trait Strigify {
    fn ToString() -> String;
}

struct Vec3 {
    x: int
    y: int
    z: int
}

struct Vec2 {
    x: int
    y: int
}

impl Strigify for Vec2 {
    ref fn ToString() -> String {
        let s = "".ToString()
        Sprintfn(&s, "({i64}, {i32}, {i32})", [(any)__vtable, x, y])
        return s
    }
}

impl Strigify for Vec3 {
    ref fn ToString() -> String {
        let s = "".ToString()
        Sprintfn(&s, "({i64}, {i32}, {i32}, {i32})", [(any)__vtable, x, y, z])
        return s
    }
}

struct Vtable {
    // trait Allocator
    Allocate            : fn (TraitObject, ulong, ulong) -> any&
    Free                : fn (TraitObject, any&)

    // trait GAllocator
    GAllocate<int>      : fn (TraitObject, ulong) -> int&
    GAllocate<bool>     : fn (TraitObject, ulong) -> bool&
    GAllocate<string>   : fn (TraitObject, ulong) -> string&
    GAllocate<char>     : fn (TraitObject, ulong) -> char&

    // trait Stringify
    ToString            : fn (TraitObject) -> String
}

struct TraitObject {
    vtable: Vtable&
    ptr: any&
}

fn Main() {
    /*
    let __vtable_StdHeapAllocator = new Vtable {
        Allocate            = StdHeapAllocator::Allocate
        Free                = StdHeapAllocator::Free
        GAllocate<int>      = StdHeapAllocator::GAllocate<int>
        GAllocate<bool>     = StdHeapAllocator::GAllocate<bool>
        GAllocate<string>   = StdHeapAllocator::GAllocate<string>
        GAllocate<char>     = null
        ToString            = null
    }

    let __vtable_StackAllocator = new Vtable {
        Allocate            = null
        Free                = null
        GAllocate<int>      = null
        GAllocate<bool>     = null
        GAllocate<string>   = StackAllocator::GAllocate<string>
        GAllocate<char>     = StackAllocator::GAllocate<char>
        ToString            = null
    }

    let __vtable_Vec2 = new Vtable {
        Allocate            = null
        Free                = null
        GAllocate<int>      = null
        GAllocate<bool>     = null
        GAllocate<string>   = null
        GAllocate<char>     = null
        ToString            = Vec2::ToString
    }

    let __vtable_Vec3 = new Vtable {
        Allocate            = null
        Free                = null
        GAllocate<int>      = null
        GAllocate<bool>     = null
        GAllocate<string>   = null
        GAllocate<char>     = null
        ToString            = Vec3::ToString
    }
    */

    let v2 = new Vec2 { 1, 2 }
    let v3 = new Vec3 { 1, 2, 3 }

    let s2 = v2.ToString()
    // let s2 = __vtable_Vec2.ToString(new TraitObject { __vtable_Vec2, &v2 })
    defer s2.Dispose()

    let s3 = v3.ToString()
    // let s3 = __vtable_Vec3.ToString(new TraitObject { __vtable_Vec3, &v3 })
    defer s3.Dispose()

    Println(s2)
    Println(s3)

    let v: Strigify
    v = v2
    // v = new TraitObject { __vtable_Vec2, &v2 }

    v.ToString()
    // v.vtable.ToString(v)

    v = v3
    // v = new TraitObject { __vtable_Vec3, &v3 }

    v.ToString()
    // v.vtable.ToString(v)







    let sha: StdHeapAllocator

    let ints: int& = sha.Allocate(10, @sizeof(int))
    sha.test()
    sha.Free(ints)
    // __vtable_StdHeapAllocator.Free(new TraitObject { __vtable_StdHeapAllocator, &sha })





    let alloc: Allocator = sha
    // let alloc: Allocator = new TraitObject { __vtable_StdHeapAllocator, &sha }

    alloc.Allocate(1, 2)
    // alloc.vtable.Allocate(alloc, 1, 2)




    let alloc: GAllocator = sha
    // let alloc: GAllocator = new TraitObject { __vtable_StdHeapAllocator, &sha }

    let ints: int& = alloc.GAllocate(1)
    // alloc.vtable.GAllocate<int>(alloc, 1)
    let bools: bool& = alloc.GAllocate(1)
    // alloc.vtable.GAllocate<bool>(alloc, 1)
    let strings: string& = alloc.GAllocate(1)
    // alloc.vtable.GAllocate<short>(alloc, 1)

    let alloc: GAllocator = new StackAllocator {}
    // let __temp = new StackAllocator {}
    // let alloc: Allocator = new TraitObject { __vtable_StackAllocator, &__temp }

    let ints: char& = alloc.GAllocate(1)
    // alloc.vtable.GAllocate<char>(alloc, 1)
    let strings: string& = alloc.GAllocate(1)
    // alloc.vtable.GAllocate<short>(alloc, 1)

    // s3.Dispose()
    // s2.Dispose()
}
