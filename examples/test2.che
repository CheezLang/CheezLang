//* corotine stuff
foo :: () -> int #coroutine {
    return 0
    return 1
    return 2
}

mul :: (a: int) -> int #coroutine(b: int) {
    while true {
        return a * b
    }
}

mul2 :: (a: int) -> Fn(int) -> int {
    return |b| a * b
}

bar :: (x: int) #fiber {
    printfln("x = {}", x)

    println("bar: a")
    yield
    println("bar: b")
    yield
    baz()
    yield
    println("bar: c")
    yield
    println("bar: d")
}

baz :: () {
    println("   baz: a")
    yield
    println("   baz: b")
    yield
    println("   baz: c")
    yield
    println("   baz: d")
}

Main :: () {
    b : Fiber = bar()
    b() // bar: a
    b() // bar: b
    b() //    baz: a
    b() //    baz: b
    b() //    baz: c
    b() //    baz: d
    b() // bar: c
    b() // bar: d
    b() //

    f : Fn() -> int = foo()

    println(f())
    println(f())
    println(f())
    println(f()) // panics

    doubl : Fn(int) -> int = mul(2)
    println(doubl(1))
    println(doubl(2))
    println(doubl(3))

    triple : Fn(int) -> int = mul2(3)
    println(triple(1))
    println(triple(2))
    println(triple(3))
}
// +/

//* comp time code gen stuff
vec3 :: struct {
    x: float
    y: float
    z: float
}

def :: (T: type) -> T {
    result : T = default
    #code {
        type_info := @type_info(T)

        for m : type_info.members {
            #statement @dot(result, m.name) = default(m.typ)
        }
    }

    return result
}

Main :: () {
    v := def(vec3)
}
// */