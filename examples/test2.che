fn c_printf(format: c_string) #varargs #linkname("printf");
fn c_strlen(str: c_string) -> i32 #linkname("strlen");
fn c_puts(str: c_string) #linkname("puts");

fn c_malloc(size: i32) -> *any #linkname("malloc");
fn c_free(mem: *any) #linkname("free");
fn c_memset(mem: *any, value: i32, num: usize) -> *any #linkname("memset");

typedef HANDLE = i32

fn GetStdHandle(h: i32) -> i32 #stdcall;
fn WriteFile(handle: HANDLE, str: c_string, length: i32, bytes_written: *i32 = null, reserved: i32 = 0) #stdcall;


let __std_in_handle: i32 = GetStdHandle(-10)
let __std_out_handle: i32 = GetStdHandle(-11)
let __std_err_handle: i32 = GetStdHandle(-12)

fn print_string(str: string) {
    WriteFile(__std_out_handle, str.data, cast str.length)
}

fn print_cstring(str: c_string) {
    let len = c_strlen(str)
    WriteFile(__std_out_handle, str, len)
}

fn print_number(n: $T) {
    c_printf("%d`n", n)
}

fn bool_to_string(b: bool) -> string {
    return if b { "true" } else { "false" }
}

fn bool_to_cstring(b: bool) -> c_string {
    return if b { "true" } else { "false" }
}

fn println(str: string) {
    print_string(str)
    print_string("`n")
}

fn printlnc(str: c_string) {
    print_cstring(str)
    print_string("`n")
}

fn alloc($T: type) -> *T {
    let ptr = c_malloc(@sizeof(T))
    return cast c_memset(ptr, 0, @sizeof(T))
}

fn free(ptr: *$T) {
    c_free(cast ptr)
}